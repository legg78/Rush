<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="products">

<!--
        Common sql configuration not included in SqlMapConfig
     -->
    <sql id="limitationOpen">
            SELECT *
            FROM (                
    </sql>
    
    <sql id="limitationOpenCount">
            SELECT count(*)
            FROM (                
    </sql>
    
    <sql id="limitationClose">               
            	) q
            <isNotNull property="limitation" prepend=" WHERE ">$limitation$</isNotNull>
    </sql>
    
    <sql id="paginatedOpen">
            SELECT *
            FROM(
                SELECT a.*, rownum r
                FROM(
		<include refid="limitationOpen"/>                 
    </sql>

    <sql id="paginatedClose">
    	<include refid="limitationClose"/>
                    ) a
                WHERE rownum <![CDATA[<]]>= (#range.end# + 1)
            )
            WHERE r >= (#range.start# + 1)
    </sql>

	<resultMap  id="mapping-product"
                class="ru.bpc.sv2.products.Product">
        <result property="id" column="id"/>
        <result property="seqNum" column="seqnum"/>
        <result property="name" column="label"/>
        <result property="description" column="description"/>
        <result property="lang" column="lang"/>
        <result property="status" column="status"/>
        <result property="instId" column="inst_id"/>
        <result property="instName" column="inst_name"/>
        <result property="parentId" column="parent_id"/>
        <result property="productType" column="product_type"/>
        <result property="contractType" column="contract_type"/>
        <result property="productNumber" column="product_number" />
	</resultMap>

	<resultMap  id="mapping-product-hier"
                class="ru.bpc.sv2.products.Product"  extends="mapping-product">
    	<result property="level" column="level" />
        <result property="isLeaf" javaType="boolean" column="is_leaf" />
	</resultMap>
	
	<parameterMap class="java.util.HashMap" id="request-scale-mapping">
		<parameter property="instId" jdbcType="NUMBER"/>
		<parameter property="objectType" jdbcType="VARCHAR"/>
	</parameterMap>
	
	<select id="get-products-hier" parameterClass="qparams" resultMap="mapping-product-hier">
		select level
		     , p.id
		     , p.seqnum
		     , p.inst_id
		     , p.inst_name
		     , p.label
		     , p.description
		     , p.lang
		     , p.parent_id
		     , p.product_type
		     , p.contract_type
		     , p.status
		     , CONNECT_BY_ISLEAF AS is_leaf
		     , p.product_number
		  from (select distinct p1.*
		             , i.name inst_name
		          from prd_ui_product_vw p1
		             , ost_ui_institution_sys_vw i
		         where p1.inst_id = i.id(+)
		           and p1.lang = i.lang(+)
		           and p1.inst_id in (select inst_id from acm_cu_inst_vw)
				<iterate prepend="START WITH" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="id">p1.id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="lang">p1.lang = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="instId">p1.inst_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="name">upper(p1.label) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="productType">p1.product_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="status">p1.status = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="contractType">p1.contract_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="productNumber">p1.product_number = #filters[].value#</isEqual>
				</iterate>
		connect by prior p1.parent_id = p1.id
				<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="lang">p1.lang = #filters[].value#</isEqual>
				</iterate>
		     ) p
		  start with
			<isNotNull property="startWith">p.id = #startWith#</isNotNull>
			<isNull property="startWith">p.parent_id is null</isNull>
		connect by prior p.id = p.parent_id
		  order siblings by p.label asc
	</select>
	
	<select	id="get-products"
	    	parameterClass="qparams"
	    	resultMap="mapping-product" >
	    <include refid="limitationOpen"/>
		SELECT	 
                p.id
                , p.seqnum
                , p.inst_id
                , i.name inst_name
	            , p.label
	            , p.description
	            , p.lang
	            , p.parent_id
	            , p.product_type
	            , p.status
	            , p.contract_type
                , p.product_number
	    FROM 
	    	prd_ui_product_vw p, ost_ui_institution_sys_vw i
	    WHERE
	    	p.inst_id = i.id(+)
	    	AND p.lang = i.lang(+)
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
	        	<isEqual property="filters[].element" compareValue="instId">p.inst_id = #filters[].value#</isEqual>
	        	<isEqual property="filters[].element" compareValue="lang">p.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(p.label) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productType">p.product_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="status">p.status = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="contractType">p.contract_type = #filters[].value#</isEqual>
                <isEqual property="filters[].element" compareValue="productNumber">p.product_number = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="parentIsNull">p.parent_id IS NULL</isEqual>
				<isEqual property="filters[].element" compareValue="serviceTypeId">
					p.product_type = (
						SELECT product_type 
						FROM prd_ui_service_type_vw
						WHERE id = #filters[].value#
						AND lang = com_ui_user_env_pkg.get_user_lang
					)
				</isEqual>
				<isEqual property="filters[].element" compareValue="customerType">
					p.contract_type IN (
						SELECT contract_type FROM prd_ui_contract_type_vw
						WHERE customer_entity_type = #filters[].value#
					)
				</isEqual>
			</iterate>
		<iterate prepend="ORDER BY" conjunction=", " property="sorting">
	       	<isNotEqual property="sorting[].direction" compareValue="AUTO">
	           	<isEqual property="sorting[].property" compareValue="name">p.label $sorting[].direction$</isEqual>
	           	<isEqual property="sorting[].property" compareValue="status">p.status $sorting[].direction$</isEqual>
	    	</isNotEqual>
		</iterate>
		<isEmpty property="sorting" prepend=" ORDER BY ">p.label ASC</isEmpty>
		<include refid="limitationClose"/>
	</select>

	<select id="get-products-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
        SELECT id 
        FROM prd_ui_product_vw
       	<iterate prepend="WHERE" conjunction="AND" property="filters">
       		<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
        	<isEqual property="filters[].element" compareValue="instId">inst_id = #filters[].value#</isEqual>
        	<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(label) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="productType">product_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="status">status = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="contractType">contract_type = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="productNumber">product_number = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="parentIsNull">parent_id IS NULL</isEqual>
		</iterate>
		<include refid="limitationClose"/>
    </select>

	<select id="get-product-by-id"
            parameterClass="java.util.HashMap"
            resultClass="ru.bpc.sv2.products.Product">
        select id             as id
             , label          as name
             , description    as description
             , lang           as lang
             , inst_id        as instId
             , parent_id      as parentId
             , seqnum         as seqNum
             , contract_type  as contractType
             , product_type   as productType
             , product_number as productNumber
             , status         as status
          from prd_ui_product_vw
         where id = #productId#
           and lang = #lang#
    </select>

    <procedure
	    	id="add-product"
	    	parameterClass="ru.bpc.sv2.products.Product">
    	{call PRD_UI_PRODUCT_PKG.add_product(
				  o_id				=> #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum			=> #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_product_type	=> #productType#
				, i_contract_type	=> #contractType#
				, i_parent_id		=> #parentId#
				, i_inst_id			=> #instId#
				, i_lang			=> #lang#
				, i_label			=> #name#
				, i_description		=> #description#
				, i_status 			=> #status#
                , i_product_number  => #productNumber#
				)}
    </procedure>

    <procedure id="modify-product"
            parameterClass="ru.bpc.sv2.products.Product">
    	{call PRD_UI_PRODUCT_PKG.modify_product(
				  i_id				=> #id#
				, io_seqnum			=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
				, i_lang			=> #lang#
				, i_label			=> #name#
				, i_description		=> #description#
				, i_status 			=> #status#
                , i_product_number  => #productNumber#
				)}
    </procedure>

    <procedure
    		id="remove-product"
    		parameterClass="ru.bpc.sv2.products.Product">
    	{call PRD_UI_PRODUCT_PKG.remove_product(
				  i_id				=> #id#
				, i_seqnum			=> #seqNum#
				)}
    </procedure>

	<resultMap	id="mapping-product-attr"
				class="ru.bpc.sv2.products.ProductAttribute">
		<result property="id" column="id"/>
		<result property="systemName" column="attr_name"/>
		<result property="dataType" column="data_type"/>
		<result property="lovId" column="lov_id"/>
		<result property="displayOrder" column="display_order"/>
		<result property="attrEntityType" column="attr_entity_type"/>
		<result property="attrObjectType" column="attr_object_type"/>
		<result property="parentId" column="parent_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="lang" column="lang"/>
		<result property="label" column="label"/>
		<result property="fullDesc" column="description"/>
		<result property="scaleId" column="scale_id"/>
		<result property="scaleName" column="scale_name"/>
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst_name"/>
		<result property="productId" column="product_id"/>
		<result property="serviceId" column="service_id"/>
		<result property="defLevel" column="definition_level"/>
		<result property="level" column="level"/>
		<result property="isLeaf" column="is_leaf" javaType="boolean"/>
		<result property="serviceStatus" column="service_status"/>
		<result property="value" column="attr_value"/>
		<result property="valueV" column="attr_char_value"/>
		<result property="valueN" column="attr_number_value"/>
		<result property="valueD" column="attr_date_value"/>
	</resultMap>
	
	<resultMap	id="mapping-service-attr"
				class="ru.bpc.sv2.products.ProductAttribute">
		<result property="id" column="id"/>
		<result property="systemName" column="attr_name"/>
		<result property="dataType" column="data_type"/>
		<result property="lovId" column="lov_id"/>
		<result property="displayOrder" column="display_order"/>
		<result property="attrEntityType" column="attr_entity_type"/>
		<result property="attrObjectType" column="attr_object_type"/>
		<result property="parentId" column="parent_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="lang" column="lang"/>
		<result property="label" column="label"/>
		<result property="fullDesc" column="description"/>
		<result property="scaleId" column="scale_id"/>
		<result property="scaleName" column="scale_name"/>
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst_name"/>
		<result property="productId" column="product_id"/>
		<result property="serviceId" column="service_id"/>
		<result property="defLevel" column="definition_level"/>
		<result property="level" column="a_level"/>
		<result property="isLeaf" column="is_leaf" javaType="boolean"/>
		<result property="serviceStatus" column="service_status"/>			
		<result property="visible" column="is_visible" javaType="boolean"/>
		<result property="value" column="attr_value"/>
	</resultMap>

	<select	id="get-object-attrs"
	    	parameterClass="qparams"
	    	resultMap="mapping-product-attr" fetchSize="500">
	<include refid="limitationOpen"/>
		select a.id
			 , a.attr_name
			 , a.data_type
			 , a.lov_id
			 , a.display_order
			 , a.attr_entity_type
			 , a.attr_object_type
			 , a.parent_id
			 , a.entity_type
			 , a.lang
			 , a.label
			 , a.description
			 , a.scale_id
			 , a.scale_name
			 , a.inst_id
			 , a.product_id
			 , a.object_id
			 , a.service_id
			 , a.definition_level
			 , a.service_status
			 , i.name AS inst_name
			 , case
				  when v_obj.lov_id is not null
				  then
				  	 v_obj.attr_lov_value
				  when v_prd.lov_id is not null
				  then
				  	 v_prd.attr_lov_value
				  when a.attr_entity_type is not null
				  then
					 coalesce (v_obj.value_description, v_prd.value_description)
				  else
					 null
			   end
				 attr_value
			 , coalesce (v_obj.attr_char_value, v_prd.attr_char_value) attr_char_value
			 , coalesce (v_obj.attr_number_value, v_prd.attr_number_value) attr_number_value
			 , coalesce (v_obj.attr_date_value, v_prd.attr_date_value) attr_date_value
			 , level
			 , connect_by_isleaf as is_leaf
		from (select a.id
				, a.attr_name
				, a.data_type
				, a.lov_id
				, a.display_order
				, a.attr_entity_type
				, a.attr_object_type
				, a.parent_id
				, a.entity_type
				, a.lang
				, a.label
				, a.description
				, a.scale_id
				, a.scale_name
				, a.inst_id
				, a.product_id
				, a.object_id
				, a.service_id
				, a.definition_level
				, a.service_status
			from prd_ui_attribute_object_vw a
			where 7 = 7
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="productId">
					a.product_id = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="serviceId">
					a.service_id = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">
					a.entity_type = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="lang">
					a.lang = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">
					a.object_id = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="objectIds">
					a.object_id IN
					<iterate open="(" close=")" conjunction=", " property="filters[].value">
						#filters[].value[].value#
					</iterate>
				</isEqual>
				<isEqual property="filters[].element" compareValue="attrObjectType">
					a.attr_object_type = #filters[].value#
				</isEqual>
			</iterate>
		) a
		join ost_ui_institution_sys_vw  i on a.inst_id = i.id and a.lang    = i.lang
		left join (select av.attr_id
						, av.service_id
						, av.entity_type
						, av.object_id
						, av.lang
						, av.start_date
						, av.end_date
						, av.attr_char_value
						, av.attr_number_value
						, av.attr_date_value
						, av.lov_id
						, av.attr_lov_value
						, av.value_description
						, row_number() over (partition by av.attr_id
														, av.service_id
														, av.entity_type
														, av.object_id
														, av.lang
											 order by decode(level_priority, 0, 0, 1)
													, level_priority
													, start_date desc
													, register_timestamp desc
											) as rn
					from prd_ui_attribute_value_vw av
					<iterate prepend="WHERE" conjunction="AND" property="filters">
						<isEqual property="filters[].element" compareValue="lang">
							av.lang = #filters[].value#
						</isEqual>
					</iterate>
					) v_obj
		on v_obj.attr_id         = a.id
		   and v_obj.service_id  = a.service_id
		   and v_obj.entity_type = a.entity_type
		   and v_obj.object_id   = a.object_id
		   and v_obj.lang        = a.lang
		   and v_obj.rn          = 1
		   and get_sysdate() between v_obj.start_date and coalesce(v_obj.end_date, get_sysdate())
        left join (select av.attr_id
                        , av.service_id
                        , 'ENTTPROD'    as entity_type
                        , av.product_id as object_id
                        , av.lang
                        , av.start_date
                        , av.end_date
                        , av.attr_char_value
                        , av.attr_number_value
                        , av.attr_date_value
                        , av.lov_id
                        , av.attr_lov_value
                        , av.value_description
                        , row_number () over (partition by av.attr_id
                                                         , av.service_id
                                                         , av.product_id
                                                         , av.lang
                                              order by decode (level_priority, 0, 0, 1)
                                                     , level_priority
                                                     , start_date desc
                                                     , register_timestamp desc
                                             ) as rn
                   from prd_ui_product_attr_value_vw av
				   <iterate prepend="WHERE" conjunction="AND" property="filters">
					   <isEqual property="filters[].element" compareValue="lang">
						   av.lang = #filters[].value#
					   </isEqual>
				   </iterate>
                   ) v_prd
        on v_prd.attr_id         = a.id
           and v_prd.service_id  = a.service_id
           and v_prd.object_id   = a.product_id
           and v_prd.lang        = a.lang
           and v_prd.rn          = 1
           and get_sysdate () between v_prd.start_date and coalesce (v_prd.end_date, get_sysdate ())
		connect by prior a.id           = a.parent_id
				and prior a.lang        = a.lang
				and prior a.object_id   = a.object_id
				and prior a.entity_type = a.entity_type
				and (prior a.service_id = a.service_id or a.service_id is null or prior a.service_id is null)
		start with a.parent_id is null
		<iterate prepend="AND" property="filters">
			<isEqual property="filters[].element" compareValue="instId">
				a.inst_id = #filters[].value#
			</isEqual>
		</iterate>
		order siblings by a.object_id, a.display_order, upper(a.label)
		<include refid="limitationClose"/>
	</select>

	<select	id="get-service-attrs"
	    	parameterClass="qparams"
	    	resultMap="mapping-service-attr" fetchSize="500">
		<include refid="limitationOpen"/>
		select res.*
			 , level as a_level
			 , connect_by_isleaf as is_leaf
		  from (select a.id
					 , a.attr_name
					 , a.data_type
					 , a.lov_id
					 , a.display_order
					 , a.attr_entity_type
					 , a.attr_object_type
					 , a.parent_id
					 , a.entity_type
					 , get_user_lang lang
					 , get_text('prd_attribute', 'label', a.id)       as label
					 , get_text('prd_attribute', 'description', a.id) as description
					 , a.scale_id
					 , get_text('rul_mod_scale', 'name', a.scale_id)  as scale_name
					 , a.inst_id
					 , null as product_id
					 , a.service_id
					 , a.definition_level
					 , null as service_status
					 , coalesce((select is_visible from prd_service_attribute t where t.service_id = a.service_id and t.attribute_id = a.id), a.is_visible, 0) as is_visible
					 , case
						   when a.inst_id = 9999
						   then com_api_label_pkg.get_label_text('SYS_INST_NAME')
						   else get_text('ost_institution', 'name', a.inst_id)
					   end as inst_name
					 , case
						   when a.lov_id is not null then
								nvl2(v.attr_value, get_lov_value(a.data_type, v.attr_value, a.lov_id), null)
						   when a.attr_entity_type is not null then
							   case v.entity_type
								   when 'ENTTFEES' then fcl_ui_fee_pkg.get_fee_desc(to_number(v.attr_value, 'FM000000000000000000.0000'))
								   when 'ENTTCYCL' then fcl_ui_cycle_pkg.get_cycle_desc(to_number(v.attr_value, 'FM000000000000000000.0000'))
								   when 'ENTTLIMT' then fcl_ui_limit_pkg.get_limit_desc(to_number(v.attr_value, 'FM000000000000000000.0000'))
								   else v.attr_value
							   end
						   else
							   null
					   end attr_value
					 , nvl2(v.attr_value, get_number_value(a.data_type, v.attr_value), null) as attr_number_value
					 , nvl2(v.attr_value, get_char_value  (a.data_type, v.attr_value), null) as attr_char_value
					 , nvl2(v.attr_value, get_date_value  (a.data_type, v.attr_value), null) as attr_date_value
				from (select a.id
						   , a.attr_name
						   , a.data_type
						   , a.lov_id
						   , a.display_order
						   , a.entity_type as attr_entity_type
						   , a.object_type as attr_object_type
						   , a.parent_id
						   , 'ENTTSRVC' as entity_type
						   , (select b.scale_id from prd_attribute_scale b where b.attr_id = a.id and b.inst_id = s.inst_id) as scale_id
						   , s.inst_id
						   , s.id as service_id
						   , a.definition_level
						   , a.is_visible
						   , s.split_hash
						from prd_service s
						   , prd_service_type e
						   , prd_attribute a
					   where 1 = 1
					   <iterate prepend="AND" conjunction="AND" property="filters">
						   <isEqual property="filters[].element" compareValue="attrId">a.id = #filters[].value#</isEqual>
						   <isEqual property="filters[].element" compareValue="instId">s.inst_id = #filters[].value#</isEqual>
						   <isEqual property="filters[].element" compareValue="serviceId">s.id = #filters[].value#</isEqual>
						   <isEqual property="filters[].element" compareValue="serviceIds">
								s.id in (
								<iterate conjunction="," property="filters[].valueList">#filters[].valueList[]#</iterate>
								)
						   </isEqual>
					   </iterate>
						 and exists (select 1 from acm_cu_inst_vw i where i.inst_id = s.inst_id)
						 and e.id              = s.service_type_id
						 and a.service_type_id = e.id
					) a
				left join (
					  select v.entity_type
						   , v.object_id
						   , v.attr_id
						   , v.attr_value
						   , v.split_hash
						   , row_number() over (partition by v.attr_id
														   , v.entity_type
														   , v.object_id
													order by v.start_date desc
											   ) as rn
						from prd_attribute_value v
					   where v.entity_type = 'ENTTSRVC'
						 and get_sysdate() between v.start_date and coalesce(v.end_date, get_sysdate())
				   ) v
				  on v.attr_id     = a.id
				 and v.object_id   = a.service_id
				 and v.split_hash  = a.split_hash
				 and v.rn 		   = 1
		) res
		start with res.parent_id is null
		connect by prior res.id = res.parent_id
		order siblings by res.service_id, res.display_order
		<include refid="limitationClose"/>
	</select>
	
	<resultMap	id="mapping-attr-light"
				class="ru.bpc.sv2.products.ProductAttribute">
		<result property="id" column="id"/>
		<result property="systemName" column="attr_name"/>
		<result property="dataType" column="data_type"/>
		<result property="lovId" column="lov_id"/>
		<result property="attrEntityType" column="attr_entity_type"/>
		<result property="attrObjectType" column="attr_object_type"/>
		<result property="entityType" column="entity_type"/>
		<result property="lang" column="lang"/>
		<result property="label" column="label"/>
		<result property="scaleId" column="scale_id"/>
		<result property="instId" column="inst_id"/>
		<result property="serviceId" column="service_id"/>
		<result property="defLevel" column="definition_level"/>		
	</resultMap>
	
	<select	id="get-service-attrs-light"
	    	parameterClass="qparams"
	    	resultMap="mapping-attr-light" fetchSize="500">
        SELECT    a.id
                , a.attr_name
                , a.data_type
                , a.lov_id
                , a.attr_entity_type
                , a.attr_object_type
                , a.entity_type
                , a.lang
                , a.label
                , a.scale_id
                , a.inst_id
                , a.service_id
                , a.definition_level                
        FROM app_ui_attribute_service_vw a
		<iterate prepend="WHERE" conjunction="AND" property="filters">
        	<isEqual property="filters[].element" compareValue="instId">
        		a.inst_id = #filters[].value#
        	</isEqual>
        	<isEqual property="filters[].element" compareValue="serviceId">
        		a.service_id = #filters[].value#
        	</isEqual>
        	<isEqual property="filters[].element" compareValue="definitionLevel">
        		a.definition_level = #filters[].value#
        	</isEqual>
        	<isEqual property="filters[].element" compareValue="entityTypeNot">
        		a.entity_type != #filters[].value#
        	</isEqual>
        	<isEqual property="filters[].element" compareValue="entityType">
        		a.entity_type = #filters[].value#
        	</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
				a.lang = #filters[].value#
			</isEqual>
		</iterate>		
		ORDER BY a.label
	</select>

	<select	id="get-product-attrs"
	    	parameterClass="qparams"
	    	resultMap="mapping-product-attr" fetchSize="500">
		<include refid="limitationOpen"/>
		select a.*
			, case when v.lov_id  is not null then v.attr_lov_value
			  	   when a.attr_entity_type is not null then v.value_description
				   else null
			  end attr_value
			, v.attr_char_value
			, v.attr_number_value
			, v.attr_date_value
		from (
			SELECT level
			, a.id
			, a.attr_name
			, a.data_type
			, a.lov_id
			, a.display_order
			, a.attr_entity_type
			, a.attr_object_type
			, a.parent_id
			, a.entity_type
			, a.lang
			, a.label
			, a.description
			, a.scale_id
			, a.scale_name
			, a.inst_id
			, a.product_id
			, a.service_id
			, a.definition_level
			, NULL AS inst_name
			, NULL AS service_status
			, CONNECT_BY_ISLEAF AS is_leaf
			, rownum as row_num
			FROM prd_ui_attribute_product_vw a
			START WITH a.parent_id IS NULL
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">
					a.id = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="productId">
					a.product_id = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="serviceId">
					a.service_id = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="lang">
					a.lang = #filters[].value#
				</isEqual>
			</iterate>
			CONNECT BY PRIOR a.id = a.parent_id
				AND PRIOR a.lang = a.lang
				AND PRIOR a.product_id = a.product_id
				AND PRIOR a.service_id = a.service_id
			ORDER SIBLINGS BY a.display_order, upper(a.label)
		) a
		left join (
			select pv.attr_id
			, pv.service_id
			, pv.lov_id
			, pv.attr_lov_value
			, pv.value_description
			, pv.attr_char_value
			, pv.attr_number_value
			, pv.attr_date_value
			, pv.product_id
			, pv.lang
		, row_number() over(partition by pv.attr_id, pv.service_id, pv.product_id, pv.lang order by decode(level_priority, 0, 0, 1), level_priority, start_date desc, register_timestamp desc) as R
		from prd_ui_product_attr_value_vw pv
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="productId">
				pv.product_id = #filters[].value#
			</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
				pv.lang = #filters[].value#
			</isEqual>
		</iterate>
		and pv.mod_id is NULL
		and get_sysdate() between nvl(pv.start_date, get_sysdate()) and nvl(pv.end_date, trunc(get_sysdate())+1)
		) v
		on v.attr_id    = a.id
		and v.product_id = a.product_id
		and v.service_id = a.service_id
		and v.lang       = a.lang
		where v.r is null or v.r = 1
		order by a.row_num
		<include refid="limitationClose"/>
	</select>
	
	<resultMap id="mapping-product-attr-value" class="ru.bpc.sv2.products.AttributeValue">
		<result property="objectId" column="product_id"/>
		<result property="serviceId" column="service_id"/>
		<result property="entityType" column="product_type"/>
		<result property="ownerProductId" column="owner_product_id"/>
		<result property="ownerProductName" column="owner_product_name"/>
		<result property="levelPriority" column="level_priority"/>
		<result property="attrId" column="attr_id"/>
		<result property="attrName" column="attr_name"/>
		<result property="modId" column="mod_id"/>
		<result property="modName" column="mod_name"/>
		<result property="modPriority" column="mod_priority"/>
		<result property="startDate" column="start_date" javaType="java.util.Date"/>
		<result property="endDate" column="end_date" javaType="java.util.Date"/>
		<result property="regDate" column="register_timestamp" javaType="java.util.Date"/>
		<result property="objectType" column="attr_object_type"/>
		<result property="value" column="attr_value"/>
		<result property="valueV" column="value_v"/>
		<result property="valueN" column="value_n"/>
		<result property="valueD" column="value_d"/>
		<result property="valueDesc" column="value_description"/>
		<result property="valueId" column="value_id"/>
		<result property="campaignName" column="campaign_name"/>
		<result property="campaignNumber" column="campaign_number"/>
		<result property="lang" column="lang"/>
	</resultMap>

	<select id="get-product-attr-values" parameterClass="qparams" resultMap="mapping-product-attr-value">
		<include refid="limitationOpen"/>
			select pav.product_id
			     , pav.service_id
			     , 'ENTTPROD' as product_type
			     , pav.owner_product_id
			     , prd.label as owner_product_name
			     , pav.level_priority
			     , pav.attr_id
			     , pav.attr_name
			     , pav.mod_id
			     , pav.mod_name
			     , pav.mod_priority
			     , pav.start_date
			     , pav.end_date
			     , pav.register_timestamp
			     , pav.attr_object_type
			     , pav.attr_value
			     , pav.attr_char_value as value_v
			     , pav.attr_number_value as value_n
			     , pav.attr_date_value as value_d
			     , pav.attr_lov_value as lov_value
			     , pav.value_description
			     , pav.value_id
			     , cca.name as campaign_name
			     , cca.campaign_number as campaign_number
			     , pav.lang
			  from prd_ui_product_attr_value_vw pav
			     , prd_ui_product_vw prd
			     , cpn_ui_attribute_value_vw cav
			     , cpn_ui_campaign_vw cca
			 where pav.lang = com_ui_user_env_pkg.get_user_lang
			   and cav.attribute_value_id(+) = pav.value_id
			   and cca.id(+) = cav.campaign_id
			   and cca.lang(+) = cav.lang
			   and cav.lang(+) = pav.lang
		<iterate prepend=" and " conjunction=" and " property="filters">
			<isEqual property="filters[].element" compareValue="id">pav.value_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="objectId">pav.product_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="attrId">pav.attr_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="serviceId">pav.service_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="effDate">
				    (pav.start_date <![CDATA[<]]>= to_date(#filters[].value#, 'DD.MM.YYYY HH24:MI')
				 or pav.start_date is null)
				and (pav.end_date >= to_date(#filters[].value#, 'DD.MM.YYYY HH24:MI')
				 or pav.end_date is null)
			</isEqual>
			<isEqual property="filters[].element" compareValue="campaignId">cav.campaign_id = #filters[].value#</isEqual>
		</iterate>
			and prd.id = pav.owner_product_id
			and prd.lang = pav.lang
		<iterate prepend=" order by " conjunction=", " property="sorting">
	       	<isNotEqual property="sorting[].direction" compareValue="AUTO">
	           	<isEqual property="sorting[].property" compareValue="modName">
	           		pav.mod_priority $sorting[].direction$, upper(pav.mod_name) $sorting[].direction$
	           	</isEqual>
	           	<isEqual property="sorting[].property" compareValue="regDate">pav.register_timestamp $sorting[].direction$</isEqual>
	           	<isEqual property="sorting[].property" compareValue="startDate">pav.start_date $sorting[].direction$</isEqual>
	           	<isEqual property="sorting[].property" compareValue="value">
	           		  pav.value_description $sorting[].direction$
	           		, value_n $sorting[].direction$
	           		, value_v $sorting[].direction$
	           		, value_d $sorting[].direction$
	           	</isEqual>
	    	</isNotEqual>
		</iterate>
		<isEmpty property="sorting">order by pav.register_timestamp asc</isEmpty>
		<include refid="limitationClose"/>
	</select>

	<select id="get-product-attr-values-count" parameterClass="qparams" resultClass="int">
		<include refid="limitationOpenCount"/>
			select *
			  from prd_ui_product_attr_value_vw pav
		<iterate prepend=", " conjunction=", " property="filters">
			<isEqual property="filters[].element" compareValue="campaignId">cpn_ui_attribute_value_vw ca</isEqual>
		</iterate>
		WHERE pav.lang = com_ui_user_env_pkg.get_user_lang
        <iterate prepend="AND" conjunction="AND" property="filters">
        	<isEqual property="filters[].element" compareValue="id">pav.value_id = #filters[].value#</isEqual>
        	<isEqual property="filters[].element" compareValue="objectId">pav.product_id = #filters[].value#</isEqual>
        	<isEqual property="filters[].element" compareValue="attrId">pav.attr_id = #filters[].value#</isEqual>
        	<isEqual property="filters[].element" compareValue="serviceId">pav.service_id = #filters[].value#</isEqual>
        	<isEqual property="filters[].element" compareValue="effDate">
				(pav.start_date <![CDATA[<]]>= TO_DATE(#filters[].value#, 'DD.MM.YYYY HH24:MI') OR pav.start_date IS NULL)
        		AND (pav.end_date >= TO_DATE(#filters[].value#, 'DD.MM.YYYY HH24:MI') OR pav.end_date IS NULL)
        	</isEqual>
			<isEqual property="filters[].element" compareValue="campaignId">
				ca.attribute_value_id = pav.value_id and ca.campaign_id = #filters[].value# and ca.lang = pav.lang
			</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<resultMap id="mapping-attr-value" class="ru.bpc.sv2.products.AttributeValue">
		<result property="objectId" column="object_id"/>
		<result property="serviceId" column="service_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="ownerProductId" column="owner_product_id"/>
		<result property="ownerProductName" column="owner_product_name"/>
		<result property="levelPriority" column="level_priority"/>
		<result property="attrId" column="attr_id"/>
		<result property="attrName" column="attr_name"/>
		<result property="modId" column="mod_id"/>
		<result property="modName" column="mod_name"/>
		<result property="modPriority" column="mod_priority"/>
		<result property="startDate" column="start_date" javaType="java.util.Date"/>
		<result property="endDate" column="end_date" javaType="java.util.Date"/>
		<result property="regDate" column="register_timestamp" javaType="java.util.Date"/>
		<result property="objectType" column="attr_object_type"/>
		<result property="value" column="attr_value"/>
		<result property="valueV" column="value_v"/>
		<result property="valueN" column="value_n"/>
		<result property="valueD" column="value_d"/>
		<result property="valueDesc" column="value_description"/>
		<result property="valueId" column="value_id"/>
		<result property="campaignName" column="campaign_name"/>
		<result property="campaignNumber" column="campaign_number"/>
		<result property="lang" column="lang"/>
	</resultMap>

	<select	id="get-attribute-values" parameterClass="qparams" resultMap="mapping-attr-value">
		<include refid="limitationOpen"/>
			select av.object_id
			     , av.service_id
			     , av.entity_type
			     , av.owner_product_id
			     , to_char(null) owner_product_name
			     , av.level_priority
			     , av.attr_id
			     , av.attr_name
			     , av.mod_id
			     , av.mod_name
			     , av.mod_priority
			     , av.start_date
			     , av.end_date
			     , av.register_timestamp
			     , av.attr_object_type
			     , av.attr_value
			     , av.attr_char_value value_v
			     , av.attr_number_value value_n
			     , av.attr_date_value value_d
			     , av.attr_lov_value lov_value
			     , av.value_description
			     , av.value_id
			     , ca.name as campaign_name
			     , ca.campaign_number as campaign_number
			     , av.lang
			  from prd_ui_attribute_value_vw av
			     , cpn_ui_attribute_value_vw cv
			     , cpn_ui_campaign_vw ca
			 where av.lang = com_ui_user_env_pkg.get_user_lang
			   and cv.attribute_value_id(+) = av.value_id
			   and ca.id(+) = cv.campaign_id
			   and ca.lang(+) = cv.lang
			   and cv.lang(+) = av.lang
		<iterate prepend=" AND " conjunction=" AND " property="filters">
			<isEqual property="filters[].element" compareValue="id">av.value_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="objectId">av.object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="attrId">av.attr_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="serviceId">av.service_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">av.entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="effDate">
				(trunc(av.start_date) <![CDATA[<]]>= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY')) OR av.start_date IS NULL)
				AND (trunc(av.end_date) >= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY'))OR av.end_date IS NULL)
			</isEqual>
			<isEqual property="filters[].element" compareValue="campaignId">cv.campaign_id = #filters[].value#</isEqual>
		</iterate>
		<iterate prepend="ORDER BY" conjunction=", " property="sorting">
	       	<isNotEqual property="sorting[].direction" compareValue="AUTO">
	           	<isEqual property="sorting[].property" compareValue="modName">
	           		av.mod_priority $sorting[].direction$, upper(av.mod_name) $sorting[].direction$
	           	</isEqual>
	           	<isEqual property="sorting[].property" compareValue="regDate">av.register_timestamp $sorting[].direction$</isEqual>
	           	<isEqual property="sorting[].property" compareValue="startDate">av.start_date $sorting[].direction$</isEqual>
	           	<isEqual property="sorting[].property" compareValue="value">
	           		  av.value_description $sorting[].direction$
	           		, value_n $sorting[].direction$
	           		, value_v $sorting[].direction$
	           		, value_d $sorting[].direction$
	           	</isEqual>
	    	</isNotEqual>
		</iterate>
		<isEmpty property="sorting">ORDER BY av.register_timestamp ASC</isEmpty>
		<include refid="limitationClose"/>
	</select>
	
	<select	id="get-attribute-values-count" parameterClass="qparams" resultClass="int">
	    <include refid="limitationOpenCount"/>
		SELECT *
		FROM prd_ui_attribute_value_vw va
		<iterate prepend=", " conjunction=", " property="filters">
			<isEqual property="filters[].element" compareValue="campaignId">cpn_ui_attribute_value_vw ca</isEqual>
		</iterate>
		WHERE va.lang = com_ui_user_env_pkg.get_user_lang
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="objectId">va.object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="attrId">va.attr_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="serviceId">va.service_id = #filters[].value#</isEqual>
		   	<isEqual property="filters[].element" compareValue="entityType">va.entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="effDate">
				(trunc(va.start_date) <![CDATA[<]]>= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY')) OR va.start_date IS NULL)
				AND (trunc(va.end_date) >= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY'))OR va.end_date IS NULL)
			</isEqual>
			<isEqual property="filters[].element" compareValue="campaignId">
				ca.attribute_value_id = va.value_id and ca.campaign_id = #filters[].value# and ca.lang = va.lang
			</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<select id="get-mixed-attr-values" parameterClass="qparams" resultMap="mapping-attr-value">
		<include refid="limitationOpen"/>
			select * from (
				select pav.product_id object_id
				     , pav.service_id
				     , pav.product_type as entity_type
				     , pav.owner_product_id
				     , prd.label owner_product_name
				     , pav.level_priority
				     , pav.attr_id
				     , pav.attr_name
				     , pav.mod_id
				     , pav.mod_name
				     , pav.mod_priority
				     , pav.start_date
				     , pav.end_date
				     , pav.register_timestamp
				     , pav.attr_object_type
				     , pav.attr_value
				     , pav.attr_char_value value_v
				     , pav.attr_number_value value_n
				     , pav.attr_date_value value_d
				     , pav.attr_lov_value lov_value
				     , pav.value_description
				     , pav.value_id
				     , cca.name as campaign_name
				     , cca.campaign_number as campaign_number
				     , pav.lang
				  from prd_ui_product_attr_value_vw pav
				     , prd_ui_product_vw prd
				     , cpn_ui_attribute_value_vw cav
				     , cpn_ui_campaign_vw cca
				 where pav.lang = com_ui_user_env_pkg.get_user_lang
				   and cav.attribute_value_id(+) = pav.value_id
				   and cca.id(+) = cav.campaign_id
				   and cca.lang(+) = cav.lang
				   and cav.lang(+) = pav.lang
				<iterate prepend=" and " conjunction=" and " property="filters">
					<isEqual property="filters[].element" compareValue="id">pav.value_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="productId">pav.product_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="attrId">pav.attr_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="serviceId">pav.service_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="effDate">
						(trunc(pav.start_date) <![CDATA[<]]>= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY HH24:MI')) OR pav.start_date IS NULL)
						AND (trunc(pav.end_date) >= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY HH24:MI'))OR pav.end_date IS NULL)
					</isEqual>
					<isEqual property="filters[].element" compareValue="attrObjectType">pav.attr_object_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="campaignId">cav.campaign_id = #filters[].value#</isEqual>
				</iterate>
				   and prd.id = pav.owner_product_id
				   and prd.lang = pav.lang
			union all
				select av.object_id
				     , av.service_id
				     , av.entity_type
				     , av.owner_product_id
				     , to_char(null) owner_product_name
				     , av.level_priority
				     , av.attr_id
				     , av.attr_name
				     , av.mod_id
				     , av.mod_name
				     , av.mod_priority
				     , av.start_date
				     , av.end_date
				     , av.register_timestamp
				     , av.attr_object_type
				     , av.attr_value
				     , av.attr_char_value value_v
				     , av.attr_number_value value_n
				     , av.attr_date_value value_d
				     , av.attr_lov_value lov_value
				     , av.value_description
				     , av.value_id
				     , ca.name as campaign_name
				     , ca.campaign_number as campaign_number
				     , av.lang
				  from prd_ui_attribute_value_vw av
				     , cpn_ui_attribute_value_vw cv
				     , cpn_ui_campaign_vw ca
				 where av.lang = com_ui_user_env_pkg.get_user_lang
				   and cv.attribute_value_id(+) = av.value_id
				   and ca.id(+) = cv.campaign_id
				   and ca.lang(+) = cv.lang
				   and cv.lang(+) = av.lang
				<iterate prepend=" and " conjunction=" and " property="filters">
					<isEqual property="filters[].element" compareValue="id">av.value_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="objectId">av.object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="attrId">av.attr_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="serviceId">av.service_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="entityType">av.entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="effDate">
						(trunc(av.start_date) <![CDATA[<]]>= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY HH24:MI')) OR av.start_date IS NULL)
						AND (trunc(av.end_date) >= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY HH24:MI'))OR av.end_date IS NULL)
					</isEqual>
					<isEqual property="filters[].element" compareValue="attrObjectType">av.attr_object_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="campaignId">cv.campaign_id = #filters[].value#</isEqual>
				</iterate>
		)
		<iterate prepend="ORDER BY" conjunction=", " property="sorting">
	       	<isNotEqual property="sorting[].direction" compareValue="AUTO">
	       		<isEqual property="sorting[].property" compareValue="levelPriority">level_priority $sorting[].direction$</isEqual>
	           	<isEqual property="sorting[].property" compareValue="modName">
	           		mod_priority $sorting[].direction$, upper(mod_name) $sorting[].direction$
	           	</isEqual>
	           	<isEqual property="sorting[].property" compareValue="regDate">register_timestamp $sorting[].direction$</isEqual>
	           	<isEqual property="sorting[].property" compareValue="startDate">start_date $sorting[].direction$</isEqual>
	           	<isEqual property="sorting[].property" compareValue="value">
	           		  value_description $sorting[].direction$ 
	           		, value_n $sorting[].direction$ 
	           		, value_v $sorting[].direction$
	           		, value_d $sorting[].direction$
	           	</isEqual>
	    	</isNotEqual>
		</iterate>
		<isEmpty property="sorting">ORDER BY register_timestamp ASC</isEmpty>
		<include refid="limitationClose"/>
	</select>

	<select	id="get-mixed-attr-values-count"
	    	parameterClass="qparams"
	    	resultClass="int">
	    <include refid="limitationOpenCount"/>
		SELECT * FROM (
			SELECT value_id 
			FROM prd_ui_product_attr_value_vw
			WHERE lang = com_ui_user_env_pkg.get_user_lang
	        <iterate prepend="AND" conjunction="AND" property="filters">
	        	<isEqual property="filters[].element" compareValue="productId">product_id = #filters[].value#</isEqual>
	        	<isEqual property="filters[].element" compareValue="attrId">attr_id = #filters[].value#</isEqual>
        		<isEqual property="filters[].element" compareValue="serviceId">service_id = #filters[].value#</isEqual>
	        	<isEqual property="filters[].element" compareValue="effDate">
	        		(trunc(start_date) <![CDATA[<]]>= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY HH24:MI')) OR start_date IS NULL) 
	        		AND (trunc(end_date) >= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY HH24:MI'))OR end_date IS NULL)
	        	</isEqual>
			</iterate>
			UNION ALL
				SELECT value_id
				FROM prd_ui_attribute_value_vw
				WHERE lang = com_ui_user_env_pkg.get_user_lang
		        <iterate prepend="AND" conjunction="AND" property="filters">
		        	<isEqual property="filters[].element" compareValue="objectId">object_id = #filters[].value#</isEqual>
		        	<isEqual property="filters[].element" compareValue="attrId">attr_id = #filters[].value#</isEqual>
			       	<isEqual property="filters[].element" compareValue="entityType">entity_type = #filters[].value#</isEqual>
        			<isEqual property="filters[].element" compareValue="serviceId">service_id = #filters[].value#</isEqual>
		        	<isEqual property="filters[].element" compareValue="effDate">
		        		(trunc(start_date) <![CDATA[<]]>= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY HH24:MI')) OR start_date IS NULL) 
		        		AND (trunc(end_date) >= trunc(TO_DATE(#filters[].value#, 'DD.MM.YYYY HH24:MI'))OR end_date IS NULL)
		        	</isEqual>
				</iterate>
		)
		<include refid="limitationClose"/>
	</select>

    <procedure id="set-attr-value-char"
    		parameterClass="ru.bpc.sv2.products.AttributeValue">
    	{call PRD_UI_ATTRIBUTE_VALUE_PKG.set_attr_value_char(
				  io_id					=> #valueId,jdbcType=NUMERIC,mode=INOUT#
				, i_service_id			=> #serviceId#
	   			, i_entity_type 		=> #entityType#
	   			, i_object_id			=> #objectId#
	   			, i_attr_name			=> #attrName#
	   			, i_mod_id				=> #modId#
	   			, i_start_date			=> #startDate#
	   			, i_end_date			=> #endDate#
	   			, i_value				=> #valueV#
				, i_campaign_id			=> #campaignId#
	   			)}
    </procedure>
	
    <procedure id="set-attr-value-num"
    		parameterClass="ru.bpc.sv2.products.AttributeValue">
    	{call PRD_UI_ATTRIBUTE_VALUE_PKG.set_attr_value_num(
    			  io_id					=> #valueId,jdbcType=NUMERIC,mode=INOUT#
    			, i_service_id			=> #serviceId#
    			, i_entity_type 		=> #entityType#
    			, i_object_id			=> #objectId#
    			, i_attr_name			=> #attrName#
    			, i_mod_id				=> #modId#
    			, i_start_date			=> #startDate#
    			, i_end_date			=> #endDate#
    			, i_value 				=> #valueN#
				, i_campaign_id			=> #campaignId#
    			)}
    </procedure>

    <procedure id="set-attr-value-date"
    		parameterClass="ru.bpc.sv2.products.AttributeValue">
    	{call PRD_UI_ATTRIBUTE_VALUE_PKG.set_attr_value_date(
    			  io_id					=> #valueId,jdbcType=NUMERIC,mode=INOUT#
    			, i_service_id			=> #serviceId#
    			, i_entity_type 		=> #entityType#
    			, i_object_id			=> #objectId#
    			, i_attr_name			=> #attrName#
    			, i_mod_id				=> #modId#
    			, i_start_date			=> #startDate#
    			, i_end_date			=> #endDate#
    			, i_value				=> #valueD#
				, i_campaign_id			=> #campaignId#
    			)}
    </procedure>

    <procedure id="set-attr-value-fee"
    		parameterClass="ru.bpc.sv2.products.AttributeValue">
    	{call PRD_UI_ATTRIBUTE_VALUE_PKG.set_attr_value_fee(
    			  io_attr_value_id		=> #valueId,jdbcType=NUMERIC,mode=INOUT#
    			, i_service_id			=> #serviceId#
    			, i_entity_type 		=> #entityType#
    			, i_object_id			=> #objectId#
    			, i_attr_name			=> #attrName#
    			, i_mod_id				=> #modId#
    			, i_start_date			=> #startDate#
    			, i_end_date			=> #endDate#
    			, i_fee_id				=> #value#
				, i_campaign_id			=> #campaignId#
    			)}
    </procedure>

	<procedure id="set-attr-value-limit" parameterClass="ru.bpc.sv2.products.AttributeValue">
		{call PRD_UI_ATTRIBUTE_VALUE_PKG.set_attr_value_limit(
			  io_attr_value_id	=> #valueId,jdbcType=NUMERIC,mode=INOUT#
			, i_service_id		=> #serviceId#
			, i_entity_type 	=> #entityType#
			, i_object_id		=> #objectId#
			, i_attr_name		=> #attrName#
			, i_mod_id			=> #modId#
			, i_start_date		=> #startDate#
			, i_end_date		=> #endDate#
			, i_limit_id		=> #value#
			, i_is_cyclic		=> #isCyclic#
			, i_campaign_id		=> #campaignId#
		)}
	</procedure>

    <procedure id="set-attr-value-cycle"
    		parameterClass="ru.bpc.sv2.products.AttributeValue">
    	{call PRD_UI_ATTRIBUTE_VALUE_PKG.set_attr_value_cycle(
    			  io_attr_value_id		=> #valueId,jdbcType=NUMERIC,mode=INOUT#
    			, i_service_id			=> #serviceId#
    			, i_entity_type 		=> #entityType#
    			, i_object_id			=> #objectId#
    			, i_attr_name			=> #attrName#
    			, i_mod_id				=> #modId#
    			, i_start_date			=> #startDate#
    			, i_end_date			=> #endDate#
    			, i_cycle_id			=> #value#
				, i_campaign_id			=> #campaignId#
    			)}
    </procedure>

    <procedure id="refresh-mat-views">
    	{call RUL_API_PRODUCT_PKG.refresh_mvw}
    </procedure>

	<resultMap id="mapping-attribute" class="ru.bpc.sv2.products.Attribute">
		<result property="id" column="id"/>
		<result property="parentId" column="parent_id"/>
		<result property="serviceTypeId" column="service_type_id"/>
		<result property="name" column="attr_name"/>
		<result property="dataType" column="data_type"/>
		<result property="lovId" column="lov_id"/>
		<result property="displayOrder" column="display_order"/>
		<result property="entityType" column="entity_type"/>
		<result property="objectType" column="object_type"/>
		<result property="definitionLevel" column="definition_level"/>
		<result property="lang" column="lang"/>
		<result property="label" column="label"/>
		<result property="description" column="description"/>
		<result property="cyclic" column="is_cyclic" javaType="boolean" nullValue="false"/>
		<result property="useLimit" column="is_use_limit" javaType="boolean" nullValue="false"/>
		<result property="cyclicLimit" column="is_cyclic_limit" javaType="boolean" nullValue="false"/>
		<result property="visible" column="is_visible" javaType="boolean" nullValue="false"/>
		<result property="lovName" column="lov_name"/>
		<result property="serviceTypeName" column="service_type_name"/>
		<result property="cycleCalcStartDate" column="cycle_calc_start_date"/>
		<result property="cycleCalcDateType" column="cycle_calc_date_type"/>
		<result property="lengthTypeMandatory" column="is_need_length_type" javaType="boolean" nullValue="false"/>
		<result property="repeating" column="is_repeating" nullValue="false"/>
		<result property="counterAlgorithm" column="counter_algorithm"/>
        <result property="limitUsage" column="limit_usage"/>
	</resultMap>

	<resultMap id="mapping-attribute-hier" class="ru.bpc.sv2.products.Attribute" extends="mapping-attribute">
		<result property="level" column="level"/>
		<result property="isLeaf" column="is_leaf" javaType="boolean" nullValue="false"/>
		<result property="postMethod" column="posting_method"/>
	</resultMap>

	<select	id="get-attributes-hier"
			   parameterClass="qparams"
			   resultMap="mapping-attribute-hier" fetchSize="500">
		SELECT * FROM (
			SELECT level
			, attr.*
			, CONNECT_BY_ISLEAF as is_leaf
			FROM (
			SELECT DISTINCT * FROM (
			SELECT    a.id
			, a.parent_id
			, a.service_type_id
			, a.attr_name
			, a.data_type
			, a.lov_id
			, a.display_order
			, a.entity_type
			, a.object_type
			, a.definition_level
			, a.lang
			, a.label
			, a.description
			, a.is_cyclic
			, a.is_use_limit
			, a.is_cyclic_limit
			, a.is_visible
			, a.is_need_length_type
			, lov.name lov_name
			, st.label service_type_name
			, flc.cycle_calc_start_date
			, flc.cycle_calc_date_type
			, fll.posting_method
			, flc.is_repeating
			, fll.counter_algorithm
            , fll.limit_usage
			FROM prd_ui_attribute_vw a, com_ui_lov_vw lov, prd_ui_service_type_vw st, fcl_ui_cycle_type_vw flc
			, fcl_ui_limit_type_vw fll
			WHERE a.lov_id = lov.id(+)
			AND a.service_type_id = st.id(+)
			AND a.cycle_type = flc.cycle_type(+)
			AND a.object_type = fll.limit_type(+)
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="lang">
					lov.lang(+) = #filters[].value#
					AND a.lang = #filters[].value#
					AND st.lang(+) = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="serviceTypeId">
					a.service_type_id = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="serviceEntityType">
					a.service_type_id IN (
					SELECT id FROM prd_ui_service_type_vw
					WHERE entity_type = #filters[].value#
					)
				</isEqual>
			</iterate>
			) a2
			<iterate prepend="START WITH" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="entityType">
					<isEmpty property="filters[].value">
						a2.entity_type IS NULL
					</isEmpty>
					<isNotEmpty property="filters[].value">
						a2.entity_type = #filters[].value#
					</isNotEmpty>
				</isEqual>
				<isEqual property="filters[].element" compareValue="dataType">a2.data_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">a2.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="defLevel">a2.definition_level = #filters[].value#</isEqual>
			</iterate>
			CONNECT BY PRIOR a2.parent_id = a2.id
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="lang">a2.lang = #filters[].value#</isEqual>
			</iterate>
			) attr
			START WITH attr.parent_id IS NULL
			CONNECT BY prior attr.id = attr.parent_id
			ORDER SIBLINGS BY attr.display_order, upper(attr.label)
		) qry
		WHERE 1 = 1
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">
				qry.id = #filters[].value#
			</isEqual>
		</iterate>
	</select>

	<select	id="get-attributes" parameterClass="qparams" resultMap="mapping-attribute" fetchSize="500">
		select a.id
		     , a.parent_id
		     , a.service_type_id
		     , a.attr_name
		     , a.data_type
		     , a.lov_id
		     , a.display_order
		     , a.entity_type
		     , a.object_type
		     , a.definition_level
		     , a.lang
		     , a.label
		     , a.description
		     , a.is_cyclic
		     , a.is_use_limit
		     , a.is_cyclic_limit
		     , a.is_visible
		     , a.is_need_length_type
		     , lov.name as lov_name
		     , st.label service_type_name
		     , flc.cycle_calc_start_date
		     , flc.cycle_calc_date_type
			 , flc.is_repeating
			 , fll.counter_algorithm
             , fll.limit_usage
		  from prd_ui_attribute_vw a
		     , com_ui_lov_vw lov
		     , prd_ui_service_type_vw st
		     , fcl_ui_cycle_type_vw flc
			 , fcl_ui_limit_type_vw fll
		 where a.lov_id          = lov.id(+)
		   and a.service_type_id = st.id(+)
		   and a.object_type     = flc.cycle_type(+)
		   and a.object_type     = fll.limit_type(+)
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">a.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
				lov.lang(+)    = #filters[].value#
				and a.lang     = #filters[].value#
				and st.lang(+) = #filters[].value#
			</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">
				<isEmpty property="filters[].value">
					a.entity_type is null
				</isEmpty>
				<isNotEmpty property="filters[].value">
					a.entity_type = #filters[].value#
				</isNotEmpty>
			</isEqual>
			<isEqual property="filters[].element" compareValue="serviceTypeId">a.service_type_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="serviceEntityType">
				a.service_type_id in (
					select id
					  from prd_ui_service_type_vw
					 where entity_type = #filters[].value#
				)
			</isEqual>
		</iterate>
		order by a.display_order
		       , upper(a.label)
	</select>

	<procedure id="add-attribute" parameterClass="ru.bpc.sv2.products.Attribute">
		{call prd_ui_attribute_pkg.add_attribute(
			  o_id						=> #id,jdbcType=NUMERIC,mode=OUT#
			, i_service_type_id			=> #serviceTypeId#
			, i_parent_id				=> #parentId#
			, i_attr_name				=> #name#
			, i_data_type				=> #dataType#
			, i_lov_id					=> #lovId#
			, i_display_order			=> #displayOrder#
			, i_lang					=> #lang#
			, i_short_description		=> #label#
			, i_description				=> #description#
			, i_entity_type				=> #entityType#
			, i_object_type				=> #objectType#
			, i_definition_level		=> #definitionLevel#
			, i_is_cycle				=> #cyclic#
			, i_is_use_limit			=> #useLimit#
			, i_is_limit_cyclic			=> #cyclicLimit#
			, i_is_visible				=> #visible#
			, i_is_service_fee			=> #serviceFee#
			, i_cycle_calc_start_date	=> #cycleCalcStartDate#
			, i_cycle_calc_date_type	=> #cycleCalcDateType#
			, i_posting_method			=> #postMethod#
			, i_counter_algorithm		=> #counterAlgorithm#
			, i_is_repeating			=> #repeating#
			, i_need_length_type		=> #lengthTypeMandatory#
			, i_module_code				=> #moduleCode#
            , i_limit_usage				=> #limitUsage#
		)}
	</procedure>

	<procedure id="edit-attribute" parameterClass="ru.bpc.sv2.products.Attribute">
		{call PRD_UI_ATTRIBUTE_PKG.modify_attribute(
			  i_id					=> #id#
			, i_service_type_id		=> #serviceTypeId#
			, i_parent_id			=> #parentId#
			, i_display_order		=> #displayOrder#
			, i_lang				=> #lang#
			, i_short_description	=> #label#
			, i_description			=> #description#
			, i_is_visible			=> #visible#
			, i_is_service_fee		=> #serviceFee#
			, i_is_repeating		=> #repeating#
			, i_counter_algorithm   => #counterAlgorithm#
		)}
	</procedure>
    
    <procedure id="delete-attribute"
    		parameterClass="long">
    	{call PRD_UI_ATTRIBUTE_PKG.delete_attribute(
				  i_id                => #id#
				)}
    </procedure>

	<resultMap	id="mapping-attr-scale"
				class="ru.bpc.sv2.products.AttrScale">
		<result property="id" column="id"/>
		<result property="attrId" column="attr_id"/>
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst_name"/>
		<result property="scaleId" column="scale_id"/>
		<result property="scaleName" column="scale_name"/>
		<result property="lang" column="lang"/>
		<result property="seqNum" column="seqnum"/>
	</resultMap>

	<select	id="get-attr-scales"
		    parameterClass="qparams"
		    resultMap="mapping-attr-scale" >
		<include refid="limitationOpen"/>
		SELECT 	  a.id
				, a.attr_id
				, a.inst_id
				, i.name as inst_name
				, a.scale_id
				, a.scale_name
				, a.lang
				, a.seqnum
		FROM prd_ui_attribute_scale_vw a, ost_ui_institution_sys_vw i
		WHERE a.inst_id = i.id
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">a.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
               	a.lang = #filters[].value# AND i.lang = #filters[].value#
			</isEqual>
			<isEqual property="filters[].element" compareValue="attrId">a.attr_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">a.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="scaleId">a.scale_id = #filters[].value#</isEqual>
		</iterate>
		<iterate prepend="ORDER BY" conjunction="," property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="id">a.id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="scaleName">upper(a.scale_name) $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="instName">upper(i.inst_name) $sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<isEmpty property="sorting" prepend="ORDER BY ">upper(a.scale_name) ASC</isEmpty>
		<include refid="limitationClose"/>
	</select>

	<select id="get-attr-scales-count"
		    parameterClass="qparams"
	    	resultClass="int" >
	    <include refid="limitationOpenCount"/>
		SELECT a.id 
		FROM  prd_ui_attribute_scale_vw a, ost_ui_institution_sys_vw i
		WHERE a.inst_id = i.id
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">a.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
               	a.lang = #filters[].value# AND i.lang = #filters[].value#
			</isEqual>
			<isEqual property="filters[].element" compareValue="attrId">a.attr_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">a.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="scaleId">a.scale_id = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

    <procedure id="add-attr-scale"
    		parameterClass="ru.bpc.sv2.products.AttrScale">
    	{call PRD_UI_ATTRIBUTE_PKG.add_attribute_scale(
    			  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
    			, i_attr_id				=> #attrId#
				, i_inst_id				=> #instId#
				, i_scale_id			=> #scaleId#
				, o_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=OUT#
    			)}
    </procedure>

    <procedure id="edit-attr-scale"
    		parameterClass="ru.bpc.sv2.products.AttrScale">
    	{call PRD_UI_ATTRIBUTE_PKG.modify_attribute_scale(
    			  i_id					=> #id#
				, i_scale_id			=> #scaleId#
				, io_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
    			)}
    </procedure>

    <procedure id="remove-attr-scale"
    		parameterClass="ru.bpc.sv2.products.AttrScale">
    	{call PRD_UI_ATTRIBUTE_PKG.remove_attribute_scale(
				  i_id					=> #id#
				, i_seqnum				=> #seqNum#
				)}
    </procedure>

	<resultMap	id="mapping-attr-group"
				class="ru.bpc.sv2.products.Attribute">
		<result property="id" column="id"/>
		<result property="parentId" column="parent_id"/>
		<result property="name" column="attr_name"/>
		<result property="displayOrder" column="display_order"/>
		<result property="lang" column="lang"/>
		<result property="label" column="label"/>
		<result property="description" column="description"/>
	</resultMap>

	<select	id="get-attr-groups"
	    	parameterClass="qparams"
	    	resultMap="mapping-attr-group">
        SELECT	  a.id
                , a.parent_id
                , a.attr_name
                , a.display_order
                , a.lang
                , lpad('-', (level-1) * 4, '-')||a.label as label
                , a.description
        FROM prd_ui_attribute_vw a
        WHERE a.entity_type = 'ENTTAGRP' 
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="lang">a.lang = #filters[].value#</isEqual>
	        	<isEqual property="filters[].element" compareValue="serviceTypeId">a.service_type_id = #filters[].value#</isEqual>
	        	<isEqual property="filters[].element" compareValue="serviceEntityType">
					a.service_type_id IN (
						SELECT id FROM prd_ui_service_type_vw
						WHERE entity_type = #filters[].value#
					)
				</isEqual>
			</iterate>
		CONNECT BY PRIOR a.id = a.parent_id AND PRIOR a.lang = a.lang
		START WITH a.parent_id IS NULL
		ORDER SIBLINGS BY a.display_order, a.label
	</select>

	<resultMap	id="mapping-service-types"
				class="ru.bpc.sv2.products.ServiceType">
		<result property="id" column="id"/>
		<result property="seqNum" column="seqnum"/>
		<result property="productEntityType" column="product_type"/>
		<result property="entityType" column="entity_type"/>
		<result property="isInitial" column="is_initial"/>
		<result property="label" column="label"/>
		<result property="description" column="description"/>
		<result property="lang" column="lang"/>
		<result property="enableEventType" column="enable_event_type"/>
		<result property="disableEventType" column="disable_event_type"/>
		<result property="externalCode" column="external_code"/>
	</resultMap>

	<select	id="get-service-types"
		    parameterClass="qparams"
		    resultMap="mapping-service-types">
		<include refid="paginatedOpen"/>
			SELECT 	  id
					, seqnum
					, product_type
					, entity_type
					, is_initial
					, enable_event_type
					, disable_event_type
					, label
					, description
					, lang
					, external_code
			FROM prd_ui_service_type_vw
			<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="label">upper(label) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productType">product_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="isMultiple">is_multiple = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="isInitial">is_initial = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="enableEventType">enable_event_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="disableEventType">disable_event_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="description">upper(description) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="externalCode">upper(external_code) LIKE #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="label">upper(label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="entityType">entity_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="productType">product_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="enableEventType">enable_event_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="disableEventType">disable_event_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="externalCode">external_code $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting">ORDER BY upper(label) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-service-types-count"
		    parameterClass="qparams"
	    	resultClass="int" >
	    <include refid="limitationOpenCount"/>
		SELECT id 
		FROM  prd_ui_service_type_vw
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="label">upper(label) LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="productType">product_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="isInitial">is_initial = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="enableEventType">enable_event_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="disableEventType">disable_event_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="description">upper(description) LIKE #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

    <procedure id="add-service-type"
    		parameterClass="ru.bpc.sv2.products.ServiceType">
    	{call PRD_UI_SERVICE_TYPE_PKG.add_service_type(
    			  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_product_type		=> #productEntityType#
				, i_entity_type			=> #entityType#
				, i_enable_event_type	=> #enableEventType#
				, i_disable_event_type	=> #disableEventType#
				, i_lang				=> #lang#
				, i_label				=> #label#
				, i_description			=> #description#
				, i_is_initial			=> #isInitial#
				, i_external_code		=> #externalCode#
		    	)}
    </procedure>

    <procedure id="edit-service-type"
    		parameterClass="ru.bpc.sv2.products.ServiceType">
    	{call PRD_UI_SERVICE_TYPE_PKG.modify_service_type(
    			  i_id					=> #id#
				, io_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
				, i_product_type		=> #productEntityType#
				, i_entity_type			=> #entityType#
				, i_enable_event_type	=> #enableEventType#
				, i_disable_event_type	=> #disableEventType#
				, i_lang				=> #lang#
				, i_label				=> #label#
				, i_description			=> #description#
				, i_is_initial			=> #isInitial#
				, i_external_code		=> #externalCode#
    			)}
    </procedure>

    <procedure id="remove-service-type"
    		parameterClass="ru.bpc.sv2.products.ServiceType">
    	{call PRD_UI_SERVICE_TYPE_PKG.remove_service_type(
				  i_id					=> #id#
				, i_seqnum				=> #seqNum#
				)}
    </procedure>

	<resultMap	id="mapping-services"
				class="ru.bpc.sv2.products.Service">
		<result property="id" column="id"/>
		<result property="seqNum" column="seqnum"/>
		<result property="serviceTypeId" column="service_type_id"/>
		<result property="templateApplId" column="template_appl_id"/>
		<result property="instId" column="inst_id"/>
		<result property="label" column="label"/>
		<result property="description" column="description"/>
		<result property="lang" column="lang"/>
		<result property="serviceTypeName" column="service_type_name"/>
		<result property="instName" column="inst_name"/>
		<result property="status" column="status"/>
		<result property="productType" column="product_type"/>
		<result property="isInitiating" column="is_initial"/>
        <result property="serviceNumber" column="service_number"/>
	</resultMap>

	<select	id="get-services"
		    parameterClass="qparams"
		    resultMap="mapping-services">
		<include refid="paginatedOpen"/>
			SELECT 	  s.id
					, s.seqnum
					, s.service_type_id
					, s.template_appl_id
					, s.inst_id
					, s.label
					, s.description
					, s.lang
					, s.status
					, st.label as service_type_name
					, i.name as inst_name
					, st.product_type
					, st.is_initial
                    , s.service_number
			FROM prd_ui_service_vw s, prd_ui_service_type_vw st, ost_ui_institution_vw i
			WHERE s.service_type_id = st.id
					AND s.lang = st.lang
					AND s.inst_id = i.id(+)
					AND s.lang = i.lang(+)
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">s.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">s.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="label">upper(s.label) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceTypeId">s.service_type_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">s.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="description">upper(s.description) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="status">s.status = #filters[].value#</isEqual>
                <isEqual property="filters[].element" compareValue="serviceNumber">s.service_number = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="isInitial">st.is_initial = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productType">
					s.service_type_id IN (
						SELECT id 
						FROM prd_ui_service_type_vw
						WHERE product_type = #filters[].value#
						AND lang = com_ui_user_env_pkg.get_user_lang
					)
				</isEqual>
				<isEqual property="filters[].element" compareValue="productId">
					exists(select 1 from prd_product_service p where p.service_id=s.id and p.product_id=#filters[].value#)
				</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">s.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="label">upper(s.label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="type">service_type_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="status">s.status $sorting[].direction$</isEqual>
                    <isEqual property="sorting[].property" compareValue="serviceNumber">s.service_number $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting">ORDER BY upper(s.label) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-services-count"
		    parameterClass="qparams"
	    	resultClass="int" >
	    <include refid="limitationOpenCount"/>
		SELECT * 
		FROM  prd_ui_service_vw s, prd_ui_service_type_vw st
		WHERE s.service_type_id = st.id AND s.lang = st.lang
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">s.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">s.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="label">upper(s.label) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceTypeId">s.service_type_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">s.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="description">upper(s.description) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="status">s.status = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="isInitial">st.is_initial = #filters[].value#</isEqual>
                <isEqual property="filters[].element" compareValue="serviceNumber">s.service_number = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productType">
					s.service_type_id IN (
						SELECT id 
						FROM prd_ui_service_type_vw
						WHERE product_type = #filters[].value#
						AND lang = com_ui_user_env_pkg.get_user_lang
					)
				</isEqual>
			</iterate>
		<include refid="limitationClose"/>
	</select>

    <procedure id="add-service"
    		parameterClass="ru.bpc.sv2.products.Service">
    	{call PRD_UI_SERVICE_PKG.add_service(
    			  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_service_type_id		=> #serviceTypeId#
				, i_template_appl_id	=> #templateApplId#
				, i_inst_id				=> #instId#
				, i_status				=> #status#
				, i_lang				=> #lang#
				, i_label				=> #label#
				, i_description			=> #description#
                , i_service_number      => #serviceNumber#
    			)}
    </procedure>

    <procedure id="edit-service"
    		parameterClass="ru.bpc.sv2.products.Service">
    	{call PRD_UI_SERVICE_PKG.modify_service(
    			  i_id					=> #id#
				, io_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
				, i_service_type_id		=> #serviceTypeId#
				, i_template_appl_id	=> #templateApplId#
				, i_status				=> #status#
				, i_lang				=> #lang#
				, i_label				=> #label#
				, i_description			=> #description#
                , i_service_number      => #serviceNumber#
    			)}
    </procedure>

    <procedure id="remove-service"
    		parameterClass="ru.bpc.sv2.products.Service">
    	{call PRD_UI_SERVICE_PKG.remove_service(
				  i_id					=> #id#
				, i_seqnum				=> #seqNum#
				)}
    </procedure>

	<resultMap	id="mapping-product-services"
				class="ru.bpc.sv2.products.ProductService">
		<result property="id" column="id"/>
		<result property="seqNum" column="seqnum"/>
		<result property="serviceId" column="service_id"/>
		<result property="productId" column="product_id"/>
		<result property="conditionalGroup" column="conditional_group"/>
		<result property="minCount" column="min_count"/>
		<result property="maxCount" column="max_count"/>
		<result property="parentId" column="parent_id"/>
		<result property="productName" column="product_name"/>
		<result property="serviceName" column="service_name"/>
		<result property="serviceStatus" column="service_status"/>
		<result property="entityType" column="entity_type"/>
		<result property="avalCount" column="max_count"/>
        <result property="serviceNumber" column="service_number"/>
	</resultMap>

	<select	id="get-product-services"
		    parameterClass="qparams"
		    resultMap="mapping-product-services">
		<include refid="limitationOpen"/>
		SELECT
				  ps.id
				, ps.seqnum
				, ps.service_id
				, ps.product_id
				, ps.conditional_group
				, ps.min_count
				, ps.max_count
				, ps.parent_id
				, p.label as product_name
				, s.label as service_name
				, s.status as service_status
				, st.entity_type
                , s.service_number as service_number
		FROM prd_ui_product_service_vw ps
			, prd_ui_product_vw p
			, prd_ui_service_vw s
			, prd_ui_service_type_vw st
		WHERE ps.service_id = s.id
				AND ps.product_id = p.id(+)
				AND s.service_type_id = st.id
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">ps.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="serviceId">ps.service_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="productId">ps.product_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="parentId">ps.parent_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="parentIsNull">ps.parent_id IS NULL</isEqual>
			<isEqual property="filters[].element" compareValue="isInitial">st.is_initial = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">st.entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="maxCount">ps.max_count $filters[].condition$ #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
				s.lang(+) = #filters[].value# 
				AND p.lang(+) = #filters[].value#
				AND st.lang(+) = #filters[].value#
			</isEqual>
		</iterate>
		<iterate prepend="ORDER BY" conjunction="," property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="serviceName">upper(service_name) $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="productName">upper(product_name) $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="minCount">minCount $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="maxCount">maxCount $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="serviceStatus">service_status $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="serviceNumber">service_number $sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<isEmpty property="sorting">ORDER BY upper(service_name) ASC, upper(product_name) ASC</isEmpty>
		<include refid="limitationClose"/>
	</select>

	<select id="get-product-services-count"
		    parameterClass="qparams"
	    	resultClass="int" >
	    <include refid="limitationOpenCount"/>
		SELECT *
		FROM prd_ui_product_service_vw ps
			, prd_ui_service_vw s
			, prd_ui_service_type_vw st
		WHERE ps.service_id = s.id
				AND s.service_type_id = st.id
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">ps.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="serviceId">ps.service_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="productId">ps.product_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="parentId">ps.parent_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="parentIsNull">ps.parent_id IS NULL</isEqual>
			<isEqual property="filters[].element" compareValue="isInitial">st.is_initial = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">st.entity_type = #filters[].value#</isEqual>
            <isEqual property="sorting[].property" compareValue="serviceNumber">service_number $sorting[].direction$</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
				s.lang(+) = #filters[].value# 
				AND st.lang(+) = #filters[].value#
			</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>
	
	<resultMap	id="mapping-product-services-hier"
				class="ru.bpc.sv2.products.ProductService"
				extends="mapping-product-services">
		<result property="productParentId" column="product_parent_id"/>
		<result property="level" column="level"/>
		<result property="isLeaf" column="is_leaf"/>
		<result property="productNumber" column="product_number" />
	</resultMap>

	<select	id="get-product-services-hier" parameterClass="qparams" resultMap="mapping-product-services-hier">
		select ps.id
			 , ps.seqnum
			 , ps.service_id
			 , ps.product_id
			 , ps.conditional_group
			 , ps.min_count
			 , ps.max_count
			 , ps.parent_id
			 , p.label as product_name
			 , p.parent_id as product_parent_id
			 , s.label as service_name
			 , s.status as service_status
			 , st.entity_type
			 , level
			 , connect_by_isleaf as is_leaf
			 , s.service_number as service_number
			 , p.product_number
		  from prd_ui_product_service_vw ps
			 , prd_ui_product_vw p
			 , prd_ui_service_vw s
			 , prd_ui_service_type_vw st
		 where ps.service_id = s.id
		   and ps.product_id = p.id(+)
		   and s.service_type_id = st.id
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="lang">
					s.lang(+) = #filters[].value# 
					AND p.lang(+) = #filters[].value#
					AND st.lang(+) = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="productId">ps.product_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceId">ps.service_id = #filters[].value#</isEqual>
			</iterate>
		start with ps.parent_id is null
        <iterate prepend="AND" conjunction="AND" property="filters">
            <isEqual property="filters[].element" compareValue="lang">
                s.lang = #filters[].value#
                AND p.lang = #filters[].value#
                AND st.lang = #filters[].value#
            </isEqual>
        </iterate>
		connect by prior ps.id = ps.parent_id
        <iterate prepend="AND" conjunction="AND" property="filters">
            <isEqual property="filters[].element" compareValue="lang">
                s.lang = #filters[].value#
                AND p.lang = #filters[].value#
                AND st.lang = #filters[].value#
            </isEqual>
        </iterate>
		<iterate prepend="ORDER SIBLINGS BY" conjunction="," property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="serviceName">upper(service_name) $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="productName">upper(product_name) $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="minCount">minCount $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="maxCount">maxCount $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="serviceStatus">service_status $sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<isEmpty property="sorting">ORDER SIBLINGS BY upper(service_name) ASC, upper(product_name) ASC</isEmpty>
	</select>

	<resultMap	id="mapping-service-products-hier" class="ru.bpc.sv2.products.ProductService">
		<result property="level" column="level"/>
		<result property="productParentId" column="product_parent_id"/>
		<result property="id" column="id"/>
		<result property="productNumber" column="product_number" />
		<result property="productName" column="product_name"/>
		<result property="minCount" column="min_count"/>
		<result property="maxCount" column="max_count"/>
	</resultMap>

	<select	id="get-service-products-hier"
		    parameterClass="qparams"
		    resultMap="mapping-service-products-hier">
		select level
			 , p.parent_id       as product_parent_id
			 , ps.id
			 , p.product_number
			 , get_text(
				   i_table_name  => 'prd_product'
				 , i_column_name => 'label'
				 , i_object_id   => p.id
			   ) as product_name
			 , ps.min_count
			 , ps.max_count
		  from prd_product_service ps
			 , prd_product         p
			 , prd_service         s
		 where ps.service_id = s.id
		   and ps.product_id = p.id
		   and s.inst_id in (select inst_id from acm_cu_inst_vw)
		 start with ps.parent_id is null
		 <iterate prepend="AND" conjunction="AND" property="filters">
			 <isEqual property="filters[].element" compareValue="serviceId">ps.service_id = #filters[].value#</isEqual>
		 </iterate>
	   connect by prior ps.product_id = p.parent_id
		 <iterate prepend="AND" conjunction="AND" property="filters">
			 <isEqual property="filters[].element" compareValue="serviceId">ps.service_id = #filters[].value#</isEqual>
		</iterate>
		 order siblings by upper(product_name) asc
	</select>

	<resultMap	id="mapping-contract-services"
				class="ru.bpc.sv2.products.ProductService">
		<result property="serviceId" column="service_id"/>
		<result property="minCount" column="min_count"/>
		<result property="maxCount" column="max_count"/>
		<result property="avalCount" column="aval_count"/>
		<result property="entityType" column="entity_type"/>
		<result property="serviceName" column="service_label"/>
	</resultMap>
	
	<select	id="get-contract-services"
		    parameterClass="qparams"
		    resultMap="mapping-contract-services">
		SELECT 	  cs.service_id
				, cs.min_count
				, cs.max_count
				, cs.aval_count
				, cs.is_initial
				, cs.entity_type
				, cs.service_label
		FROM 
			prd_ui_contract_service_vw cs
		WHERE
			cs.aval_count > 0 		
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="serviceId">cs.service_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="contractNumber">cs.contract_number = upper(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="isInitial">cs.is_initial = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">cs.entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
				cs.lang(+) = #filters[].value#
			</isEqual>
		</iterate>
	</select>

	<procedure id="add-product-service" parameterClass="ru.bpc.sv2.products.ProductService">
		{call prd_ui_product_pkg.add_product_service(
			  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
			, o_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=OUT#
			, i_parent_id			=> #parentId#
			, i_conditional_group	=> #conditionalGroup#
			, i_service_id			=> #serviceId#
			, i_product_id			=> #productId#
			, i_min_count			=> #minCount#
			, i_max_count			=> #maxCount#
		)}
	</procedure>

	<procedure id="edit-product-service" parameterClass="ru.bpc.sv2.products.ProductService">
		{call prd_ui_product_pkg.modify_product_service(
			  i_id					=> #id#
			, io_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
			, i_product_id			=> #productId#
			, i_conditional_group	=> #conditionalGroup#
			, i_min_count			=> #minCount#
			, i_max_count			=> #maxCount#
		)}
	</procedure>

    <procedure id="remove-product-service"
    		parameterClass="ru.bpc.sv2.products.ProductService">
    	{call PRD_UI_PRODUCT_PKG.remove_product_service(
				  i_id         => #id#
				, i_seqnum     => #seqNum#
				, i_product_id => #productId#
				)}
    </procedure>

	<resultMap id="mapping-common-customer" class="ru.bpc.sv2.products.Customer">
        <result property="id" column="id" />
        <result property="seqNum" column="seqnum" />
        <result property="entityType" column="entity_type" />
        <result property="objectId" column="object_id" />
        <result property="customerNumber" column="customer_number" />
        <result property="instId" column="inst_id" />
        <result property="splitHash" column="split_hash" />
        <result property="instName" column="inst_name" />
		<result property="productId" column="product_id"/>
		<result property="contractId" column="contract_id"/>
		<result property="contractNumber" column="contract_number"/>
		<result property="category" column="category"/>
		<result property="relation" column="relation"/>
		<result property="status" column="status"/>
		<result property="resident" column="resident"/>
		<result property="nationality" column="nationality"/>
		<result property="creditRating" column="credit_rating"/>
		<result property="moneyLaundryRisk" column="money_laundry_risk"/>
		<result property="moneyLaundryReason" column="money_laundry_reason"/>
		<result property="lastModifyDate" column="last_modify_date"/>
		<result property="lastModifyUser" column="last_modify_user"/>
		<result property="extEntityType" column="ext_entity_type"/>
		<result property="extObjectId" column="ext_object_id"/>
		<result property="extObjectName" column="ext_object_desc"/>
		<result property="employmentStatus" column="employment_status"/>
		<result property="employmentPeriod" column="employment_period"/>
		<result property="residenceType" column="residence_type"/>
		<result property="maritalStatus" column="marital_status"/>
		<result property="maritalStatusDate" column="marital_status_date"/>
		<result property="incomeRange" column="income_range"/>
		<result property="numberOfChildren" column="number_of_children"/>
		<result property="referralCode" column="referral_code"/>
    </resultMap>
    
	<resultMap id="mapping-customer" extends="mapping-common-customer"
			class="ru.bpc.sv2.products.Customer">
        <result property="person" resultMap="products.mapping-person"/>
        <result property="company" resultMap="products.mapping-company"/>
        <result property="productType" column="product_type"/>
	</resultMap>

	<resultMap id="mapping-person-customer" extends="mapping-common-customer"
			class="ru.bpc.sv2.products.Customer">
        <result property="person" resultMap="products.mapping-person"/>
        <result property="document" resultMap="products.mapping-document"/>
	</resultMap>
	
	<resultMap id="mapping-company-customer" extends="mapping-common-customer"
			class="ru.bpc.sv2.products.Customer">
        <result property="company" resultMap="products.mapping-company"/>
        <result property="document" resultMap="products.mapping-document"/>
	</resultMap>
	
	<resultMap id="mapping-customer-info" extends="mapping-customer"
			class="ru.bpc.sv2.products.Customer">
		<result property="document" resultMap="products.mapping-document"/>
        <result property="contractsCount" column="contract_count"/>
        <result property="cardsCount" column="card_count"/>
        <result property="accountsCount" column="account_count"/>
        <result property="documentsCount" column="document_count"/>
        <result property="servicesCount" column="service_count"/>
        <result property="limitsCount" column="limit_count"/>
        <result property="cyclesCount" column="cycle_count"/>
        <result property="paymentOrdersCount" column="payment_order_count"/>
        <result property="issProductCount" column="iss_product"/>
        <result property="acqProductCount" column="acq_product"/>
        <result property="salaryContractCount" column="salary_contract"/>
	</resultMap>
	
	<resultMap id="mapping-customer-info-count" 
				class="ru.bpc.sv2.products.Customer"
				extends="mapping-common-customer">
		<result property="contractsCount" column="contract_count"/>
        <result property="cardsCount" column="card_count"/>
        <result property="accountsCount" column="account_count"/>
        <result property="documentsCount" column="document_count"/>
        <result property="servicesCount" column="service_count"/>
        <result property="limitsCount" column="limit_count"/>
        <result property="cyclesCount" column="cycle_count"/>
        <result property="paymentOrdersCount" column="payment_order_count"/>
        <result property="issProductCount" column="iss_product"/>
        <result property="acqProductCount" column="acq_product"/>
        <result property="salaryContractCount" column="salary_contract"/>
        <result property="merchantsCount" column="count_merchant"/>
        <result property="terminalsCount" column="count_terminal"/>
	</resultMap>
	
	<resultMap id="mapping-customer-company-info" extends="mapping-customer-info-count"
			class="ru.bpc.sv2.products.Customer">
		<result property="company" resultMap="products.mapping-company"/>
        <result property="agentId" column="agent_id"/>
        <result property="agentName" column="agent_name"/>
        <result property="agentNumber" column="agent_number"/>
	</resultMap>
	
	<resultMap id="mapping-customer-person-info" extends="mapping-customer-info-count"
			class="ru.bpc.sv2.products.Customer">
		<result property="person" resultMap="products.mapping-person"/>
		<result property="contract" resultMap="products.mapping-cust-contract"/>
        <result property="agentId" column="agent_id"/>
        <result property="agentNumber" column="agent_number"/>
        <result property="agentName" column="agent_name"/>

	</resultMap>
	
	<resultMap	id="mapping-cust-contract"
				class="ru.bpc.sv2.products.Contract">
		<result property="agentId" column="agent_id"/>
	</resultMap>
	
    <resultMap id="mapping-company" class="ru.bpc.sv2.common.Company">
		<result property="id" column="comp_id"/>
		<result property="embossedName" column="comp_embossed_name"/>
		<result property="seqNum" column="comp_seqnum"/>
		<result property="lang" column="comp_lang"/>
		<result property="label" column="comp_label"/>
		<result property="description" column="comp_description"/>
		<result property="incorp_form" column="comp_incorp_form"/>		
	</resultMap>

	<resultMap id="mapping-person" class="ru.bpc.sv2.common.Person">
		<result property="personId" column="pers_id"/>
		<result property="lang" column="pers_lang"/>
		<result property="title" column="pers_title"/>
		<result property="firstName" column="pers_first_name"/>
		<result property="secondName" column="pers_second_name"/>
		<result property="surname" column="pers_surname"/>
		<result property="suffix" column="pers_suffix"/>
		<result property="gender" column="pers_gender"/>
		<result property="birthday" column="pers_birthday"/>
		<result property="placeOfBirth" column="pers_place_of_birth"/>
		<result property="seqNum" column="pers_seqnum"/>
	</resultMap>
	
	<resultMap id="mapping-document" class="ru.bpc.sv2.common.PersonId">
		<result property="id" column="doc_id"/>
		<result property="idSeries" column="id_series"/>
		<result property="idNumber" column="id_number"/>
		<result property="idType" column="id_type"/>		
	</resultMap>
	
	
	<resultMap id="mapping-customer-info-proc"
			class="ru.bpc.sv2.products.Customer">
		<result property="id" column="id" />
        <result property="customerNumber" column="customer_number" />
        <result property="contractNumber" column="contract_number"/>
        <result property="entityType" column="entity_type" />
        <result property="objectId" column="object_id" />
		<result property="customerName" column="customer_name"/>
		<result property="documentString" column="customer_document"/>
		<result property="status" column="status"/>
		<result property="extEntityType" column="ext_entity_type"/>
		<result property="extObjectId" column="ext_object_id"/>
		<result property="extObjectName" column="ext_entity_desc"/>
		<result property="agentName" column="agent_name"/>
		<result property="agentNumber" column="agent_number"/>
        <result property="maxAgingPeriod" column="max_aging_period"/>
	</resultMap>
	
	<parameterMap class="java.util.Map" 
		id="mapping-combined-customers-proc">
		<parameter property="customers" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT" resultMap="mapping-customer-info-proc"/>
        <parameter property="rowCount" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="firstRow" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="lastRow" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="tabName" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="params" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
		<parameter property="sorters" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
	</parameterMap>
	
	<parameterMap class="java.util.Map" 
		id="mapping-combined-customers-count-proc">
		<parameter property="count" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="tabName" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="params" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
	</parameterMap>
	
	<procedure id="get-combined-customers-proc"
		parameterMap="mapping-combined-customers-proc">
		{call PRD_UI_CUSTOMER_SEARCH_PKG.get_ref_cur(
			  o_ref_cur     	=> ?
            , i_row_count   	=> ?
			, i_first_row   	=> ?
			, i_last_row    	=> ?
			, i_tab_name    	=> ?
			, i_param_tab   	=> ?
			, i_sorting_tab     => ?
			)}		
	</procedure>
	
	<procedure id="get-combined-customers-count-proc"
		parameterMap="mapping-combined-customers-count-proc">
		{call PRD_UI_CUSTOMER_SEARCH_PKG.get_row_count(
			  o_row_count   	=> ?
			, i_tab_name    	=> ?
			, i_param_tab   	=> ?
			)}		
	</procedure>
	
	<sql id="customers-fields">
				cu.id
                , cu.customer_number
                , cu.inst_id
                , cu.seqnum
                , cu.split_hash
                , cu.entity_type
                , cu.object_id
                , cu.contract_id
                , cu.status
                , cu.card_count
				, cu.contract_count
				, cu.account_count
				, cu.service_count
				, cu.document_count
				, cu.limit_count
				, cu.cycle_count
				, cu.payment_order_count
				, cu.iss_product
				, cu.acq_product
				, cu.salary_contract
                , cu.category
                , cu.relation
                , cu.resident
                , cu.nationality
                , cu.credit_rating
                , cu.money_laundry_risk
                , cu.money_laundry_reason
                , cu.last_modify_date
                , cu.last_modify_user
				, cu.contract_number
				, cu.product_id
				, cu.product_type
                , cu.inst_name
                , cu.pers_id
                , cu.pers_lang
                , cu.pers_first_name
                , cu.pers_second_name
                , cu.pers_surname
                , cu.pers_title
                , cu.pers_suffix
                , cu.pers_gender
                , cu.pers_birthday
                , cu.pers_seqnum
                , cu.pers_place_of_birth
                , cu.doc_id		
                , cu.id_type		
                , cu.id_series	
                , cu.id_number
				, cu.comp_id
				, cu.comp_embossed_name
				, cu.comp_seqnum
				, cu.comp_lang
				, cu.comp_label
				, cu.comp_description
				, null as comp_incorp_form
				, cu.ext_entity_type
				, cu.ext_object_id
				, cu.ext_object_desc
				, cu.employment_status
				, cu.employment_period
				, cu.residence_type
				, cu.marital_status
				, cu.marital_status_date
				, cu.income_range
				, cu.number_of_children
				, cu.referral_code
	</sql>

	<select id="get-combined-customers"
			parameterClass="qparams"
			resultMap="mapping-customer-info" fetchSize="500">
		<include refid="paginatedOpen"/>
            SELECT 
				<include refid="customers-fields"/>
            FROM
                prd_ui_customers_vw cu
            WHERE 
                cu.inst_lang = #lang#
	            AND nvl(cu.comp_lang, #lang#) = #lang#
	            AND nvl(cu.pers_lang, #lang#) = #lang#            
	            <iterate prepend="AND" conjunction="AND" property="filters">
		        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
					<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
					<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
					<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="extEntityType">cu.ext_entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="extObjectId">cu.ext_object_id = #filters[].value#</isEqual>
					
					<isEqual property="filters[].element" compareValue="personBirthday">cu.pers_birthday = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="personGender">cu.pers_gender = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="personFirstName">upper(cu.pers_first_name) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="personSurname">upper(cu.pers_surname) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="personSecondName">upper(cu.pers_second_name) like #filters[].value#</isEqual>
					
					<isEqual property="filters[].element" compareValue="companyName">upper(cu.comp_label) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="embossedName">upper(cu.comp_embossed_name) like #filters[].value#</isEqual>
					
					<isEqual property="filters[].element" compareValue="idType">cu.id_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="idSeries">upper(cu.id_series) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="idNumber">upper(cu.id_number) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="productType">
						cu.id IN (
		                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
		                        SELECT id FROM prd_ui_product_vw
		                        WHERE lang = #lang# 
						        AND product_type = #filters[].value#
		                    )
		                )
                	</isEqual>
		        </iterate>
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="CUSTOMER_NUMBER">customer_number $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>                
	            	<isEqual property="sorting[].property" compareValue="ENTITY_TYPE">entity_type $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="EXT_ENTITY_TYPE">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
	        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	
	
	<select id="get-combined-customers-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT 
			cu.id
		FROM
        	prd_ui_customers_vw cu
        WHERE 
        	cu.inst_lang = #lang#
            AND nvl(cu.comp_lang, #lang#) = #lang#
            AND nvl(cu.pers_lang, #lang#) = #lang#            
            <iterate prepend="AND" conjunction="AND" property="filters">
		        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
					<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
					<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
					<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="extEntityType">cu.ext_entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="extObjectId">cu.ext_object_id = #filters[].value#</isEqual>
					
					<isEqual property="filters[].element" compareValue="personBirthday">cu.pers_birthday = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="personGender">cu.pers_gender = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="personFirstName">upper(cu.pers_first_name) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="personSurname">upper(cu.pers_surname) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="personSecondName">upper(cu.pers_second_name) like #filters[].value#</isEqual>
					
					<isEqual property="filters[].element" compareValue="companyName">upper(cu.comp_label) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="embossedName">upper(cu.comp_embossed_name) like #filters[].value#</isEqual>
					
					<isEqual property="filters[].element" compareValue="idType">cu.id_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="idSeries">upper(cu.id_series) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="idNumber">upper(cu.id_number) like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="productType">
						cu.id IN (
		                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
		                        SELECT id FROM prd_ui_product_vw
		                        WHERE lang = #lang# 
						        AND product_type = #filters[].value#
		                    )
		                )
                	</isEqual>
		        </iterate>
		<include refid="limitationClose"/>
	</select>
	
	<select id="get-company-customers"
			parameterClass="qparams"
			resultMap="mapping-customer-company-info" fetchSize="500">
		<include refid="paginatedOpen"/>
            SELECT 
				cu.id
                , cu.customer_number
                , cu.inst_id
                , cu.seqnum
                , cu.split_hash
                , cu.entity_type
                , cu.object_id
                , cu.contract_id
                , cu.card_count
                , cu.contract_count
                , cu.account_count
                , cu.service_count
                , cu.document_count
                , cu.limit_count
                , cu.cycle_count
                , cu.payment_order_count
                , cu.iss_product
                , cu.acq_product
                , cu.status
                , null salary_contract
                , cu.category
                , cu.relation
                , cu.resident
                , cu.nationality
                , cu.credit_rating
                , cu.money_laundry_risk
                , cu.money_laundry_reason
                , cu.last_modify_date
                , cu.last_modify_user
                , null contract_number
                , c.product_id
                , null product_type
                , cu.company_id comp_id
				, cu.embossed_name comp_embossed_name
				, cu.lang comp_lang
				, cu.company_label comp_label
				, cu.company_description comp_description
				, cu.incorp_form comp_incorp_form
				, null comp_seqnum
                , i.name inst_name
                , ext_entity_type
                , ext_object_id
                , ext_object_desc
                , cu.count_merchant
                , cu.count_terminal
                , c.agent_id
                , a.name agent_name
                , a.agent_number
				, cu.employment_status
				, cu.employment_period
				, cu.residence_type
				, cu.marital_status
				, cu.marital_status_date
				, cu.income_range
				, cu.number_of_children
                , null as referral_code
            FROM
                prd_ui_customer_company_vw cu, 
                prd_ui_contract_vw c,
                ost_ui_agent_vw a,
                ost_ui_institution_vw i
            WHERE
            	cu.inst_id = i.id 
            	AND cu.contract_id = c.id
                AND c.agent_id = a.id
                AND a.lang = #lang#
                AND i.lang = #lang#
                <iterate prepend="AND" conjunction="AND" property="filters">
		        	<isEqual property="filters[].element" compareValue="id">cu.id = #filters[].value#</isEqual>					
		        </iterate>	        
	        <isEmpty property="sorting">ORDER BY decode(cu.lang, #lang#, 1, 'LANGENG', 2, 3) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	
	
	<select id="get-person-customers"
			parameterClass="qparams"
			resultMap="mapping-customer-person-info" fetchSize="500">
		<include refid="paginatedOpen"/>
            SELECT 
				cu.id
                , cu.customer_number
                , cu.inst_id
                , cu.seqnum
                , cu.split_hash
                , cu.entity_type
                , cu.object_id
                , cu.contract_id
                , cu.card_count
                , cu.contract_count
                , cu.account_count
                , cu.service_count
                , cu.document_count
                , cu.limit_count
                , cu.cycle_count
                , cu.payment_order_count
                , cu.iss_product
                , cu.acq_product
                , null salary_contract
                , cu.category
                , cu.relation
                , cu.status
                , cu.resident
                , cu.nationality
                , cu.credit_rating
                , cu.money_laundry_risk
                , cu.money_laundry_reason
                , cu.last_modify_date
                , cu.last_modify_user
                , null contract_number
                , c.product_id
                , null product_type
                , cu.object_id pers_id
                , cu.lang pers_lang
                , cu.first_name pers_first_name
                , cu.second_name pers_second_name
                , cu.surname pers_surname
                , cu.title pers_title
                , cu.suffix pers_suffix
                , cu.gender pers_gender
                , cu.birthday pers_birthday
                , null pers_seqnum
                , cu.place_of_birth pers_place_of_birth
                , i.name inst_name
                , ext_entity_type
                , ext_object_id
                , ext_object_desc
                , null as count_merchant
                , null as count_terminal
                , c.agent_id
                , a.name agent_name
                , a.agent_number
				, cu.employment_status
				, cu.employment_period
				, cu.residence_type
				, cu.marital_status
				, cu.marital_status_date
				, cu.income_range
				, cu.number_of_children
		        , cu.referral_code
            FROM
                prd_ui_customer_person_vw cu,
                prd_ui_contract_vw c,
                ost_ui_agent_vw a,
                ost_ui_institution_vw i
            WHERE
            	cu.inst_id = i.id 
            	AND cu.contract_id = c.id
                AND c.agent_id = a.id
                AND a.lang = #lang#
                AND i.lang = #lang#                
                <iterate prepend="AND" conjunction="AND" property="filters">
		        	<isEqual property="filters[].element" compareValue="id">cu.id = #filters[].value#</isEqual>					
		        </iterate>	        
	        <isEmpty property="sorting">ORDER BY decode(cu.lang, #lang#, 1, 'LANGENG', 2, 3) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>
	
	<select id="get-undefined-customers"
			parameterClass="qparams"
			resultMap="mapping-customer-info-count" fetchSize="500">
		<include refid="paginatedOpen"/>
            SELECT 
				cu.id
                , cu.customer_number
                , cu.inst_id
                , cu.seqnum
                , cu.split_hash
                , cu.entity_type
                , cu.object_id
                , cu.contract_id
                , cu.card_count
                , cu.contract_count
                , cu.account_count
                , cu.service_count
                , cu.document_count
                , cu.limit_count
                , cu.cycle_count
                , cu.payment_order_count
                , cu.iss_product
                , cu.acq_product
                , null salary_contract
                , cu.category
                , cu.relation
                , cu.status
                , cu.resident
                , cu.nationality
                , cu.credit_rating
                , cu.money_laundry_risk
                , cu.money_laundry_reason
                , cu.last_modify_date
                , cu.last_modify_user
                , null contract_number
                , c.product_id
                , null product_type
                , i.name inst_name
                , ext_entity_type
                , ext_object_id
                , ext_object_desc
                , null as count_merchant
                , null as count_terminal
				, cu.employment_status
				, cu.employment_period
				, cu.residence_type
				, cu.marital_status
				, cu.marital_status_date
				, cu.income_range
				, cu.number_of_children
		        , null as referral_code
           FROM
                prd_ui_customer_undef_vw cu, 
                prd_ui_contract_vw c, 
                ost_ui_institution_vw i
            WHERE
            	cu.inst_id = i.id 
            	AND cu.contract_id = c.id 
                AND i.lang = #lang#                
                <iterate prepend="AND" conjunction="AND" property="filters">
		        	<isEqual property="filters[].element" compareValue="id">cu.id = #filters[].value#</isEqual>					
		        </iterate>
		<include refid="paginatedClose"/>
	</select>
	
	
	<!-- For simple customers search (customer can be without real object tied to it) -->
	<select id="get-customers"
			parameterClass="qparams"
			resultMap="mapping-customer" fetchSize="500">
		<include refid="paginatedOpen"/>
            SELECT 
                    cu.id
                    , cu.customer_number
                    , cu.inst_id
                    , cu.seqnum
                    , cu.split_hash
                    , cu.entity_type
                    , cu.object_id
                    , cu.contract_id
                    , cu.category
                    , cu.relation
                    , cu.status
                    , cu.resident
	                , cu.nationality
	                , cu.credit_rating
	                , cu.money_laundry_risk
	                , cu.money_laundry_reason
	                , cu.last_modify_date
	                , cu.last_modify_user
					, cn.contract_number
					, cn.product_id
                    , i.name inst_name
                    , pers.id 			AS pers_id
                    , pers.lang 		AS pers_lang
                    , pers.first_name 	AS pers_first_name
                    , pers.second_name	AS pers_second_name
                    , pers.surname 		AS pers_surname
                    , pers.title 		AS pers_title
                    , pers.suffix 		AS pers_suffix
                    , pers.gender 		AS pers_gender
                    , pers.birthday 	AS pers_birthday
                    , pers.seqnum 		AS pers_seqnum
                    , pers.place_of_birth AS pers_place_of_birth
                    , comp.id 				AS comp_id
                    , comp.embossed_name 	AS comp_embossed_name
                    , comp.seqnum 			AS comp_seqnum
                    , comp.lang 			AS comp_lang
                    , comp.label 			AS comp_label
                    , comp.description 		AS comp_description  
                    , null 					AS comp_incorp_form
                    , prd.product_type                
					, cu.ext_entity_type
					, cu.ext_object_id
					, com_ui_object_pkg.get_object_desc(cu.ext_entity_type, cu.ext_object_id, #lang#) ext_object_desc
					, cu.employment_status
					, cu.employment_period
					, cu.residence_type
					, cu.marital_status
					, cu.marital_status_date
					, cu.income_range
					, cu.number_of_children
		            , null as referral_code
			FROM
                prd_ui_customer_vw cu
		            LEFT JOIN com_ui_company_vw comp
		                ON   cu.object_id = comp.id
		                AND cu.entity_type = 'ENTTCOMP'
		                AND comp.lang = #lang#
		            LEFT JOIN (
							SELECT 
									  p.*
									, row_number() over (partition by id order by decode(p.lang, #lang#, 0, 'LANGENG', 1, 2)) row_num
							FROM com_ui_person_vw p
	                    ) pers
		                ON cu.object_id = pers.id
		                AND cu.entity_type = 'ENTTPERS'
		                AND pers.lang = #lang#
		                AND pers.row_num = 1
				, ost_ui_institution_sys_vw i
				, prd_ui_contract_vw cn
				, prd_ui_product_vw prd
			WHERE cu.inst_id = i.id
                AND i.lang = #lang#
                AND prd.lang = #lang#
				AND cu.contract_id = cn.id
				AND cn.product_id = prd.id
				<iterate prepend="AND" conjunction="AND" property="filters">
		        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
					<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
					<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="extEntityType">cu.ext_entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="extObjectId">cu.ext_object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="productType">
						cu.id IN (
		                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
		                        SELECT id FROM prd_ui_product_vw
		                        WHERE lang = #lang# 
						        AND product_type = #filters[].value#
		                    )
		                )
                	</isEqual>
		        </iterate>
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="CUSTOMER_NUMBER">customer_number $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>                
	            	<isEqual property="sorting[].property" compareValue="ENTITY_TYPE">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
	        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	

	<select id="get-customers-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT cu.id
		FROM 
			prd_ui_customer_vw cu
				LEFT JOIN com_ui_company_vw comp
					ON   cu.object_id = comp.id
					AND cu.entity_type = 'ENTTCOMP'
	                AND comp.lang = #lang#
				LEFT JOIN (
						SELECT 
								  p.*
								, row_number() over (partition by id order by decode(p.lang, #lang#, 0, 'LANGENG', 1, 2)) row_num
						FROM com_ui_person_vw p
                    ) pers
	                ON cu.object_id = pers.id
	                AND cu.entity_type = 'ENTTPERS'
	                AND pers.lang = #lang#
	                AND pers.row_num = 1
			, ost_ui_institution_sys_vw i
			, prd_ui_contract_vw cn
		WHERE cu.inst_id = i.id
			AND i.lang = #lang#
			AND cu.contract_id = cn.id
			<iterate prepend="AND" conjunction="AND" property="filters">
		       	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
				<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="extEntityType">cu.ext_entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="extObjectId">cu.ext_object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productType">
					cu.id IN (
	                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
	                        SELECT id FROM prd_ui_product_vw
	                        WHERE lang = #lang# 
					        AND product_type = #filters[].value#
	                    )
	                )
               	</isEqual>
			</iterate>
		<include refid="limitationClose"/>
	</select>	

	<select id="get-combined-customers-by-contract"
			parameterClass="qparams"
			resultMap="mapping-customer-info" fetchSize="500">
		<include refid="paginatedOpen"/>
			SELECT	DISTINCT		 
				<include refid="customers-fields"/>
			FROM 
				prd_ui_customers_vw cu
				, prd_ui_contract_vw cn
			WHERE
				cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang#
                AND cu.contract_id = cn.id
                <iterate prepend="AND" conjunction="AND" property="filters">
		        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
					<isEqual property="filters[].element" compareValue="contractType">cn.contract_type = #filters[].value#</isEqual>			
					<isEqual property="filters[].element" compareValue="instId">
						cu.inst_id = #filters[].value#
						AND cn.inst_id = #filters[].value#
					</isEqual>			
					<isEqual property="filters[].element" compareValue="agentId">cn.agent_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="productId">cn.product_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="startDate">trunc(cn.start_date) = TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
					<isEqual property="filters[].element" compareValue="endDate">trunc(cn.end_date) = TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
					<isEqual property="filters[].element" compareValue="productType">
						cu.id IN (
		                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
		                        SELECT id FROM prd_ui_product_vw
		                        WHERE lang = #lang# 
						        AND product_type = #filters[].value#
		                    )
		                )
                	</isEqual>
		        </iterate>			
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="CUSTOMER_NUMBER">customer_number $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>                
	            	<isEqual property="sorting[].property" compareValue="ENTITY_TYPE">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
	        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	
	
	<select id="get-combined-customers-by-contract-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT DISTINCT
			cu.id
		FROM 
				prd_ui_customers_vw cu
				, prd_ui_contract_vw cn
			WHERE
				cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang#
                AND cu.contract_id = cn.id
                <iterate prepend="AND" conjunction="AND" property="filters">
		        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
					<isEqual property="filters[].element" compareValue="contractType">cn.contract_type = #filters[].value#</isEqual>			
					<isEqual property="filters[].element" compareValue="instId">
						cu.inst_id = #filters[].value#
						AND cn.inst_id = #filters[].value#
					</isEqual>			
					<isEqual property="filters[].element" compareValue="agentId">cn.agent_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="productId">cn.product_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="startDate">trunc(cn.start_date) = TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
					<isEqual property="filters[].element" compareValue="endDate">trunc(cn.end_date) = TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
					<isEqual property="filters[].element" compareValue="productType">
						cu.id IN (
		                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
		                        SELECT id FROM prd_ui_product_vw
		                        WHERE lang = #lang# 
						        AND product_type = #filters[].value#
		                    )
		                )
                	</isEqual>
		        </iterate>
		<include refid="limitationClose"/>
	</select>
	
	<select id="get-combined-customers-by-document"
			parameterClass="qparams"
			resultMap="mapping-customer" fetchSize="500">
		<include refid="paginatedOpen"/>
			SELECT DISTINCT
				<include refid="customers-fields"/>
			FROM
				prd_ui_customers_vw cu
	            , com_ui_id_object_vw d
	        WHERE
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
	        	and cu.object_id = d.object_id(+)
				AND cu.entity_type = d.entity_type(+)
	                <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
						<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="personFirstName">upper(cu.first_name) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="personSurname">upper(cu.surname) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="idType">d.id_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="idSeries">upper(d.id_series) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="idNumber">upper(d.id_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="idIssuer">upper(d.id_issuer) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="idIssueDate">trunc(d.id_issue_date) = TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
						<isEqual property="filters[].element" compareValue="idExpireDate">trunc(d.id_expire_date) = TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>		
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="customerNumber">customer_number $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>                
	            	<isEqual property="sorting[].property" compareValue="entityType">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
	        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	
	
	<select id="get-combined-customers-by-document-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT DISTINCT
			cu.id
		FROM
				prd_ui_customers_vw cu
	            , com_ui_id_object_vw d
	        WHERE
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
	        	and cu.object_id = d.object_id(+)
				AND cu.entity_type = d.entity_type(+)
	                <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
						<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="personFirstName">upper(cu.first_name) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="personSurname">upper(cu.surname) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="idType">d.id_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="idSeries">upper(d.id_series) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="idNumber">upper(d.id_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="idIssuer">upper(d.id_issuer) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="idIssueDate">trunc(d.id_issue_date) = TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
						<isEqual property="filters[].element" compareValue="idExpireDate">trunc(d.id_expire_date) = TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>		
		<include refid="limitationClose"/>
	</select>
	
	<select id="get-combined-customers-by-contact"
			parameterClass="qparams"
			resultMap="mapping-customer-info" fetchSize="500">
		<include refid="paginatedOpen"/>
			SELECT DISTINCT
				<include refid="customers-fields"/>
			FROM
				prd_ui_customers_vw cu
				, com_ui_contact_object_vw o
				, com_ui_contact_vw c
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND o.contact_id  = c.id
				AND cu.id = o.object_id(+)
				AND o.entity_type = decode(o.entity_type, null, null, 'ENTTCUST')
	                <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
						<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="phone">upper(c.phone) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="mobile">upper(c.mobile) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="fax">upper(c.fax) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="email">upper(c.email) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="imType">c.im_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="imNumber">upper(c.im_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>		
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="customerNumber">customer_number $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>                
	            	<isEqual property="sorting[].property" compareValue="entityType">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
	        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	
	
	<select id="get-combined-customers-by-contact-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT DISTINCT
			cu.id
		FROM
				prd_ui_customers_vw cu
				, com_ui_contact_object_vw o
				, com_ui_contact_vw c
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND o.contact_id  = c.id
				AND cu.id = o.object_id(+)
				AND o.entity_type = decode(o.entity_type, null, null, 'ENTTCUST')
	                <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
						<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="phone">upper(c.phone) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="mobile">upper(c.mobile) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="fax">upper(c.fax) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="email">upper(c.email) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="imType">c.im_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="imNumber">upper(c.im_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>	
		<include refid="limitationClose"/>
	</select>
	
	<select id="get-combined-customers-by-address"
			parameterClass="qparams"
			resultMap="mapping-customer-info" fetchSize="500">
		<include refid="paginatedOpen"/>
			SELECT DISTINCT
				<include refid="customers-fields"/>
			FROM
				prd_ui_customers_vw cu
				, com_ui_address_object_vw o
				, com_ui_address_vw c
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND o.address_id  = c.id
				AND cu.id = o.object_id(+)
				AND o.entity_type = decode(o.entity_type, null, null, 'ENTTCUST')
	                <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
						<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
						
						<isEqual property="filters[].element" compareValue="addressType">o.address_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="country">a.country = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="city">upper(a.city) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="street">upper(a.street) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="house">upper(a.house) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="postalCode">upper(a.postal_code) like #filters[].value#</isEqual>
												
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>		
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="customerNumber">customer_number $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>                
	            	<isEqual property="sorting[].property" compareValue="entityType">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
	        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	
	
	<select id="get-combined-customers-by-address-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT DISTINCT
			cu.id
		FROM
				prd_ui_customers_vw cu
				, com_ui_address_object_vw o
				, com_ui_address_vw c
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND o.address_id  = c.id
				AND cu.id = o.object_id(+)
				AND o.entity_type = decode(o.entity_type, null, null, 'ENTTCUST')
	                <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
						<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
						
						<isEqual property="filters[].element" compareValue="addressType">o.address_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="country">a.country = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="city">upper(a.city) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="street">upper(a.street) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="house">upper(a.house) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="postalCode">upper(a.postal_code) like #filters[].value#</isEqual>
												
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>
		<include refid="limitationClose"/>
	</select>
	
	<select id="get-combined-customers-by-card"
			parameterClass="qparams"
			resultMap="mapping-customer-info" fetchSize="500">
		<include refid="paginatedOpen"/>
			SELECT DISTINCT
				<include refid="customers-fields"/>
			FROM
				prd_ui_customers_vw cu
				, iss_ui_card_vw ca
				, iss_ui_cardholder_vw ch
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND cu.id = ca.customer_id
	            AND ca.cardholder_id = ch.id
			        <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">
							cu.inst_id = #filters[].value#
							AND ca.inst_id = #filters[].value#
						</isEqual>			
						<isEqual property="filters[].element" compareValue="cardNumber">upper(ca.card_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="cardTypeId">ca.card_type_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="cardholderName">upper(ch.cardholder_name) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="agentId">cu.agent_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="productId">cu.product_id = #filters[].value#</isEqual>						
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="customerNumber">customer_number $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>                
	            	<isEqual property="sorting[].property" compareValue="entityType">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
	        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	
	
	<select id="get-combined-customers-by-card-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
			SELECT DISTINCT
				cu.id
			FROM
				prd_ui_customers_vw cu
				, iss_ui_card_vw ca
				, iss_ui_cardholder_vw ch
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND cu.id = ca.customer_id
	            AND ca.cardholder_id = ch.id
			        <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">
							cu.inst_id = #filters[].value#
							AND ca.inst_id = #filters[].value#
						</isEqual>			
						<isEqual property="filters[].element" compareValue="cardNumber">upper(ca.card_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="cardTypeId">ca.card_type_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="cardholderName">upper(ch.cardholder_name) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="agentId">cu.agent_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="productId">cu.product_id = #filters[].value#</isEqual>						
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>
		<include refid="limitationClose"/>
	</select>	
		
	<select id="get-combined-customers-by-account"
			parameterClass="qparams"
			resultMap="mapping-customer-info" fetchSize="500">
		<include refid="paginatedOpen"/>
			SELECT DISTINCT
				<include refid="customers-fields"/>
			FROM
				prd_ui_customers_vw cu
				, acc_ui_account_vw a
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND cu.id = a.customer_id
			        <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">
							cu.inst_id = #filters[].value#
							AND a.inst_id = #filters[].value#
						</isEqual>
						<isEqual property="filters[].element" compareValue="agentId">
							a.agent_id = #filters[].value#
						</isEqual>			
						<isEqual property="filters[].element" compareValue="accountNumber">upper(a.account_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="accountType">a.account_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="currency">a.currency = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="status">a.status = #filters[].value#</isEqual>						
						<isEqual property="filters[].element" compareValue="productId">cu.product_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>			
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="customerNumber">customer_number $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>                
	            	<isEqual property="sorting[].property" compareValue="entityType">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
	        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	
	
	<select id="get-combined-customers-by-account-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
			SELECT DISTINCT
				cu.id
			FROM
				prd_ui_customers_vw cu
				, acc_ui_account_vw a
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND cu.id = a.customer_id
			        <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">
							cu.inst_id = #filters[].value#
							AND a.inst_id = #filters[].value#
						</isEqual>
						<isEqual property="filters[].element" compareValue="agentId">
							a.agent_id = #filters[].value#
						</isEqual>			
						<isEqual property="filters[].element" compareValue="accountNumber">upper(a.account_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="accountType">a.account_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="currency">a.currency = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="status">a.status = #filters[].value#</isEqual>						
						<isEqual property="filters[].element" compareValue="productId">cu.product_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>	
		<include refid="limitationClose"/>
	</select>
	
	<select id="get-combined-customers-by-merchant"
			parameterClass="qparams"
			resultMap="mapping-customer-info" fetchSize="500">
		<include refid="paginatedOpen"/>
			SELECT DISTINCT
				<include refid="customers-fields"/>
			FROM
				prd_ui_customers_vw cu
				, prd_ui_contract_vw mcn
				, acq_ui_merchant_vw m
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND cu.id = mcn.customer_id
	            AND mcn.id = m.contract_id
	            AND m.lang = #lang#
			        <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">
							cu.inst_id = #filters[].value#
							AND m.inst_id = #filters[].value#
						</isEqual>
						<isEqual property="filters[].element" compareValue="agentId">
							mcn.agent_id = #filters[].value#						
						</isEqual>			
						<isEqual property="filters[].element" compareValue="merchantNumber">upper(m.merchant_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="merchantName">upper(m.merchant_name) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="mcc">m.mcc = #filters[].value#</isEqual>						
						<isEqual property="filters[].element" compareValue="productId">m.product_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>			
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="customerNumber">customer_number $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>                
	            	<isEqual property="sorting[].property" compareValue="entityType">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
	        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	
	
	<select id="get-combined-customers-by-merchant-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
			SELECT DISTINCT
				cu.id
			FROM
				prd_ui_customers_vw cu
				, prd_ui_contract_vw mcn
				, acq_ui_merchant_vw m
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND cu.id = mcn.customer_id
	            AND mcn.id = m.contract_id
	            AND m.lang = #lang#
			        <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">
							cu.inst_id = #filters[].value#
							AND m.inst_id = #filters[].value#
						</isEqual>
						<isEqual property="filters[].element" compareValue="agentId">
							mcn.agent_id = #filters[].value#						
						</isEqual>			
						<isEqual property="filters[].element" compareValue="merchantNumber">upper(m.merchant_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="merchantName">upper(m.merchant_name) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="mcc">m.mcc = #filters[].value#</isEqual>						
						<isEqual property="filters[].element" compareValue="productId">m.product_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>
		<include refid="limitationClose"/>
	</select>	
	
	
	<select id="get-combined-customers-by-terminal"
			parameterClass="qparams"
			resultMap="mapping-customer-info" fetchSize="500">
		<include refid="paginatedOpen"/>
			SELECT DISTINCT
				<include refid="customers-fields"/>
			FROM
				prd_ui_customers_vw cu
				, prd_ui_contract_vw tcn
				, acq_ui_terminal_vw t
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND cu.id = tcn.customer_id
	            AND tcn.id = t.contract_id
	            AND t.lang = #lang#
			        <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">
							cu.inst_id = #filters[].value#
							AND t.inst_id = #filters[].value#
						</isEqual>
						<isEqual property="filters[].element" compareValue="agentId">tcn.agent_id = #filters[].value#</isEqual>			
						<isEqual property="filters[].element" compareValue="terminalNumber">upper(t.terminal_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="terminalType">t.terminal_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="status">t.status = #filters[].value#</isEqual>
						
						<isEqual property="filters[].element" compareValue="productId">tcn.product_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="customerNumber">customer_number $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>                
	            	<isEqual property="sorting[].property" compareValue="entityType">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
	        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>	
	
	<select id="get-combined-customers-by-terminal-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
			SELECT DISTINCT
				cu.id
			FROM
				prd_ui_customers_vw cu
				, prd_ui_contract_vw tcn
				, acq_ui_terminal_vw t
	        WHERE 
	        	cu.inst_lang = #lang#
                and nvl(cu.comp_lang, #lang#) = #lang#
                and nvl(cu.pers_lang, #lang#) = #lang# 
				AND cu.id = tcn.customer_id
	            AND tcn.id = t.contract_id
	            AND t.lang = #lang#
			        <iterate prepend="AND" conjunction="AND" property="filters">
			        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="contractNumber">cu.contract_number like upper(#filters[].value#)</isEqual>
						<isEqual property="filters[].element" compareValue="instId">
							cu.inst_id = #filters[].value#
							AND t.inst_id = #filters[].value#
						</isEqual>
						<isEqual property="filters[].element" compareValue="agentId">tcn.agent_id = #filters[].value#</isEqual>			
						<isEqual property="filters[].element" compareValue="terminalNumber">upper(t.terminal_number) like #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="terminalType">t.terminal_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="status">t.status = #filters[].value#</isEqual>
						
						<isEqual property="filters[].element" compareValue="productId">tcn.product_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="productType">
							cu.id IN (
			                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
			                        SELECT id FROM prd_ui_product_vw
			                        WHERE lang = #lang# 
							        AND product_type = #filters[].value#
			                    )
			                )
	                	</isEqual>
			        </iterate>			
		<include refid="limitationClose"/>
	</select>
	
    <procedure id="add-customer"
    		parameterClass="ru.bpc.sv2.products.Customer">
    	{call PRD_UI_CUSTOMER_PKG.add_customer(
				  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_entity_type			=> #entityType#
				, i_object_id			=> #objectId#
				, io_customer_number	=> #customerNumber,jdbcType=VARCHAR,mode=INOUT#
				, i_inst_id				=> #instId#
    			)}
    </procedure>

    <procedure id="edit-customer"
    		parameterClass="ru.bpc.sv2.products.Customer">
    	{call PRD_UI_CUSTOMER_PKG.modify_customer(
				  i_id					=> #id#
				, io_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
				, i_entity_type			=> #entityType#
				, i_object_id			=> #objectId#
				, i_customer_number		=> #customerNumber#
    			)}
    </procedure>

    <procedure id="remove-customer"
    		parameterClass="ru.bpc.sv2.products.Customer">
    	{call PRD_UI_CUSTOMER_PKG.remove_customer(
				  i_id					=> #id#
				, i_seqnum				=> #seqNum#
				)}
    </procedure>

	<resultMap	id="mapping-contracts"
				class="ru.bpc.sv2.products.Contract">
		<result property="id" column="id"/>
		<result property="seqNum" column="seqnum"/>
		<result property="productId" column="product_id"/>
		<result property="startDate" column="start_date" javaType="java.util.Date"/>
		<result property="endDate" column="end_date" javaType="java.util.Date"/>
		<result property="contractNumber" column="contract_number"/>
		<result property="instId" column="inst_id"/>
		<result property="customerId" column="customer_id"/>
		<result property="customerNumber" column="customer_number"/>
		<result property="customerContractNumber" column="customer_contract_number"/>
		<result property="customerName" column="customer_name"/>
		<result property="splitHash" column="split_hash"/>
		<result property="agentId" column="agent_id"/>
		<result property="instName" column="inst_name"/>
		<result property="productName" column="product_name"/>
		<result property="productType" column="product_type"/>
		<result property="contractType" column="contract_type"/>
		<result property="customerType" column="customer_type"/>
        <result property="productNumber" column="product_number"/>
	</resultMap>

	<select	id="get-contracts"
		    parameterClass="qparams"
		    resultMap="mapping-contracts" fetchSize="500">
		<include refid="paginatedOpen"/>
			SELECT 	  c.id
					, c.seqnum
					, c.product_id
					, c.start_date
					, c.end_date
					, c.contract_number
					, c.inst_id
					, c.customer_id
					, c.split_hash
					, c.agent_id
					, c.contract_type
					, cu.customer_number
					, cu.customer_name
					, cu.entity_type customer_type
					, i.name inst_name
					, p.label product_name
					, p.product_type
					, d.name contract_type_name
					, c1.contract_number customer_contract_number
                    , p.product_number
			FROM
					  prd_ui_contract_vw c
					, prd_ui_contract_vw c1
					, ost_ui_institution_sys_vw i
					, prd_ui_product_vw p
					, prd_ui_customer_name_vw cu
					, com_ui_dictionary_vw d
			WHERE c.inst_id = i.id
				AND c.product_id = p.id(+)
				AND c.customer_id = cu.id
				AND cu.contract_id = c1.id
				AND c.contract_type = d.dict || d.code
				AND i.lang = #lang#
				AND p.lang(+) = #lang#
				AND cu.lang(+) = #lang#
				AND d.lang = #lang#
			<isNotNull property="threshold">AND rownum <![CDATA[<]]> (#threshold#+1)</isNotNull>
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">c.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">c.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productId">c.product_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="customerId">c.customer_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="customerType">cu.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="contractNumber">reverse(c.contract_number) like decode(substr(#filters[].value#,1,1), '%', reverse(upper(substr(#filters[].value#,2)))||'%', '%')
					and c.contract_number like decode(substr(#filters[].value#,1,1), '%', '%', upper(#filters[].value#))</isEqual>
				<isEqual property="filters[].element" compareValue="customerNumber">reverse(cu.customer_number) like decode(substr(#filters[].value#,1,1), '%', reverse(upper(substr(#filters[].value#,2)))||'%', '%')
					and cu.customer_number like decode(substr(#filters[].value#,1,1), '%', '%', upper(#filters[].value#))</isEqual>
				<isEqual property="filters[].element" compareValue="startDateFrom">trunc(c.start_date) >= trunc(#filters[].value#)</isEqual>
			 	<isEqual property="filters[].element" compareValue="startDateTo">trunc(c.start_date) <![CDATA[<=]]> trunc(#filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="endDateFrom">trunc(c.end_date) >= trunc(#filters[].value#)</isEqual>
			 	<isEqual property="filters[].element" compareValue="endDateTo">
			 		trunc(c.end_date) <![CDATA[<=]]> trunc(#filters[].value#) AND (trunc(c.start_date) <![CDATA[<=]]> trunc(#filters[].value#) OR c.start_date IS NULL)
			 	</isEqual>
			 	<isEqual property="filters[].element" compareValue="contractType">c.contract_type = #filters[].value#</isEqual>
			 	<isEqual property="filters[].element" compareValue="productType">
					c.product_id IN (
						SELECT id FROM prd_ui_product_vw
						WHERE lang = #lang# 
						AND product_type = #filters[].value#
					)
				</isEqual>
				<isEqual property="filters[].element" compareValue="accountId">
					c.id = (
				        SELECT contract_id FROM acc_ui_account_vw
				        WHERE id = #filters[].value#
				    )
				</isEqual>
				<isEqual property="filters[].element" compareValue="terminalId">
					c.id = (
				        SELECT contract_id FROM acq_ui_terminal_vw
				        WHERE id = #filters[].value#
				        AND lang = #lang#
				    )
				</isEqual>
				<isEqual property="filters[].element" compareValue="merchantId">
					c.id = (
				        SELECT contract_id FROM acq_ui_merchant_vw
				        WHERE id = #filters[].value#
				        AND lang = #lang#
				    )
				</isEqual>
				<isEqual property="filters[].element" compareValue="terminalNumber">
					c.id IN (
				        SELECT contract_id FROM acq_ui_terminal_vw
				        WHERE terminal_number LIKE #filters[].value#
				        AND lang = #lang#
				    )
				</isEqual>
				<isEqual property="filters[].element" compareValue="merchantNumber">
					c.id IN (
				        SELECT contract_id FROM acq_ui_merchant_vw
				        WHERE merchant_number LIKE #filters[].value#
				        AND lang = #lang#
				    )
				</isEqual>
				<isEqual property="filters[].element" compareValue="cardId">
					c.id = (
				        SELECT contract_id FROM iss_ui_card_vw
				        WHERE id = #filters[].value#
				    )
				</isEqual>
				<isEqual property="filters[].element" compareValue="cardNumber">
					c.id IN (
				        SELECT contract_id FROM iss_ui_card_vw
				        WHERE reverse(card_number) $filters[].condition$ reverse(#filters[].value#)
				    )
				</isEqual>
				<isEqual property="filters[].element" compareValue="accountNumber">
					c.id IN (
				        SELECT contract_id FROM acc_ui_account_vw
				        WHERE reverse(account_number) $filters[].condition$ reverse(#filters[].value#)
				    )
				</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">c.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="instName">upper(inst_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="productName">upper(product_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="contractNumber">c.contract_number $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="contractType">c.contract_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="contractTypeName">upper(contract_type_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="customerNumber">cu.customer_number $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="startDate">c.start_date $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="endDate">c.end_date $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="customerName">upper(cu.customer_name) $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting">ORDER BY c.contract_number ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-contracts-count"
		    parameterClass="qparams"
	    	resultClass="int" >
	    <include refid="limitationOpenCount"/>
		SELECT
			* 
		FROM 
			prd_ui_contract_vw c
			, prd_ui_customer_vw cu
			, com_ui_dictionary_vw d
			, prd_ui_contract_vw c1
		WHERE 
			c.customer_id = cu.id			 
			AND cu.contract_id = c1.id
			AND c.contract_type = d.dict || d.code
			AND d.lang = #lang#
		<isNotNull property="threshold">AND rownum <![CDATA[<]]> (#threshold#+1)</isNotNull>
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">c.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">c.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="productId">c.product_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="customerId">c.customer_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="customerType">cu.entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="contractNumber">reverse(c.contract_number) like decode(substr(#filters[].value#,1,1), '%', reverse(upper(substr(#filters[].value#,2)))||'%', '%')
				and c.contract_number like decode(substr(#filters[].value#,1,1), '%', '%', upper(#filters[].value#))</isEqual>
			<isEqual property="filters[].element" compareValue="contractType">c.contract_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="customerNumber">reverse(cu.customer_number) like decode(substr(#filters[].value#,1,1), '%', reverse(upper(substr(#filters[].value#,2)))||'%', '%')
				and cu.customer_number like decode(substr(#filters[].value#,1,1), '%', '%', upper(#filters[].value#))</isEqual>
			<isEqual property="filters[].element" compareValue="startDateFrom">
				trunc(c.start_date) >= trunc(#filters[].value#) AND (trunc(c.end_date) >= trunc(#filters[].value#) OR c.end_date IS NULL)
			</isEqual>
		 	<isEqual property="filters[].element" compareValue="startDateTo">trunc(c.start_date) <![CDATA[<=]]> trunc(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="endDateFrom">trunc(c.end_date) >= trunc(#filters[].value#)</isEqual>
		 	<isEqual property="filters[].element" compareValue="endDateTo">
		 		trunc(c.end_date) <![CDATA[<=]]> trunc(#filters[].value#) AND (trunc(c.start_date) <![CDATA[<=]]> trunc(#filters[].value#) OR c.start_date IS NULL)
		 	</isEqual>
		 	<isEqual property="filters[].element" compareValue="productType">
				c.product_id IN (
					SELECT id FROM prd_ui_product_vw
					WHERE lang = #lang# 
					AND product_type = #filters[].value#
				)
			</isEqual>
			<isEqual property="filters[].element" compareValue="accountId">
				c.id = (
			        SELECT contract_id FROM acc_ui_account_vw
			        WHERE id = #filters[].value#
			    )
			</isEqual>
			<isEqual property="filters[].element" compareValue="terminalId">
				c.id = (
			        SELECT contract_id FROM acq_ui_terminal_vw
			        WHERE id = #filters[].value#
			        AND lang = #lang#
			    )
			</isEqual>
			<isEqual property="filters[].element" compareValue="merchantId">
				c.id = (
			        SELECT contract_id FROM acq_ui_merchant_vw
			        WHERE id = #filters[].value#
			        AND lang = #lang#
			    )
			</isEqual>
			<isEqual property="filters[].element" compareValue="terminalNumber">
				c.id IN (
			        SELECT contract_id FROM acq_ui_terminal_vw
			        WHERE terminal_number LIKE #filters[].value#
			        AND lang = #lang#
			    )
			</isEqual>
			<isEqual property="filters[].element" compareValue="merchantNumber">
				c.id IN (
			        SELECT contract_id FROM acq_ui_merchant_vw
			        WHERE merchant_number LIKE #filters[].value#
			        AND lang = #lang#
			    )
			</isEqual>
			<isEqual property="filters[].element" compareValue="cardId">
				c.id = (
			        SELECT contract_id FROM iss_ui_card_vw
			        WHERE id = #filters[].value#
			    )
			</isEqual>
			<isEqual property="filters[].element" compareValue="cardNumber">
				c.id IN (
			        SELECT contract_id FROM iss_ui_card_vw
			        WHERE reverse(card_number) $filters[].condition$ reverse(#filters[].value#)
			    )
			</isEqual>
			<isEqual property="filters[].element" compareValue="accountNumber">
				c.id IN (
			        SELECT contract_id FROM acc_ui_account_vw
			        WHERE reverse(account_number) $filters[].condition$ reverse(#filters[].value#)
			    )
			</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

    <parameterMap class="java.util.Map" id="get-contracts-cur-map">
        <parameter property="ref_cur" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT" resultMap="mapping-contracts"/>
        <parameter property="row_count" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
        <parameter property="first_row" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
        <parameter property="last_row" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
        <parameter property="tab_name" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
        <parameter property="param_tab" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
        <parameter property="sorting_tab" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
    </parameterMap>

    <procedure id="get-contracts-cur" parameterMap="get-contracts-cur-map">
        { call prd_ui_contract_search_pkg.get_ref_cur(
        o_ref_cur		=> ?
        , i_row_count 	=> ?
        , i_first_row 	=> ?
        , i_last_row	=> ?
        , i_tab_name	=> ?
        , i_param_tab	=> ?
        , i_sorting_tab	=> ?
        )}
    </procedure>

    <parameterMap class="java.util.Map" id="get-contracts-cur-count-map">
        <parameter property="row_count" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="OUT"/>
        <parameter property="tab_name" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
        <parameter property="param_tab" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
    </parameterMap>

    <procedure id="get-contracts-cur-count"
               parameterMap="get-contracts-cur-count-map">
        { call prd_ui_contract_search_pkg.get_row_count(
        o_row_count		=> ?
        , i_tab_name	=> ?
        , i_param_tab	=> ?
        )}
    </procedure>
    
    <parameterMap id="mapping-check-pan-length" class="java.util.Map">
		<parameter property="binId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="formatId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>		
	</parameterMap>
	
    <procedure id="check-pan-length"
    		parameterMap="mapping-check-pan-length">
    	{call ISS_UI_PRODUCT_CARD_TYPE_PKG.check_pan_length(
				  i_bin_id           => ?
				, i_number_format_id => ?
				)}
    </procedure>
    

	<resultMap	id="mapping-contract-type"
				class="ru.bpc.sv2.products.ContractType">
		<result property="id" column="id"/>
		<result property="seqNum" column="seqnum"/>
		<result property="contractType" column="contract_type"/>
		<result property="customerEntityType" column="customer_entity_type"/>
		<result property="productType" column="product_type"/>
	</resultMap>

	<select	id="get-contract-types"
		    parameterClass="qparams"
		    resultMap="mapping-contract-type" >
		<include refid="paginatedOpen"/>
			SELECT 	  ct.id
					, ct.seqnum
					, ct.contract_type
					, ct.customer_entity_type
					, ct.product_type					
			FROM prd_ui_contract_type_vw ct
			<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">ct.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="contractType">ct.contract_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="customerEntityType">ct.customer_entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productType">ct.product_type = #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">ct.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="contractType">ct.contract_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="customerType">ct.customer_entity_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="productType">ct.product_type $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting">ORDER BY ct.contract_type ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-contract-types-count"
		    parameterClass="qparams"
	    	resultClass="int" >
	    <include refid="limitationOpenCount"/>
		SELECT ct.id 
		FROM  prd_ui_contract_type_vw ct
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">ct.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="contractType">ct.contract_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="customerEntityType">ct.customer_entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="productType">ct.product_type = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>
	
	<select id="get-product-type"
		    parameterClass="ru.bpc.sv2.products.ContractType"
	    	resultClass="String" >
	    select PRD_UI_CONTRACT_TYPE_PKG.get_product_type(
	    	i_contract_type 		=> #contractType#, 
	    	i_customer_entity_type 	=> #customerEntityType#
	    ) from dual
	</select>

    <procedure id="add-contract-type"
    		parameterClass="ru.bpc.sv2.products.ContractType">
    	{call PRD_UI_CONTRACT_TYPE_PKG.add(
    			  o_id                   => #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum               => #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_contract_type        => #contractType#
				, i_customer_entity_type => #customerEntityType#
				, i_product_type         => #productType#
				)}
    </procedure>

    <procedure id="remove-contract-type"
    		parameterClass="ru.bpc.sv2.products.ContractType">
    	{call PRD_UI_CONTRACT_TYPE_PKG.remove(
				  i_id                   => #id#
				, i_seqnum               => #seqNum#
				)}
    </procedure>

	<resultMap	id="mapping-service-object"
				class="ru.bpc.sv2.products.ServiceObject">
		<result property="id" column="id"/>
		<result property="contractId" column="contract_id"/>
		<result property="serviceId" column="service_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="objectId" column="object_id"/>
		<result property="startDate" column="start_date"/>
		<result property="endDate" column="end_date"/>
		<result property="splitHash" column="split_hash"/>
		<result property="serviceName" column="service_name"/>
		<result property="serviceStatus" column="service_status"/>
		<result property="description" column="description"/>
		<result property="instId" column="inst_id"/>
	</resultMap>

	<select	id="get-service-objects"
		    parameterClass="qparams"
		    resultMap="mapping-service-object" fetchSize="500">
		<include refid="limitationOpen"/>
		SELECT 	  so.id
				, so.contract_id
				, so.service_id
				, so.entity_type
				, so.object_id
				, so.start_date
				, so.end_date
				, so.split_hash
				, s.label AS service_name
				, so.status AS service_status
				, s.inst_id 
				, get_object_desc(i_object_id => object_id, i_entity_type => entity_type) description					
		FROM prd_ui_service_object_vw so, prd_ui_service_vw s
		WHERE so.service_id = s.id
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">so.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="contractId">so.contract_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">so.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">so.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">s.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceName">upper(s.label) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceStatus">s.status = #filters[].value#</isEqual>
			</iterate>
		<iterate prepend="ORDER BY" conjunction="," property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="id">so.id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="contractId">so.contract_id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="entityType">so.entity_type $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="objectId">so.object_id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="startDate">so.start_date $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="endDate">so.end_date $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="serviceName">upper(service_name) $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="serviceStatus">service_status $sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<isEmpty property="sorting">ORDER BY upper(service_name) ASC</isEmpty>
		<include refid="limitationClose"/>
	</select>

	<select id="get-service-objects-count"
		    parameterClass="qparams"
	    	resultClass="int" >
	    <include refid="limitationOpenCount"/>
		SELECT * 
		FROM prd_ui_service_object_vw so, prd_ui_service_vw s
		WHERE so.service_id = s.id
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">so.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="contractId">so.contract_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">so.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">so.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">s.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceName">upper(s.label) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceStatus">s.status = #filters[].value#</isEqual>
			</iterate>
		<include refid="limitationClose"/>
	</select>
	
	<procedure id="modify-customer"
			parameterClass="ru.bpc.sv2.products.Customer">
		{call prd_ui_customer_pkg.modify_customer(
			  i_customer_id		=> #id#
			, i_ext_entity_type	=> #extEntityType#
			, i_ext_object_id	=> #extObjectId#
		)}
	</procedure>
	
	<procedure id="clear-ext-fields"
			parameterClass="ru.bpc.sv2.products.Customer">
		{call prd_ui_customer_pkg.clear_ext_fields(
			  i_customer_id		=> #id#
	)}
	</procedure>	

	<resultMap id="mapping-customer-light" class="ru.bpc.sv2.products.Customer">
        <result property="id" column="id"/>
        <result property="seqNum" column="seqnum"/>
        <result property="entityType" column="entity_type"/>
        <result property="objectId" column="object_id"/>
        <result property="customerNumber" column="customer_number"/>
		<result property="contractId" column="contract_id"/>
        <result property="instId" column="inst_id"/>
        <result property="splitHash" column="split_hash"/>
		<result property="category" column="category"/>
		<result property="relation" column="relation"/>
		<result property="resident" column="resident"/>
		<result property="nationality" column="nationality"/>
		<result property="creditRating" column="credit_rating"/>
		<result property="moneyLaundryRisk" column="money_laundry_risk"/>
		<result property="moneyLaundryReason" column="money_laundry_reason"/>
		<result property="lastModifyDate" column="last_modify_date"/>
		<result property="lastModifyUser" column="last_modify_user"/>
		<result property="status" column="status"/>
		<result property="extEntityType" column="ext_entity_type"/>
		<result property="extObjectId" column="ext_object_id"/>
		<result property="employmentStatus" column="employment_status"/>
		<result property="employmentPeriod" column="employment_period"/>
		<result property="residenceType" column="residence_type"/>
		<result property="maritalStatus" column="marital_status"/>
		<result property="maritalStatusDate" column="marital_status_date"/>
		<result property="incomeRange" column="income_range"/>
		<result property="numberOfChildren" column="number_of_children"/>
		<result property="referralCode" column="referral_code"/>
    </resultMap>

	<!-- For simple customers search (gets only fields from prd_ui_customer_vw) -->
	<select id="get-customers-light"
			parameterClass="qparams"
			resultMap="mapping-customer-light" fetchSize="500">
		SELECT 
                  cu.id
                , cu.customer_number
                , cu.inst_id
                , cu.seqnum
                , cu.split_hash
                , cu.entity_type
                , cu.object_id
                , cu.contract_id
                , cu.category
                , cu.relation
                , cu.status
                , cu.resident
                , cu.nationality
                , cu.credit_rating
                , cu.money_laundry_risk
                , cu.money_laundry_reason
                , cu.last_modify_date
                , cu.last_modify_user
				, cu.ext_entity_type
				, cu.ext_object_id
				, cu.employment_status
				, cu.employment_period
				, cu.residence_type
				, cu.marital_status
				, cu.marital_status_date
				, cu.income_range
				, cu.number_of_children
                , null as referral_code
		FROM prd_ui_customer_vw cu
		<iterate prepend="WHERE" conjunction="AND" property="filters">
        	<isEqual property="filters[].element" compareValue="id">cu.id like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="customerNumber">cu.customer_number like upper(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="instId">cu.inst_id = #filters[].value#</isEqual>			
			<isEqual property="filters[].element" compareValue="objectId">cu.object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="contractId">cu.contract_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">cu.entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="extEntityType">cu.ext_entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="extObjectId">cu.ext_object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="productType">
				cu.id IN (
                    SELECT customer_id FROM prd_ui_contract_vw WHERE product_id IN (
                        SELECT id FROM prd_ui_product_vw
                        WHERE lang = #lang# 
				        AND product_type = #filters[].value#
                    )
                )
              	</isEqual>
        </iterate>
        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
            <isNotEqual property="sorting[].direction" compareValue="AUTO">
                <isEqual property="sorting[].property" compareValue="CUSTOMER_NUMBER">customer_number $sorting[].direction$</isEqual>
            	<isEqual property="sorting[].property" compareValue="ENTITY_TYPE">entity_type $sorting[].direction$</isEqual>
			</isNotEqual>
        </iterate>
        <isEmpty property="sorting">ORDER BY customer_number ASC</isEmpty>
	</select>

	<resultMap id="mapping-product-account-type" class="ru.bpc.sv2.products.ProductAccountType">
		<result property="id" column="id" jdbcType="NUMBER"/>
		<result property="accountType" javaType="java.lang.String" column="account_type" jdbcType="VARCHAR"/>
		<result property="accountTypeName" javaType="java.lang.String" column="text" jdbcType="VARCHAR"/>
		<result property="currency" javaType="java.lang.String" column="currency" jdbcType="VARCHAR"/>
		<result property="productId" javaType="java.lang.Integer" column="product_id" jdbcType="NUMBER"/>
		<result property="schemeId" javaType="java.lang.Long" column="scheme_id" jdbcType="NUMBER"/>
		<result property="serviceId" javaType="java.lang.Long" column="service_id" jdbcType="NUMBER"/>
		<result property="serviceName" javaType="java.lang.String" column="label" jdbcType="VARCHAR"/>
		<result property="avalAlgorithm" javaType="java.lang.String" column="aval_algorithm" jdbcType="VARCHAR"/>
    </resultMap>

	<select id="get-product-account-type" parameterClass="qparams" resultMap="mapping-product-account-type">
		<include refid="limitationOpen"/>
			select p.id
			     , p.account_type
			     , i.text
			     , p.currency
			     , p.product_id
			     , p.scheme_id
			     , p.service_id
			     , s.label
			     , p.aval_algorithm
			  from acc_ui_product_account_type_vw p
			     , prd_ui_service_vw s
			     , com_i18n i
			     , com_dictionary d
			 where p.service_id = s.id
			   and d.dict || d.code = p.account_type
			   and i.table_name = 'COM_DICTIONARY'
			   and i.object_id = d.id
			<iterate prepend=" and " conjunction=" and " property="filters">
				<isEqual property="filters[].element" compareValue="productId">p.product_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">
					s.lang = #filters[].value# and i.lang = #filters[].value#
				</isEqual>
			</iterate>
			<iterate prepend=" order by " conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="auto">
					<isEqual property="sorting[].property" compareValue="id">p.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="productId">p.product_id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="schemeId">p.scheme_id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="serviceId">p.service_id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="currency">p.currency $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="accountType">p.account_type $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
		<include refid="limitationClose"/>
	</select>

	<select id="get-product-account-type-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
        SELECT p.id 
        FROM 
			acc_ui_product_account_type_vw p,
			prd_ui_service_vw s
		WHERE p.service_id = s.id 
       	<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="productId">p.product_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>	        	
		</iterate>
		<include refid="limitationClose"/>
    </select>

	<procedure id="add-product-account-type" parameterClass="ru.bpc.sv2.products.ProductAccountType">
		{call acc_ui_product_account_pkg.add_product_account_type(
			  o_id				=> #id,jdbcType=NUMERIC,mode=OUT#
			, i_product_id		=> #productId#
			, i_account_type	=> #accountType#
			, i_currency		=> #currency#
			, i_scheme_id		=> #schemeId#
			, i_service_id		=> #serviceId#
			, i_aval_algorithm	=> #avalAlgorithm#
		)}
	</procedure>

    <procedure id="edit-product-account-type"
    		parameterClass="ru.bpc.sv2.products.ProductAccountType">
    	{call acc_ui_product_account_pkg.modify_product_account_type(
				  i_id             => #id#
				, i_product_id     => #productId#
				, i_account_type   => #accountType#
				, i_currency       => #currency#
				, i_scheme_id      => #schemeId#				
				, i_service_id     => #serviceId#
				, i_aval_algorithm => #avalAlgorithm#  
    			)}
    </procedure>

    <procedure id="remove-product-account-type"
    		parameterClass="ru.bpc.sv2.products.ProductAccountType">
    	{call acc_ui_product_account_pkg.remove_product_account_type(
				  i_id					=> #id#				
				)}
    </procedure>
    
	<procedure id="set_service_attribute"
			parameterClass="ru.bpc.sv2.products.ProductAttribute">
		{call PRD_UI_SERVICE_PKG.set_service_attribute(
		          i_service_id          	=> #serviceId#
			    , i_attribute_id    		=> #id#
			    , i_is_visible          	=> #visible#
		)}
	</procedure>
	
	<select	id="get-service-types-by-product"
		    parameterClass="qparams"
		    resultMap="mapping-service-types">
		<include refid="paginatedOpen"/>
			SELECT DISTINCT	  ty.id
					, ty.seqnum
					, ty.product_type
					, ty.entity_type
					, ty.is_initial
					, ty.enable_event_type
					, ty.disable_event_type
					, ty.label
					, ty.description
					, ty.lang
			FROM prd_ui_product_service_vw prd,
				 prd_ui_service_vw se,
				 prd_ui_service_type_vw ty
				 
			  WHERE prd.service_id = se.id
			  AND se.service_type_id = ty.id
			<iterate prepend="AND" conjunction="AND" property="filters">   
         	<!-- <iterate prepend="WHERE" conjunction="AND" property="filters"> --> 
				<isEqual property="filters[].element" compareValue="productId">prd.product_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">ty.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">ty.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="isInitial">ty.is_initial = #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
				</isNotEqual>
			</iterate>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-service-types-by-product-count"
		    parameterClass="qparams"
	    	resultClass="int" >
	    <include refid="limitationOpenCount"/>
		SELECT DISTINCT ty.id 
		FROM prd_ui_product_service_vw prd,
				 prd_ui_service_vw se,
				 prd_ui_service_type_vw ty
				 
			WHERE prd.service_id = se.id
			  AND se.service_type_id = ty.id
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="productId">prd.product_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">ty.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">ty.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="isInitial">ty.is_initial = #filters[].value#</isEqual>
			</iterate>
		<include refid="limitationClose"/>
	</select>
	
	<select id="get-product-service-min-count"
		    parameterClass="qparams"
	    	resultClass="int" >
	    <include refid="paginatedOpen"/>
		SELECT distinct min_count 
		FROM prd_ui_product_service_vw
			<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="serviceId">service_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productId">product_id = #filters[].value#</isEqual>
			</iterate>
		<include refid="paginatedClose"/>
	</select>
	
	<select	id="get-services-by-account-product"
		    parameterClass="qparams"
		    resultMap="mapping-services">
		<include refid="paginatedOpen"/>
			SELECT 	  s.id
					, s.seqnum
					, s.service_type_id
					, s.template_appl_id
					, s.inst_id
					, s.label
					, s.description
					, s.lang
					, s.status
					, st.label as service_type_name
					, i.name as inst_name
					, st.product_type
					, st.is_initial
                    , s.service_number
			FROM prd_ui_service_vw s, prd_ui_service_type_vw st, ost_ui_institution_vw i,
				acc_ui_product_account_type_vw prd
			WHERE s.service_type_id = st.id
					AND s.lang = st.lang
					AND s.inst_id = i.id(+)
					AND s.lang = i.lang(+)
					AND prd.service_id = s.id
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">s.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">s.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="label">upper(s.label) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceTypeId">s.service_type_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">s.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="description">upper(s.description) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="status">s.status = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="isInitial">st.is_initial = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productId">prd.product_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="currency">prd.currency = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="accountType">prd.account_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productType">
					s.service_type_id IN (
						SELECT id 
						FROM prd_ui_service_type_vw
						WHERE product_type = #filters[].value#
						AND lang = com_ui_user_env_pkg.get_user_lang
					)
				</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">s.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="label">upper(s.label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="type">service_type_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="status">s.status $sorting[].direction$</isEqual>
                    <isEqual property="sorting[].property" compareValue="serviceNumber">s.service_number $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting">ORDER BY upper(s.label) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>
	
	<select	id="get-services-by-merchant-product"
		   parameterClass="qparams"
		    resultMap="mapping-services">
		<include refid="paginatedOpen"/>
			 SELECT  distinct  ms.service_id id
                    , s.seqnum
                    , ms.service_type_id
                    , s.template_appl_id
                    , m.inst_id
                    , ms.service_label label
                    , s.description
                    , s.lang
                    , s.status
                    , ms.service_type as service_type_name
                    , i.name as inst_name
                    , prd.product_type
                    , ms.is_initial
                    , s.service_number
            FROM aap_ui_merchant_service_vw ms, prd_ui_service_vw s, 
             ost_ui_institution_vw i, acq_ui_product_vw prd, acq_ui_merchant_vw m
            WHERE ms.service_id = s.id
                    AND s.inst_id = i.id(+)
                    AND s.lang = i.lang(+)
                    AND m.lang = i.lang
                    AND ms.lang = i.lang
                    AND prd.lang = i.lang
                    AND prd.id = ms.product_id
                    AND ms.merchant_id = m.id
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="lang">s.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceTypeId">ms.service_type_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">s.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productType">
					s.service_type_id IN (
						SELECT id 
						FROM prd_ui_service_type_vw
						WHERE product_type = #filters[].value#
						AND lang = com_ui_user_env_pkg.get_user_lang
					)
				</isEqual>
			</iterate>
			
		<include refid="paginatedClose"/>
	</select>
	
	<select	id="get-services-by-terminal-product"
		   parameterClass="qparams"
		    resultMap="mapping-services">
		<include refid="paginatedOpen"/>
			SELECT  distinct  s.id
                    , s.seqnum
                    , s.service_type_id
                    , s.template_appl_id
                    , s.inst_id
                    , s.label
                    , s.description
                    , s.lang
                    , s.status
                    , st.label as service_type_name
                    , i.name as inst_name
                    , prd.product_type
                    , st.is_initial
                    , s.service_number
            FROM prd_ui_service_vw s, ost_ui_institution_vw i, 
                acq_ui_product_vw prd, prd_ui_service_type_vw st
            WHERE s.inst_id = i.id
                    AND s.lang = i.lang
                    AND prd.lang = i.lang
                    and st.lang = s.lang
                    and st.id = S.SERVICE_TYPE_ID
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="lang">s.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceTypeId">s.service_type_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">s.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productType">
					s.service_type_id IN (
						SELECT id 
						FROM prd_ui_service_type_vw
						WHERE product_type = #filters[].value#
						AND lang = com_ui_user_env_pkg.get_user_lang
					)
				</isEqual>
			</iterate>
			
		<include refid="paginatedClose"/>
	</select>
	
	<select	id="get-services-by-card-product"
		    parameterClass="qparams"
		    resultMap="mapping-services">
		<include refid="paginatedOpen"/>
			SELECT 	DISTINCT  s.id
					, s.seqnum
					, s.service_type_id
					, s.template_appl_id
					, s.inst_id
					, s.label
					, s.description
					, s.lang
					, s.status
					, st.label as service_type_name
					, i.name as inst_name
					, st.product_type
					, st.is_initial
                    , s.service_number
			FROM prd_ui_service_vw s, prd_ui_service_type_vw st, ost_ui_institution_vw i,
				iss_ui_product_card_type_vw prd
			WHERE s.service_type_id = st.id
					AND s.lang = st.lang
					AND s.inst_id = i.id(+)
					AND s.lang = i.lang(+)
					AND prd.service_id = s.id
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">s.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">s.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="label">upper(s.label) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="serviceTypeId">s.service_type_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">s.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="description">upper(s.description) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="status">s.status = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="isInitial">st.is_initial = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productId">prd.product_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="cardTypeId">prd.card_type_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="productType">
					s.service_type_id IN (
						SELECT id 
						FROM prd_ui_service_type_vw
						WHERE product_type = #filters[].value#
						AND lang = com_ui_user_env_pkg.get_user_lang
					)
				</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">s.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="label">upper(s.label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="type">service_type_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="instName">inst_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="status">s.status $sorting[].direction$</isEqual>
                    <isEqual property="sorting[].property" compareValue="serviceNumber">s.service_number $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting">ORDER BY upper(s.label) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<resultMap	id="mapping-product-attr-flat"
				class="ru.bpc.sv2.products.ProductAttribute">
		<result property="id" column="id"/>
		<result property="systemName" column="attr_name"/>
		<result property="dataType" column="data_type"/>
		<result property="lovId" column="lov_id"/>
		<result property="displayOrder" column="display_order"/>
		<result property="attrEntityType" column="attr_entity_type"/>
		<result property="attrObjectType" column="attr_object_type"/>
		<result property="parentId" column="parent_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="lang" column="lang"/>
		<result property="label" column="label"/>
		<result property="fullDesc" column="description"/>
		<result property="scaleId" column="scale_id"/>
		<result property="scaleName" column="scale_name"/>
		<result property="instId" column="inst_id"/>
		<result property="productId" column="product_id"/>
		<result property="serviceId" column="service_id"/>
		<result property="defLevel" column="definition_level"/>
		<result property="serviceStatus" column="service_status"/>		
	</resultMap>

	<select id="get-object-attrs-flat"
			parameterClass="qparams" resultMap="mapping-product-attr-flat" fetchSize="500">
			SELECT
				aov.id
				,aov.attr_name
				,aov.data_type
				,aov.lov_id
				,aov.display_order
				,aov.attr_entity_type
				,aov.attr_object_type
				,aov.parent_id
				,aov.entity_type
				,aov.object_id
				,aov.lang
				,aov.label
				,aov.description
				,aov.scale_id
				,aov.scale_name
				,aov.inst_id
				,aov.service_id
				,aov.product_id
				,aov.definition_level
				,aov.service_status
			FROM
				prd_ui_attribute_object_vw aov
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">aov.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="attrName">aov.attr_name = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="dataType">aov.data_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lovId">aov.lov_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="displayOrder">aov.display_order = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="attrEntityType">aov.attr_entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="attrObjectType">aov.attr_object_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="parentId">aov.parent_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">aov.entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="objectId">aov.object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">aov.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="label">aov.label = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="description">aov.description = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="scaleId">aov.scale_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="scaleName">aov.scale_name = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">aov.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="serviceId">aov.service_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="productId">aov.product_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="definitionLevel">aov.definition_level = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="serviceStatus">aov.service_status = #filters[].value#</isEqual>
		</iterate>				
	</select>

	<resultMap	id="mapping-defined-attrs"
				class="ru.bpc.sv2.products.ProductAttribute">
		<result property="id" column="id"/>
		<result property="systemName" column="attr_name"/>
		<result property="dataType" column="data_type"/>
		<result property="lovId" column="lov_id"/>
		<result property="displayOrder" column="display_order"/>
		<result property="attrEntityType" column="attr_entity_type"/>
		<result property="attrObjectType" column="attr_object_type"/>
		<result property="parentId" column="parent_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="lang" column="lang"/>
		<result property="label" column="label"/>
		<result property="fullDesc" column="description"/>
		<result property="scaleId" column="scale_id"/>
		<result property="scaleName" column="scale_name"/>
		<result property="productId" column="product_id"/>
		<result property="serviceId" column="service_id"/>
		<result property="defLevel" column="definition_level"/>
		<result property="serviceStatus" column="service_status"/>		
	</resultMap>

	<select id="get-defined-attrs"
			parameterClass="qparams" resultMap="mapping-defined-attrs" fetchSize="500">
		select distinct
	  		  a.id
	        , a.attr_name
	        , a.data_type
	        , a.lov_id
	        , a.display_order
	        , a.attr_entity_type
	        , a.parent_id
	        , a.entity_type
	        , a.lang
	        , a.label
	        , a.description
	        , a.scale_id
	        , a.scale_name
	        , a.product_id
	        , a.object_id
	        , a.service_id
	        , a.definition_level
	        , a.service_status
	        , b.attr_object_type
		from prd_ui_attribute_object_vw a
		inner join prd_ui_product_attr_value_vw b
		on a.id = b.attr_id
		and a.lang = b.lang
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="productId">b.product_id = #filters[].value#</isEqual>
		</iterate>		
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="objectId">a.object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="attrEntityType">a.attr_entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">a.lang = #filters[].value#</isEqual>
		</iterate>		
		order by a.id	
	</select>
	
	<parameterMap class="java.util.Map" id="get-inst-id-by-object-map">
		<parameter property="entity_type" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="object_id" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN" />
	</parameterMap>

	<procedure id="get-inst-id-by-object"
		parameterMap="get-inst-id-by-object-map"
		resultClass="java.lang.Integer">
		select 
		 ost_api_institution_pkg.get_object_inst_id(
			i_entity_type	=> ?
			 , i_object_id	=> ?
			)
		from dual	
	</procedure>

	<select	id="get-customer-info" parameterClass="qparams" resultClass="java.lang.String">
		select
			case
				when v.entity_type = 'ENTTCOMP' then c.label
				when v.entity_type = 'ENTTPERS' then p.first_name || ' ' || p.surname
			end as name
		from prd_ui_customer_vw v
			, com_ui_person_vw p
			, com_ui_company_vw c
		where p.id(+) = v.object_id
		and c.id(+) = v.object_id
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="customerId">v.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="customerNumber">v.customer_number like upper(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="lang">p.lang(+) = #filters[].value# and c.lang(+) = #filters[].value#</isEqual>
		</iterate>
	</select>

	<select	id="get-card-type" parameterClass="qparams" resultClass="java.lang.String">
		select t.name
		from iss_ui_card_vw c
			, net_ui_card_type_vw t
		where t.id = c.card_type_id
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="cardMask">card_mask like upper(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
		</iterate>
	</select>

	<parameterMap id="map-check-cond-service" class="java.util.Map">
		<parameter property="value" javaType="boolean" jdbcType="NUMERIC" mode="OUT" nullValue="true"/>
		<parameter property="product_id" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="service_id" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="service_count" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
	</parameterMap>

	<procedure id="check-cond-service" parameterMap="map-check-cond-service">
		{? = call prd_ui_service_pkg.check_conditional_service (
			  i_product_id		=> ?
			, i_service_id		=> ?
			, i_service_count	=> ?
		)}
	</procedure>

	<select id="get-cond-group-for-service" parameterClass="java.util.Map" resultClass="java.lang.String">
		select distinct pps.conditional_group
		  from prd_product_service_vw pps
		 where pps.service_id = #service_id#
		   and pps.product_id = #product_id#
	</select>

    <resultMap	id="mapping-object-fee-attrs"
                  class="ru.bpc.sv2.products.ProductAttribute">
        <result property="id" column="id"/>
        <result property="systemName" column="attr_name"/>
        <result property="dataType" column="data_type"/>
        <result property="lovId" column="lov_id"/>
        <result property="displayOrder" column="display_order"/>
        <result property="attrEntityType" column="attr_entity_type"/>
        <result property="attrObjectType" column="attr_object_type"/>
        <result property="parentId" column="parent_id"/>
        <result property="entityType" column="entity_type"/>
        <result property="lang" column="lang"/>
        <result property="label" column="label"/>
        <result property="fullDesc" column="description"/>
        <result property="scaleId" column="scale_id"/>
        <result property="scaleName" column="scale_name"/>
        <result property="instId" column="inst_id"/>
        <result property="productId" column="product_id"/>
        <result property="serviceId" column="service_id"/>
        <result property="defLevel" column="definition_level"/>
        <result property="serviceStatus" column="service_status"/>
        <result property="feeId" column="fee_id"/>
        <result property="feeCurrency" column="fee_currency"/>
    </resultMap>

    <select id="get-object-fee-attrs"
            parameterClass="qparams" resultMap="mapping-object-fee-attrs" fetchSize="500">
        select
             aov.id
            ,aov.attr_name
            ,aov.data_type
            ,aov.lov_id
            ,aov.display_order
            ,aov.attr_entity_type
            ,aov.attr_object_type
            ,aov.parent_id
            ,aov.entity_type
            ,aov.object_id
            ,aov.lang
            ,aov.label
            ,aov.description
            ,aov.scale_id
            ,aov.scale_name
            ,aov.inst_id
            ,aov.service_id
            ,aov.product_id
            ,aov.definition_level
            ,aov.service_status
            ,ff.id fee_id
            ,ff.currency fee_currency
        from
             prd_ui_attribute_object_vw aov
            ,fcl_fee ff
        where 1 = 1
        and  ff.id = prd_api_product_pkg.get_attr_value_number
                        (i_entity_type       => aov.entity_type
                        ,i_object_id         => aov.object_id
                        ,i_attr_name         => aov.attr_name
                        ,i_inst_id           => aov.inst_id
                        ,i_use_default_value => 1
                        ,i_default_value     => 0)
        <iterate prepend="AND" conjunction="AND" property="filters">
            <isEqual property="filters[].element" compareValue="id">aov.id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="attrName">aov.attr_name = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="dataType">aov.data_type = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="lovId">aov.lov_id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="displayOrder">aov.display_order = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="attrEntityType">aov.attr_entity_type = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="attrObjectType">aov.attr_object_type = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="parentId">aov.parent_id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="entityType">aov.entity_type = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="objectId">aov.object_id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="lang">aov.lang = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="label">aov.label = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="description">aov.description = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="scaleId">aov.scale_id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="scaleName">aov.scale_name = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="instId">aov.inst_id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="serviceId">aov.service_id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="productId">aov.product_id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="definitionLevel">aov.definition_level = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="serviceStatus">aov.service_status = #filters[].value#</isEqual>
        </iterate>
    </select>

	<select id="get-priority-products" parameterClass="qparams" resultClass="ru.bpc.sv2.products.PriorityProduct">
		<include refid="paginatedOpen"/>
		select id
			 , product_id 		   as productId
			 , parent_product_id   as parentProductId
			 , product_number	   as productNumber
			 , product_description as productDescription
			 , product_category    as productCategory
			 , product_subcategory as productSubcategory
			 , product_level3	   as productLevel3
			 , creation_date	   as creationDate
			 , product_level4	   as productLevel4
			 , product_lag		   as productLag
		from cst_ui_bsm_prior_prd_detail_vw
		<iterate prepend="where" conjunction="and" property="filters">
			<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="productNumber">upper(product_number) like upper(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="productCategory">upper(product_category) like upper(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="productSubcategory">upper(product_subcategory) like upper(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="creationDateFrom">trunc(creation_date) >= #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="creationDateTo">trunc(creation_date) &lt;= #filters[].value#</isEqual>
		</iterate>
		<isEmpty property="sorting">order by id asc</isEmpty>
		<iterate prepend="order by" conjunction="," property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="auto">
				<isEqual property="sorting[].property" compareValue="id">id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="productId">product_id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="parentProductId">parent_product_id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="productNumber">product_number $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="productDescription">product_description $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="productCategory">product_category $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="productSubcategory">product_subcategory $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="productLevel3">product_level3 $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="creationDate">creation_date $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="productLevel4">product_level4 $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="productLag">product_lag $sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-priority-products-count" parameterClass="qparams" resultClass="int">
		<include refid="limitationOpenCount"/>
		select *
		from cst_ui_bsm_prior_prd_detail_vw
		<iterate prepend="where" conjunction="and" property="filters">
			<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="productNumber">upper(product_number) like upper(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="productCategory">upper(product_category) like upper(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="productSubcategory">upper(product_subcategory) like upper(#filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="creationDateFrom">trunc(creation_date) >= #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="creationDateTo">trunc(creation_date) &lt;= #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<select id="get-account-product-currencies" parameterClass="int" resultClass="string">
		select ap.currency
		from acc_product_account_type ap
		where ap.product_id = #value#
	</select>
</sqlMap>
