<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="common">

    <!--
        Common sql configuration not included in SqlMapConfig
     -->
    <sql id="limitationOpen">
            SELECT *
            FROM (                
    </sql>
    
    <sql id="limitationOpenCount">
            SELECT count(*)
            FROM (                
    </sql>
    
    <sql id="limitationClose">               
            	) q
            <isNotNull property="limitation" prepend=" WHERE ">$limitation$</isNotNull>
    </sql>
     
    <sql id="paginatedOpen">
            SELECT *
            FROM(
                SELECT a.*, rownum r
                FROM(
		<include refid="limitationOpen"/>                   
    </sql>

    <sql id="paginatedClose">
    	<include refid="limitationClose"/>   
                    ) a
                WHERE rownum <![CDATA[<]]>= (#range.end# + 1)
            )
            WHERE r >= (#range.start# + 1)
    </sql>


	<resultMap  id="mapping-dictionary"
                class="ru.bpc.sv2.common.Dictionary"  >
        <result property="dict" column="dict" />
        <result property="id" column="id" />
        <result property="code" column="code" />
        <result property="name" column="name" />
        <result property="lang" column="lang" />
        <result property="description" column="description" />
        <result property="numeric" column="is_numeric" javaType="boolean"/>
        <result property="editable" column="is_editable" javaType="boolean"/>
        <result property="instId" column="inst_id" />
        <result property="instName" column="inst_name" />
	</resultMap>

	
	<parameterMap id="mapping-flexible-value" class="ru.bpc.sv2.common.FlexFieldData">
		<parameter property="name" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="objectId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="seqNum" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="fieldValue" jdbcType="NUMBER" mode="IN" />
	</parameterMap>

	<parameterMap id="mapping-flexible-value_v" class="ru.bpc.sv2.common.FlexFieldData">
		<parameter property="name" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="objectId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="seqNum" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="fieldValue" jdbcType="VARCHAR" mode="IN" />
	</parameterMap>

	<parameterMap id="mapping-flexible-value_n" class="ru.bpc.sv2.common.FlexFieldData">
		<parameter property="name" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="objectId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="seqNum" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="fieldValue" jdbcType="NUMBER" mode="IN" />
	</parameterMap>

	<parameterMap id="mapping-flexible-value_d" class="ru.bpc.sv2.common.FlexFieldData">
		<parameter property="name" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="objectId" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="seqNum" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="fieldValue" jdbcType="DATE" mode="IN" />
	</parameterMap>

	<resultMap  id="mapping-audit-log-details"
                class="ru.bpc.sv2.audit.TrailDetails"  >
        <result property="id" column="id" />
        <result property="trailId" column="trail_id" />
        <result property="columnName" column="column_name" />
        <result property="dataType" column="data_type" />
        <result property="oldValueV" column="old_value_v" />
        <result property="oldValueN" column="old_value_n" />
        <result property="oldValueD" column="old_value_d" />
        <result property="newValueV" column="new_value_v" />
        <result property="newValueN" column="new_value_n" />
        <result property="newValueD" column="new_value_d" />
	</resultMap>

	<resultMap  id="mapping-audit-auditable"
                class="ru.bpc.sv2.audit.AuditableObject"  >
        <result property="entityType" column="entity_type" />
        <result property="tableName" column="table_name" />
        <result property="active" column="is_active" javaType="boolean" jdbcType="NUMBER"/>
        <result property="activeNew" column="is_active" javaType="boolean" jdbcType="NUMBER"/>
        <result property="name" column="name" />
	</resultMap>

	<resultMap 	id="mapping-state-holiday"
				class="ru.bpc.sv2.common.StateHoliday">
		<result property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="cycleId" column="cycle_id"/>
		<result property="instId" column="inst_id"/>
		<result property="seqNum" column="seqnum"/>
		<result property="day" javaType="java.util.Date" jdbcType="DATE" column="day"/>
	</resultMap>

	<resultMap id="mapping-person" class="ru.bpc.sv2.common.Person">
		<result property="personId" column="person_id"/>
		<result property="lang" column="person_lang"/>
		<result property="title" column="title"/>
		<result property="firstName" column="first_name"/>
		<result property="secondName" column="second_name"/>
		<result property="surname" column="surname"/>
		<result property="suffix" column="suffix"/>
		<result property="gender" column="gender"/>
		<result property="birthday" column="birthday"/>
		<result property="placeOfBirth" column="place_of_birth"/>
		<result property="seqNum" column="person_seqnum"/>
		<result property="instId" column="inst_id"/>
	</resultMap>

	<resultMap id="mapping-currency" class="ru.bpc.sv2.common.Currency">
		<result property="id" column="id"/>
		<result property="code" column="code"/>
		<result property="name" column="name"/>
		<result property="exponent" column="exponent"/>
		<result property="seqNum" column="seqnum"/>
		<result property="currencyName" column="currency_name"/>
		<result property="lang" column="lang"/>
	</resultMap>

	<resultMap id="mapping-label" class="ru.bpc.sv2.common.Label">
		<result property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="labelType" column="label_type"/>
		<result property="moduleCode" column="module_code"/>
		<result property="lang" column="lang"/>
		<result property="text" column="text"/>
	</resultMap>

	<parameterMap id="mapping-descriptions" class="java.util.Map">
		<parameter property="id" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="lang" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="shortDesc" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="fullDesc" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
	</parameterMap>

	<parameterMap id="mapping-description-modifiable" class="java.util.Map">
		<parameter property="id" javaType="java.lang.Long" jdbcType="NUMERIC" mode="INOUT"/>
		<parameter property="lang" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="shortDesc" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="fullDesc" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="modify" javaType="boolean" jdbcType="NUMBER" mode="IN"/>
	</parameterMap>

	<resultMap class="ru.bpc.sv2.common.rates.RateType" id="mapping-rate-type">
		<result property="id" column="id"/> 
		<result property="seqNum" column="seqnum"/> 
		<result property="rateType" column="rate_type"/> 
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst_name"/>
		<result property="useCrossRate" column="use_cross_rate"/> 
		<result property="useBaseRate" column="use_base_rate"/> 
		<result property="isReversible" column="is_reversible"/> 
		<result property="warningLevel" column="warning_level"/> 
		<result property="useDoubleTyping" column="use_double_typing"/> 
		<result property="useVerification" column="use_verification"/> 
		<result property="adjustExponent" column="adjust_exponent"/> 
		<result property="baseCurrency" column="base_currency"/> 
		<result property="expPeriod" column="exp_period"/> 
		<result property="roundingAccuracy" column="rounding_accuracy"/> 
	</resultMap>

	<resultMap class="ru.bpc.sv2.common.rates.RatePair" id="mapping-rate-pair">
		<result property="id" column="id"/> 
		<result property="seqNum" column="seqnum"/> 
		<result property="rateType" column="rate_type"/> 
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst_name"/>  
		<result property="srcCurrency" column="src_currency"/> 
		<result property="dstCurrency" column="dst_currency"/> 
		<result property="baseRateType" column="base_rate_type"/> 
		<result property="baseRateFormula" column="base_rate_formula"/>
		<result property="inputMode" column="input_mode"/> 
		<result property="srcScale" column="src_scale"/> 
		<result property="dstScale" column="dst_scale"/> 
		<result property="inverted" column="inverted" nullValue="false"/>
		<result property="displayOrder" column="display_order"/>
		<result property="rateExample" column="rate_example"/>
		<result property="label" column="label"/>
	</resultMap>

	<parameterMap id="check-rate-param-map" class="ru.bpc.sv2.common.rates.Rate">
		<parameter property="validated" javaType="boolean" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="srcCurrency" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="dstCurrency" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="rateType" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="instId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN" />
		<parameter property="effDate" javaType="java.util.Date" jdbcType="DATE" mode="IN" />
		<parameter property="rate" javaType="java.lang.Double" jdbcType="NUMERIC" mode="IN" />
		<parameter property="inverted" javaType="boolean" jdbcType="NUMBER" mode="IN" />
		<parameter property="srcScale" javaType="java.lang.Double" jdbcType="NUMERIC" mode="IN" />
		<parameter property="dstScale" javaType="java.lang.Double" jdbcType="NUMERIC" mode="IN" />
		<parameter property="message" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
	</parameterMap>
	
	<resultMap id="mapping-dictionary-module" class="ru.bpc.sv2.common.Dictionary" extends="mapping-dictionary">
		<result property="moduleCode" column="module_code"/>
	</resultMap>

	<select id="get-dictionaries"
	    	parameterClass="qparams"
	    	resultMap="mapping-dictionary-module" >
		<include refid="paginatedOpen"/>
			SELECT 	
					d.id
					, d.dict
					, d.code
	                , d.name
	                , d.description
	                , d.is_numeric
	                , d.is_editable
	                , d.lang
	                , d.inst_id
	                , i.name inst_name
	                , d.module_code
	        FROM 
	        	com_ui_dictionary_vw d
	        	, ost_ui_institution_sys_vw i
	        WHERE 
	        	d.inst_id = i.id(+)
	        	AND d.lang = i.lang(+)
            <iterate prepend=" AND " conjunction="AND " property="filters">
            	<isEqual property="filters[].element" compareValue="id">d.id = #filters[].value#</isEqual>
            	<isEqual property="filters[].element" compareValue="lang">d.lang = #filters[].value#</isEqual>
            	<isEqual property="filters[].element" compareValue="dict">d.dict = #filters[].value#</isEqual>
            	<isEqual property="filters[].element" compareValue="code">d.code like #filters[].value#</isEqual>
            	<isEqual property="filters[].element" compareValue="instId">d.inst_id IN (9999, #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(d.name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="description">upper(d.description) like #filters[].value#</isEqual>
            </iterate>
            <iterate prepend="ORDER BY" conjunction=", " property="sorting">
                <isNotEqual property="sorting[].direction" compareValue="AUTO">
                	<isEqual property="sorting[].property" compareValue="code">d.code $sorting[].direction$</isEqual>
                	<isEqual property="sorting[].property" compareValue="name">d.name $sorting[].direction$</isEqual>
                	<isEqual property="sorting[].property" compareValue="instName">i.name $sorting[].direction$</isEqual>
                	<isEqual property="sorting[].property" compareValue="description">d.description $sorting[].direction$</isEqual>
                </isNotEqual>
			</iterate>
        <include refid="paginatedClose"/>
	</select>

	<select id="get-dictionaries-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
        SELECT * FROM com_ui_dictionary_vw
        <iterate prepend="WHERE " conjunction="AND " property="filters">
        	<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
        	<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
  			<isEqual property="filters[].element" compareValue="dict">dict = #filters[].value#</isEqual>
  			<isEqual property="filters[].element" compareValue="code">code like #filters[].value#</isEqual>
  			<isEqual property="filters[].element" compareValue="instId">inst_id IN (9999, #filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(name) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="description">upper(description) like #filters[].value#</isEqual>
        </iterate>
        <include refid="limitationClose"/>
    </select>

     <procedure id="insert-new-dictionary"
            parameterClass="ru.bpc.sv2.common.Dictionary">
       	{call COM_UI_DICTIONARY_PKG.add_dictionary(
				  i_code      	=> #code#
				, i_short_desc	=> #name#
				, i_lang      	=> #lang#
				, i_is_numeric	=> #numeric#
				, i_is_editable	=> #editable#
				)}
    </procedure>
    
    <procedure id="insert-new-article"
            parameterClass="ru.bpc.sv2.common.Dictionary">
       	{call COM_UI_DICTIONARY_PKG.add_article(
				  i_dict      	=> #dict#
				, i_code      	=> #code#
				, i_short_desc	=> #name#
				, i_full_desc 	=> #description#
				, i_lang      	=> #lang#
				, i_is_numeric	=> #numeric#
				, i_is_editable	=> #editable#
				, i_module_code => #moduleCode#
				)}
    </procedure>

	<procedure id="modify-article"
            parameterClass="ru.bpc.sv2.common.Dictionary">
       	{call COM_UI_DICTIONARY_PKG.modify_article(  
				  i_dict      	=> #dict#
				, i_code      	=> #code#
				, i_short_desc	=> #name#
				, i_full_desc 	=> #description#
				, i_lang      	=> #lang#
                , i_module_code => #moduleCode#
				)}
    </procedure>
    
    <procedure id="delete-article"
            parameterClass="ru.bpc.sv2.common.Dictionary">
       	{call COM_UI_DICTIONARY_PKG.remove_article(
		       	  i_dict		=> #dict#
				, i_code		=> #code#
				)}
    </procedure>

    <parameterMap id="mapDml" class="java.util.Map">
        <parameter property="code" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
        <parameter property="ref" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT"/>
    </parameterMap>

    <resultMap class="java.lang.String" id="resMapDml">
    	<result property="result"/>
    </resultMap>

    <procedure id="get-dml"
            parameterMap="mapDml" resultMap="resMapDml">
        	{call com_api_dictionary_pkg.get_dictionary_dml(?, ? )}
    </procedure>

    <select
	    id="get-articles-by-dict"
	    parameterClass="string"
	    resultMap="mapping-dictionary" fetchSize="100">
	        SELECT 	
					d.id
					, d.dict
					, d.code
	                , d.name
	                , d.description
	                , d.is_numeric
	                , d.is_editable
	                , d.lang
	                , d.inst_id
	                , i.name inst_name
	        FROM 
	        	com_ui_dictionary_vw d
	        	, ost_ui_institution_sys_vw i
	        WHERE 
	        	d.inst_id = i.id(+)
	        	AND d.lang = i.lang(+)
	            AND d.dict=#value#
	            AND d.lang = com_ui_user_env_pkg.get_user_lang
                    ORDER BY code ASC
	</select>

    <select
	    id="get-all-articles"
	    parameterClass="string"
	    resultMap="mapping-dictionary" fetchSize="7000">
	    	SELECT 	
					d.id
					, d.dict
					, d.code
	                , d.name
	                , d.description
	                , d.is_numeric
	                , d.is_editable
	                , d.lang
	                , d.inst_id
	                , null inst_name	            
	        FROM 
	        	com_ui_dictionary_all_vw d	        	
	        WHERE 
	        	d.lang = #value#
            ORDER BY dict ASC, code ASC
	</select>
	
	<select
	    id="get-articles-by-dict-no-context"
	    parameterClass="java.lang.String"
	    resultClass="java.lang.String" >
	    	SELECT 	
				dict||code as code		                	            
	        FROM 
	        	com_dictionary_vw d	        	
	        WHERE 
	        	d.dict = #value#
            ORDER BY dict ASC, code ASC
	</select>

	<!-- Logging -->
	<resultMap  id="mapping-audit-trail"
                class="ru.bpc.sv2.audit.AuditTrail">
        <result property="id" column="id"/>
        <result property="entityType" column="entity_type"/>
        <result property="objectId" column="object_id"/>
        <result property="actionType" column="action_type"/>
        <result property="actionDate" column="action_time"/>
        <result property="userId" column="user_id"/>
        <result property="privId" column="priv_id"/>
        <result property="sessionId" column="session_id"/>
        <result property="status" column="status"/>
        <result property="userName" column="user_name"/>
        <result property="privName" column="priv_name"/>
		<result property="objectNumber" column="object_number"/>
	</resultMap>

    <select
        id="get-audit-trails"
        parameterClass="qparams"
        resultMap="mapping-audit-trail">
        <include refid="paginatedOpen"/>
	        SELECT 
				t.id
				, t.entity_type
				, t.object_id
				, t.action_type
				, t.action_time
				, t.user_id
				, t.priv_id
				, t.session_id
				, t.status
				, u.user_name
				, p.short_desc AS priv_name
				, t.object_number
			FROM adt_ui_trail_vw t, acm_ui_user_vw u, acm_ui_privilege_vw p
			WHERE t.user_id = u.user_id(+) AND t.priv_id = p.id(+)
					AND u.lang(+) = com_ui_user_env_pkg.get_user_lang
					AND p.lang(+) = com_ui_user_env_pkg.get_user_lang
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">t.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">t.entity_type = #filters[].value#</isEqual>				
				<isEqual property="filters[].element" compareValue="objectId">t.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="actionType">t.action_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="actionDateFrom">t.action_time >= #filters[].value#</isEqual>
			 	<isEqual property="filters[].element" compareValue="actionDateTo">t.action_time <![CDATA[<=]]>  #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="userId">t.user_id like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="privId">t.priv_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="sessionId">t.session_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="status">t.status = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="userName">u.user_name LIKE #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">t.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="entityType">t.entity_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="actionType">t.action_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="actionDate">t.action_time $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="userId">t.user_id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="privName">priv_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="sessionId">t.session_id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="status">t.status $sorting[].direction$</isEqual>					
					<isEqual property="sorting[].property" compareValue="userName">user_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="objectNumber">t.object_number $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="objectId">t.object_id $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
		<include refid="paginatedClose"/>
    </select>

    <select
        id="get-audit-trails-count"
        parameterClass="qparams"
        resultClass="int">
        <include refid="limitationOpenCount"/>
        SELECT t.id 
		FROM adt_ui_trail_vw t, acm_ui_user_vw u, acm_ui_privilege_vw p
		WHERE t.user_id = u.user_id(+) AND t.priv_id = p.id(+)
				AND u.lang(+) = com_ui_user_env_pkg.get_user_lang
				AND p.lang(+) = com_ui_user_env_pkg.get_user_lang
        	<iterate prepend="AND" conjunction="AND" property="filters">
        		<isEqual property="filters[].element" compareValue="id">t.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">t.entity_type = #filters[].value#</isEqual>				
				<isEqual property="filters[].element" compareValue="objectId">t.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="actionType">t.action_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="actionDateFrom">t.action_time >= #filters[].value#</isEqual>
			 	<isEqual property="filters[].element" compareValue="actionDateTo">t.action_time <![CDATA[<=]]> #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="userId">t.user_id like #filters[].value#</isEqual>				
				<isEqual property="filters[].element" compareValue="privId">t.priv_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="sessionId">t.session_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="status">t.status = #filters[].value#</isEqual>				
				<isEqual property="filters[].element" compareValue="userName">u.user_name LIKE #filters[].value#</isEqual>				
			</iterate>
		<include refid="limitationClose"/>
    </select>

    <select  id="get-trail-details" parameterClass="Long" resultMap="mapping-audit-log-details">
		SELECT
			  a.id
			, a.trail_id
			, a.column_name
			, a.data_type
			, CASE
				WHEN a.column_name = 'CARD_NUMBER' AND a.old_char_value IS NOT NULL
				THEN iss_api_card_pkg.get_card_mask(i_card_number => a.old_char_value)
				ELSE a.old_char_value
			  END old_value_v
			, a.old_number_value old_value_n
			, a.old_date_value old_value_d
			, CASE
				WHEN a.column_name = 'CARD_NUMBER' AND a.new_char_value IS NOT NULL
				THEN iss_api_card_pkg.get_card_mask(i_card_number => a.new_char_value)
				ELSE a.new_char_value
			  END new_value_v
			, a.new_number_value new_value_n
			, a.new_date_value new_value_d
		FROM
			  adt_ui_detail_vw a
		WHERE
			  a.trail_id = #value#
    </select>

	<!-- Audit -->
    <select	id="get-auditables"
			parameterClass="qparams"
			resultMap="mapping-audit-auditable">
		<include refid="paginatedOpen"/>
	        SELECT 	
	        	entity_type 
	        	, table_name
	        	, is_active
	        	, name
	        FROM 	
	        	adt_ui_entity_vw
	        <iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="entityType">upper(entity_type) like #filters[].value#</isEqual>				
				<isEqual property="filters[].element" compareValue="name">upper(name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="tableName">upper(table_name) like #filters[].value#</isEqual>				
			</iterate>
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="entityType">entity_type $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="tableName">table_name $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="active">is_active $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="name">name $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
       <include refid="paginatedClose"/>
    </select>

    <select	id="get-auditables-count"
			parameterClass="qparams"
			resultClass="int">
			<include refid="limitationOpenCount"/>
	        SELECT 
	        	entity_type 
	        FROM 
	        	adt_ui_entity_vw
	        <iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="entityType">upper(entity_type) like #filters[].value#</isEqual>				
				<isEqual property="filters[].element" compareValue="name">upper(name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="tableName">upper(table_name) like #filters[].value#</isEqual>				
			</iterate>
			<include refid="limitationClose"/>
    </select>

    <procedure
    	id="change-auditable-status"
    	parameterClass="ru.bpc.sv2.audit.AuditableObject">
    	{call ADT_UI_ENTITY_PKG.modify_status(
    			  i_entity_type		=> #entityType#
				, io_audit_status	=> #active,mode=INOUT,jdbcType=NUMERIC,javaType=java.lang.Boolean#
				)}
    </procedure>

	<!-- Holidays -->
	<resultMap  id="mapping-week"
                class="ru.bpc.sv2.common.Week"  >
        <result property="month" column="mm" />
        <result property="year" column="yy" />
        <result property="weekNum" column="week_num" />
        <result property="monday" column="mon" />
        <result property="tuesday" column="tue" />
        <result property="wednesday" column="wed" />
        <result property="thursday" column="thu" />
        <result property="friday" column="fri" />
        <result property="saturday" column="sat" />
        <result property="sunday" column="sun" />
        <result property="mondayHoliday" column="mon_holiday" />
        <result property="tuesdayHoliday" column="tue_holiday" />
        <result property="wednesdayHoliday" column="wed_holiday" />
        <result property="thursdayHoliday" column="thu_holiday" />
        <result property="fridayHoliday" column="fri_holiday" />
        <result property="saturdayHoliday" column="sat_holiday" />
        <result property="sundayHoliday" column="sun_holiday" />
	</resultMap>
	
	<parameterMap class="java.util.HashMap" id="mapping-week-parameters">
		<parameter property="year" jdbcType="VARCHAR"/>
		<parameter property="instId" javaType="java.lang.Integer" jdbcType="NUMERIC"/>
	</parameterMap>
	
	<select id="get-weeks"
        	parameterMap="mapping-week-parameters"
        	resultMap="mapping-week">
        SELECT 
        		  yy
		       	, mm
				, mon
				, mon_holiday
				, tue
				, tue_holiday
				, wed
				, wed_holiday
				, thu
				, thu_holiday
				, fri
				, fri_holiday
				, sat
				, sat_holiday
				, sun
				, sun_holiday
				, week_num
        FROM 
        	com_ui_holiday_calendar_vw 
        WHERE 	
        	yy = ?
        	AND inst_id = ?
        ORDER BY
			mm ASC, week_num ASC
    </select>
    
    <parameterMap class="java.util.HashMap" id="mapping-week-in-month-parameters">
		<parameter property="year" jdbcType="VARCHAR"/>
		<parameter property="month" jdbcType="VARCHAR"/>
		<parameter property="instId" javaType="java.lang.Integer" jdbcType="NUMERIC"/>
	</parameterMap>
	
    <select id="get-weeks-in-month"
	        parameterMap="mapping-week-in-month-parameters"
	        resultMap="mapping-week">
        SELECT 
	        	  yy
	        	, mm
				, mon
				, mon_holiday
				, tue
				, tue_holiday
				, wed
				, wed_holiday
				, thu
				, thu_holiday
				, fri
				, fri_holiday
				, sat
				, sat_holiday
				, sun
				, sun_holiday
				, week_num
        FROM 
        	com_ui_holiday_calendar_vw 
        WHERE 	
        	yy = ?
        	AND mm = ?
        	AND inst_id = ?
        ORDER BY 
        	mm ASC, week_num ASC
    </select>

	<select id="get-state-holidays"
	        parameterClass="qparams"
	        resultClass="ru.bpc.sv2.common.StateHoliday">
	    <include refid="paginatedOpen"/>
	        SELECT	
	        		  sh.id
	        		, sh.cycle_id as cycleId
	        		, sh.inst_id as instId
	        		, sh.seqnum as seqNum
	        		, sh.day
	        		, sh.name
	        		, i.name as instName
			FROM 
					  com_ui_state_holiday_vw sh
					, ost_ui_institution_vw i
			WHERE sh.inst_id = i.id(+)
				AND i.lang(+) = COM_UI_USER_ENV_PKG.get_user_lang
		<include refid="paginatedClose"/>
    </select>

	<select id="get-state-holidays-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
        	SELECT * FROM com_ui_state_holiday_vw
        <include refid="limitationClose"/>
    </select>

    <procedure id="add-state-holiday"
    		parameterClass="ru.bpc.sv2.common.StateHoliday">
    	{call COM_UI_HOLIDAY_PKG.add_state_holday(
				  o_state_holiday_id	=> #id,jdbcType=NUMERIC,mode=OUT#
				, i_cycle_id			=> #cycleId#
				, i_short_desc			=> #name#
				, i_lang				=> #lang#
				, i_inst_id				=> #instId#
				)}
    </procedure>

    <procedure id="edit-state-holiday"
    		parameterClass="ru.bpc.sv2.common.StateHoliday">
    	{call COM_UI_HOLIDAY_PKG.modify_state_holday(
				  i_state_holiday_id	=> #id#
				, i_cycle_id			=> #cycleId#
				, i_short_desc			=> #name#
				, i_lang				=> #lang#
				)}
    </procedure>


    <procedure id="remove-state-holiday"
    		parameterClass="int">
    	{call COM_UI_HOLIDAY_PKG.remove_state_holday(
				  i_state_holiday_id	=> #value#
				)}
    </procedure>

	<parameterMap class="java.util.HashMap" id="mapping-add-remove-holiday">
		<parameter property="date" javaType="java.util.Date" jdbcType="DATE"/>
		<parameter property="instId" javaType="java.lang.Integer" jdbcType="NUMERIC"/>
	</parameterMap>
	
    <procedure
    	id="add-remove-holiday"
    	parameterMap="mapping-add-remove-holiday">
    	{call COM_UI_HOLIDAY_PKG.add_remove_holiday(  i_holiday_date =>?
													, i_inst_id		 =>?
													)}
    </procedure>

	<select id="get-calendar-years"
        	parameterClass="qparams"
        	resultClass="String">
		SELECT DISTINCT yy 
		FROM com_ui_holiday_calendar_vw 
		WHERE 
        		inst_id = COM_UI_USER_ENV_PKG.GET_USER_INST
            	AND mm = '01'
            	AND week_num = 1
        ORDER BY yy
    </select>

    <!-- Settlement days -->
    <resultMap 	id="mapping-settlement-day" class="ru.bpc.sv2.common.SettlementDay">
		<result property="id" column="id"/>
		<result property="sttlDay" column="sttl_day"/>
		<result property="sttlDate" column="sttl_date" javaType="java.util.Date" jdbcType="DATE"/>
		<result property="openDate" column="open_timestamp" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
		<result property="isOpen" column="is_open"/>
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst_name"/>
		<result property="seqNum" column="seqnum"/>
	</resultMap>
	
	<select id="get-settlement-days" 
			resultMap="mapping-settlement-day" 
	    	parameterClass="qparams">
		<include refid="paginatedOpen"/>
            SELECT 
              	sd.ID
				, sd.inst_id
				, sd.sttl_day
				, sd.sttl_date
				, sd.open_timestamp
				, sd.is_open
				, sd.seqnum
				, i.name inst_name
			FROM 
				com_ui_settlement_day_vw sd, ost_ui_institution_sys_vw i
			WHERE
				sd.inst_id = i.id(+)
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">sd.id like #filters[].value#</isEqual>				
				<isEqual property="filters[].element" compareValue="lang">i.lang(+) = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">sd.inst_id IN (#filters[].value#, 9999)</isEqual>
				<isEqual property="filters[].element" compareValue="sttlDateFrom">sd.sttl_date >= TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
			 	<isEqual property="filters[].element" compareValue="sttlDateTo">sd.sttl_date <![CDATA[<=]]>  TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>				
			</iterate>
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">sd.id $sorting[].direction$</isEqual>
	                <isEqual property="sorting[].property" compareValue="sttlDay">sd.sttl_day $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="sttlDate">sd.sttl_date $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="openDate">sd.open_timestamp $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="instName">i.name $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="open">sd.is_open $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
		<include refid="paginatedClose"/>
	</select>

    <select id="get-settlement-days-count"
        	parameterClass="qparams"
        	resultClass="int">
        	<include refid="limitationOpenCount"/>
		    SELECT 
		       	sd.id 
		    FROM 
		    	com_ui_settlement_day_vw sd
		    <iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">sd.id like #filters[].value#</isEqual>				
				<isEqual property="filters[].element" compareValue="instId">sd.inst_id IN (#filters[].value#, 9999)</isEqual>
				<isEqual property="filters[].element" compareValue="sttlDateFrom">sd.sttl_date >= TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
			 	<isEqual property="filters[].element" compareValue="sttlDateTo">sd.sttl_date <![CDATA[<=]]>  TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>				
			</iterate>       
			<include refid="limitationClose"/>
    </select>

	<parameterMap id="mapLov" class="java.util.Map">
		<parameter property="ref" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT"/>
        <parameter property="lov_id" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
    </parameterMap>

    <resultMap class="ru.bpc.sv2.utils.KeyLabelItem" id="resMapLov">
    	<result property="value" column="code" javaType="java.lang.String" jdbcType="VARCHAR"/>
    	<result property="label" column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
    </resultMap>

    <procedure id="get-lov"
            parameterMap="mapLov" resultMap="resMapLov">
       	{call COM_UI_LOV_PKG.get_lov(
				  o_ref_cur		=> ?  
				, i_lov_id   	=> ?
				, i_param_map	=> NULL
				)}
    </procedure>
    
    <procedure id="get-array"
            parameterMap="mapLov" resultMap="resMapLov">
       	{call COM_UI_ARRAY_PKG.get_array_elements(
				  o_ref_cur		=> ?  
				, i_array_id   	=> ?
				)}
    </procedure>
    
    <parameterMap id="mapParamLov" class="java.util.Map">
		<parameter property="ref" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT"/>
        <parameter property="lov_id" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
        <parameter property="params" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
        <parameter property="whereClause" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="appearance" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
    </parameterMap>
    
    <procedure id="get-param-lov"
            parameterMap="mapParamLov" resultMap="resMapLov">
       	{call COM_UI_LOV_PKG.get_lov(
       			  o_ref_cur		=> ?  
				, i_lov_id   	=> ?
				, i_param_map	=> ?
				, i_add_where	=> ?
				, i_appearance	=> ?
				)}
    </procedure>

	<parameterMap id="mapParamLovValue" class="java.util.Map">
		<parameter property="value" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="lov_id" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="key" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
        <parameter property="params" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
    </parameterMap>
    
    <procedure id="get-lov-value"
            parameterMap="mapParamLovValue" resultMap="resMapLov">
       	{? = call COM_UI_LOV_PKG.get_name(
       			  i_lov_id   	=> ?
       			, i_code	   	=> ?
				, i_param_map	=> ?
				)}
    </procedure>
    
    <procedure id="add-address"
    		parameterClass="ru.bpc.sv2.common.Address">
		{call COM_UI_ADDRESS_PKG.add_address(
				  o_address_id	=> #addressId,jdbcType=NUMERIC,mode=OUT# 
				, o_seqnum		=> #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_lang       	=> #lang#
				, i_country    	=> #country#
				, i_region     	=> #region#
				, i_city       	=> #city#
				, i_street     	=> #street#
				, i_house      	=> #house#
				, i_apartment  	=> #apartment#
				, i_postal_code	=> #postalCode#
				, i_region_code	=> #regionCode#
				, i_latitude    => #latitude#
				, i_longitude   => #longitude#
				, i_inst_id     => null
				, i_place_code =>  #placeCode#
				)}
    </procedure>

    <procedure id="edit-address"
    		parameterClass="ru.bpc.sv2.common.Address">
    	{call COM_UI_ADDRESS_PKG.modify_address(
    			  i_address_id	=> #addressId#
				, io_seqnum		=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
				, i_country		=> #country#
				, i_region		=> #region#
				, i_city		=> #city#
				, i_street		=> #street#
				, i_house		=> #house#
				, i_apartment	=> #apartment#
				, i_postal_code	=> #postalCode#
				, i_region_code	=> #regionCode#
				, i_lang		=> #lang#
				, i_latitude    => #latitude#
				, i_longitude   => #longitude#
				, i_inst_id     => null
				, i_place_code =>  #placeCode#
				)}
    </procedure>

	<procedure id="remove-address"
    		parameterClass="ru.bpc.sv2.common.Address">
    	{call COM_UI_ADDRESS_PKG.remove_address(
    			  i_address_id	=> #addressId#
				, i_seqnum 		=> #seqNum#
				)}
    </procedure>
    
    <procedure id="remove-address-object"
    		parameterClass="ru.bpc.sv2.common.Address">
    	{call COM_UI_ADDRESS_PKG.remove_address_object(
    			  i_address_object_id 	=> #addressObjectId#												
				)}
    </procedure>
	
    <procedure id="add-address-relation"
    		parameterClass="ru.bpc.sv2.common.Address">
    	{call COM_UI_ADDRESS_PKG.add_address_object(
    			  i_address_id			=> #addressId#
				, i_address_type		=> #addressType#
				, i_entity_type			=> #entityType#
				, i_object_id			=> #objectId#
				, o_address_object_id	=> #addressObjectId,jdbcType=NUMERIC,mode=OUT#
				)}
    </procedure>

	<resultMap id="mapping-address" class="ru.bpc.sv2.common.Address">
		<result property="addressId" column="id"/>
		<result property="lang" column="lang"/>
		<result property="country" column="country"/>
		<result property="region" column="region"/>
		<result property="city" column="city"/>
		<result property="street" column="street"/>
		<result property="house" column="house"/>
		<result property="apartment" column="apartment"/>
		<result property="postalCode" column="postal_code"/>
		<result property="regionCode" column="region_code"/>
		<result property="seqNum" column="seqnum"/>
		<result property="addressType" column="address_type"/>
		<result property="addressString" column="address_string"/>
		<result property="countryName" column="country_name"/>
		<result property="coordLink" column="coord_link"/>
		<result property="coordLabel" column="coord_label"/>
		<result property="latitude" column="latitude"/>
		<result property="longitude" column="longitude"/>
	</resultMap>
	
	<resultMap id="mapping-address-object" class="ru.bpc.sv2.common.Address" extends="mapping-address">
		<result property="addressObjectId" column="address_object_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="objectId" column="object_id"/>
		<result property="placeCode" column="place_code"/>
	</resultMap>

	<select id="get-addresses"
			parameterClass="qparams"
			resultMap="mapping-address-object">
		<include refid="limitationOpen"/>
        SELECT 
                  a.*
                , c.country_name
        FROM (
            SELECT DISTINCT
                      decode(s.id, null, aa.id, s.id) id
                    , decode(s.id, null, aa.lang, s.lang) lang
                    , decode(s.id, null, aa.country, s.country) country
                    , decode(s.id, null, aa.region, s.region) region
                    , decode(s.id, null, aa.city, s.city) city
                    , decode(s.id, null, aa.street, s.street) street
                    , decode(s.id, null, aa.house, s.house) house
                    , decode(s.id, null, aa.apartment, s.apartment) apartment
                    , decode(s.id, null, aa.postal_code, s.postal_code) postal_code
                    , decode(s.id, null, aa.region_code, s.region_code) region_code
                    , decode(s.id, null, aa.seqnum, s.seqnum) seqnum
                    , decode(s.id, null, aa.address_string, s.address_string) address_string
                    , decode(s.id, null, aa.coord_link, s.coord_link) coord_link
                    , decode(s.id, null, aa.coord_label, s.coord_label) coord_label
                    , decode(s.id, null, aa.latitude, s.latitude) latitude
                    , decode(s.id, null, aa.longitude, s.longitude) longitude
                    , decode(s.id, null, aa.place_code, s.place_code) place_code
                    , s.address_type
                    , s.entity_type
                    , s.object_id        
                    , s.address_object_id
			FROM (
				SELECT
						  decode(u.id, null, d.id, u.id) id
						, decode(u.id, null, d.lang, u.lang) lang
						, decode(u.id, null, d.country, u.country) country
						, decode(u.id, null, d.region, u.region) region
						, decode(u.id, null, d.city, u.city) city
						, decode(u.id, null, d.street, u.street) street
						, decode(u.id, null, d.house, u.house) house
						, decode(u.id, null, d.apartment, u.apartment) apartment
						, decode(u.id, null, d.postal_code, u.postal_code) postal_code
						, decode(u.id, null, d.region_code, u.region_code) region_code
						, decode(u.id, null, d.seqnum, u.seqnum) seqnum
						, decode(u.id, null, d.address_string, u.address_string) address_string
						, decode(u.id, null, d.coord_link, u.coord_link) coord_link
                   		, decode(u.id, null, d.coord_label, u.coord_label) coord_label
	                    , decode(u.id, null, d.latitude, u.latitude) latitude
    	                , decode(u.id, null, d.longitude, u.longitude) longitude
    	                , decode(u.id, null, d.place_code, u.place_code) place_code
						, o.address_type
						, o.entity_type
						, o.object_id		
						, o.id address_object_id
						, o.address_id
				FROM
						com_ui_address_object_vw o
						, com_ui_address_vw d
						, com_ui_address_vw u
				WHERE
						o.address_id = d.id(+)
						AND d.lang(+) = com_ui_user_env_pkg.get_user_lang
			        	AND o.address_id = u.id(+) 

		         <iterate prepend=" AND " conjunction="AND " property="filters">
		        	<isEqual property="filters[].element" compareValue="relationId">o.id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="objectId">o.object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="entityType">o.entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="addressType">o.address_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="currentLang">u.lang(+) = #filters[].value#</isEqual>
                    <isEqual property="filters[].element" compareValue="typeIdPairs">(o.entity_type, o.object_id) IN ($filters[].value$) </isEqual>

		        </iterate>
            ) s, com_ui_address_vw aa 
            WHERE
                    s.address_id = aa.id(+)
		) a
		LEFT JOIN com_ui_country_vw c
			ON a.country = c.code
			AND a.lang = c.lang 
        <iterate prepend="WHERE" conjunction="AND " property="filters">
			<isEqual property="filters[].element" compareValue="addressString">upper(a.address_string) LIKE #filters[].value#</isEqual>
		</iterate>
        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="addressType">a.address_type $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="addressString">upper(a.address_string) $sorting[].direction$</isEqual>
			</isNotEqual>
        </iterate>
        <include refid="limitationClose"/>
	</select>

	<select id="get-address-langs"
			parameterClass="Long"
			resultClass="String">
		SELECT lang FROM com_ui_address_vw
		WHERE id = #addressId#
	</select>

	<resultMap  id="mapping-country"
                class="ru.bpc.sv2.common.Country">
        <result property="id" column="id"/>
        <result property="seqNum" column="seqnum"/>
        <result property="code" column="code"/>
        <result property="name" column="name"/>
        <result property="lang" column="lang"/>
        <result property="currCode" column="curr_code"/>
        <result property="visaCountryCode" column="visa_country_code"/>
        <result property="mastercardRegion" column="mastercard_region"/>
        <result property="mastercardEurozone" column="mastercard_eurozone"/>
        <result property="countryName" column="country_name"/>
        <!--<result property="visaRegion" column="visa_region"/>-->
	</resultMap>

    <select id="get-countries" 
    		parameterClass="qparams"
    		resultMap="mapping-country" fetchSize="1000">
		<include refid="paginatedOpen"/>
	    	SELECT
	    			  id
	    			, seqnum
	    			, code
	    			, name
	    			, lang
	    			, curr_code
	    			, visa_country_code
	    			, mastercard_region
	    			, mastercard_eurozone
	    			, country_name
                    <!--, visa_region-->
	    	FROM com_ui_country_vw
	   		<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>				<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="code">code = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">name LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="countryName">upper(country_name) LIKE #filters[].value#</isEqual>
	   		</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="code">code $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="name">name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="countryName">upper(country_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="currCode">curr_code $sorting[].direction$</isEqual>
				</isNotEqual>
	       	</iterate>
	       	<isEmpty property="sorting">
	       		ORDER BY code, country_name ASC
	       	</isEmpty>
		<include refid="paginatedClose"/>
    </select>

   	<select id="get-countries-count"
   			parameterClass="qparams"
   			resultClass="int">
   		<include refid="limitationOpenCount"/>
   		SELECT * FROM com_ui_country_vw
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="code">code = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">name LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="countryName">upper(country_name) LIKE #filters[].value#</isEqual>
   		</iterate>
   		<include refid="limitationClose"/>
   	</select>

    <select id="get-country-name"
    		parameterClass="ru.bpc.sv2.common.Country"
    		resultClass="String">
    	SELECT 
    		country_name 
    	FROM
    		com_ui_country_vw 
    	WHERE 
    		code = #code# 
    		AND lang = #lang#
    </select>

    <procedure id="add-country" parameterClass="ru.bpc.sv2.common.Country">
        {call COM_UI_COUNTRY_PKG.add_country(
        o_country_id            => #id,jdbcType=NUMERIC,mode=OUT#
        , i_code                => #code#
        , i_name                => #name#
        , i_curr_code           => #currCode#
        , i_visa_country_code   => #visaCountryCode#
        , i_mastercard_region   => #mastercardRegion#
        , i_mastercard_eurozone => #mastercardEurozone#
        , i_description         => #countryName#
        , i_visa_region         => #visaRegion#
        , i_lang                => #lang#
        )}
    </procedure>

    <procedure id="modify-country"
               parameterClass="ru.bpc.sv2.common.Country">
        {call COM_UI_COUNTRY_PKG.modify_country(
        i_country_id            => #id#
        , i_code                => #code#
        , i_name                => #name#
        , i_curr_code           => #currCode#
        , i_visa_country_code   => #visaCountryCode#
        , i_mastercard_region   => #mastercardRegion#
        , i_mastercard_eurozone => #mastercardEurozone#
        , i_visa_region         => #visaRegion#
        , i_description         => #countryName#
        , i_lang                => #lang#
        )}
    </procedure>

    <procedure id="remove-country"
               parameterClass="ru.bpc.sv2.common.Country">
        {call COM_UI_COUNTRY_PKG.remove_country(
        i_country_id		=> #id#
        )}
    </procedure>


    <select id="get-all-descriptions"
    	resultClass="String">
    		select short_desc from COM_DESCRIPTION_VW
    </select>

	<parameterMap id="contact-relation-map" class="java.util.Map">
		<parameter property="contactId" javaType="Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="entityType" javaType="String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="contactType" javaType="String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="objectId" javaType="Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="relationId" javaType="Long" jdbcType="NUMERIC" mode="OUT"/>
	</parameterMap>

    <procedure id="add-contact"
    		parameterClass="ru.bpc.sv2.common.Contact">
    	{call COM_UI_CONTACT_PKG.add_contact(
    			  o_contact_id	=> #id,jdbcType=NUMERIC,mode=OUT#
				, i_job_title	=> #jobTitle#
				, i_person_id	=> #personId#
				, i_pref_lang   => #preferredLang#
				, o_seqnum		=> #seqNum,jdbcType=NUMERIC,mode=OUT#
				)}
    </procedure>

    <procedure id="add-contact-relation"
    		parameterMap="contact-relation-map">
    	{call COM_UI_CONTACT_PKG.add_contact_object(
    			  i_contact_id			=> ?
				, i_entity_type			=> ?
				, i_contact_type		=> ?
				, i_object_id			=> ?
				, o_contact_object_id	=> ?
				)}
    </procedure>

    <procedure id="modify-contact"
    		parameterClass="ru.bpc.sv2.common.Contact">
    	{call COM_UI_CONTACT_PKG.modify_contact(
    			  i_contact_id	=> #id#
				, i_job_title	=> #jobTitle#
				, i_person_id	=> #personId#
				, i_pref_lang   => #preferredLang#
				, io_seqnum		=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
   				)}
    </procedure>

    <procedure id="remove-contact-object"
    		parameterClass="ru.bpc.sv2.common.Contact">
    	{call COM_UI_CONTACT_PKG.remove_contact_object(
    			  i_contact_object_id	=> #relationId#
				)}
    </procedure>
    
     <procedure id="remove-contact"
    		parameterClass="ru.bpc.sv2.common.Contact">
    	{call COM_UI_CONTACT_PKG.remove_contact(
    			  i_contact_id	=> #id#
    			  , i_seqnum	=> #seqNum#
				)}
    </procedure>

	<resultMap id="mapping-contact" class="ru.bpc.sv2.common.Contact">
		<result property="id" column="id"/>
		<result property="contactType" column="contact_type"/>
		<result property="seqNum" column="seqnum"/>
		<result property="preferredLang" column="preferred_lang"/>
		<result property="relationId" column="relation_id"/>
		<result property="jobTitle" column="job_title"/>
		<result property="instId" column="inst_id"/>
		<result property="person" resultMap="common.mapping-person"/>
	</resultMap>
	
	<select id="get-contacts"
			parameterClass="qparams"
			resultMap="mapping-contact">
		<include refid="limitationOpen"/>
			SELECT 
					co.contact_id id
					, co.contact_type
					, co.seqnum
					, co.preferred_lang 
					, co.contact_object_id as relation_id
					, co.job_title
					, co.inst_id
					, co.person_id
					, p.lang person_lang
					, p.first_name
					, p.second_name
					, p.surname
					, p.title
					, p.suffix
					, p.gender
					, p.birthday
					, p.seqnum person_seqnum
					, p.place_of_birth	        
			FROM com_ui_contact_object_vw co
			LEFT JOIN prd_customer x ON 
				x.id = co.object_id 
				AND co.entity_type = 'ENTTCUST' 
				AND x.entity_type = 'ENTTPERS'
			LEFT JOIN 
			     (SELECT p.*
			           , row_number() over (partition by id order by decode(p.lang,  #lang# , 0, 'LANGENG', 1, 2)) row_num
			        FROM com_ui_person_vw p
			     ) p ON
			 	p.id  = nvl(co.person_id, x.object_id)
	    		AND p.row_num   = 1
	        <iterate prepend=" WHERE " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="relationId">co.contact_object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">co.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">co.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="contactType">co.contact_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="jobTitle">co.job_title = #filters[].value#</isEqual>	
	        </iterate>
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="jobTitle">co.job_title $sorting[].direction$</isEqual>
	                <isEqual property="sorting[].property" compareValue="contactType">co.contact_type $sorting[].direction$</isEqual>
	            	<isEqual property="sorting[].property" compareValue="personSurname">co.surname $sorting[].direction$</isEqual>	                                
				</isNotEqual>
	        </iterate>
        <include refid="limitationClose"/>
	</select>

	<select id="get-contacts-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
			SELECT 
				co.contact_object_id
			FROM
	            com_ui_contact_object_vw co    
	       <iterate prepend=" WHERE " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="relationId">co.contact_object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">co.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">co.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="contactType">co.contact_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="jobTitle">co.job_title = #filters[].value#</isEqual>	
	        </iterate>
        <include refid="limitationClose"/>       
	</select>
	
	<resultMap id="mapping-contact-data" class="ru.bpc.sv2.common.ContactData">
		<result property="id" column="id"/>
		<result property="contactId" column="contact_id"/>
		<result property="type" column="commun_method"/>
		<result property="address" column="commun_address"/>
		<result property="startDate" column="start_date"/>
		<result property="endDate" column="end_date"/>				
	</resultMap>
	
	<select id="get-contact-datas"
			parameterClass="qparams"
			resultMap="mapping-contact-data">
		<include refid="limitationOpen"/>
			SELECT 
					co.contact_data_id id
					, co.contact_id
					, co.commun_method
					, co.commun_address
					, co.start_date
					, co.end_date						        
			FROM com_ui_contact_data_vw co
			<iterate prepend=" WHERE " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="id">co.contact_data_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="contactId">co.contact_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="address">co.commun_address = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="type">co.commun_method = #filters[].value#</isEqual>	
				<isEqual property="filters[].element" compareValue="activeOnly">(co.start_date <![CDATA[<=]]> com_api_sttl_day_pkg.get_sysdate AND (co.end_date <![CDATA[>=]]> com_api_sttl_day_pkg.get_sysdate OR co.end_date is NULL))</isEqual>
	        </iterate>
	        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
	            <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="type">co.commun_method $sorting[].direction$</isEqual>                
	                <isEqual property="sorting[].property" compareValue="startDate">co.start_date $sorting[].direction$</isEqual>
	                <isEqual property="sorting[].property" compareValue="endDate">co.end_date $sorting[].direction$</isEqual>
	                <isEqual property="sorting[].property" compareValue="address">co.commun_address $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
        <include refid="limitationClose"/>
	</select>

	<select id="get-contact-datas-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
			SELECT 
				co.contact_data_id id
			FROM
	            com_ui_contact_data_vw co
	       <iterate prepend=" WHERE " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="id">co.contact_data_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="contactId">co.contact_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="address">co.commun_address = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="type">co.commun_method = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="activeOnly">(co.start_date <![CDATA[<=]]> com_api_sttl_day_pkg.get_sysdate AND (co.end_date <![CDATA[>=]]> com_api_sttl_day_pkg.get_sysdate OR co.end_date is NULL))</isEqual>
	        </iterate>
        <include refid="limitationClose"/>       
	</select>

    <procedure id="add-contact-data"
    		parameterClass="ru.bpc.sv2.common.ContactData">
    	{call COM_UI_CONTACT_PKG.add_contact_data(
    			  o_id				=> #id,jdbcType=NUMERIC,mode=OUT#
				, i_contact_id    	=> #contactId#
				, i_commun_method 	=> #type#
				, i_commun_address	=> #address#
				, i_start_date    	=> #startDate#
				, i_end_date    	=> #endDate#
				)}
    </procedure>

    <procedure id="modify-contact-data"
    		parameterClass="ru.bpc.sv2.common.ContactData">
    	{call COM_UI_CONTACT_PKG.modify_contact_data(
    			i_id              	=> #id#
				, i_contact_id    	=> #contactId#
				, i_commun_method 	=> #type#
				, i_commun_address	=> #address#
				, i_start_date    	=> #startDate#
				, i_end_date    	=> #endDate#
   				)}
    </procedure>

    <procedure id="remove-contact-data"
    		parameterClass="ru.bpc.sv2.common.ContactData">
    	{call COM_UI_CONTACT_PKG.remove_contact_data(
    			  i_id	=> #id#
				)}
    </procedure>

	<select id="get-persons"
			parameterClass="qparams"
			resultMap="mapping-person">
       <include refid="paginatedOpen"/>
			SELECT 
                     id person_id
                    , lang person_lang
                    , first_name
                    , second_name
                    , surname
					, title
					, suffix
					, gender
					, birthday
					, place_of_birth
					, seqnum person_seqnum
					, inst_id
           	FROM
			(
				SELECT
				    p.*
				    , row_number() over (partition by id order by decode(p.lang, com_ui_user_env_pkg.get_user_lang, 0, 'LANGENG', 1, 2)) row_num
				FROM
				    com_ui_person_vw p
			)
			WHERE			    
			    row_num = 1
			<iterate prepend=" AND " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="personId">id LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="firstName">upper(first_name) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="secondName">upper(second_name) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="surname">upper(surname) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="birthday">trunc(birthday) = TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="personId">id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="firstName">first_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="secondName">second_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="surname">surname $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="birthday">birthday $sorting[].direction$</isEqual>
				</isNotEqual>
        	</iterate>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-persons-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT 
			id
          	FROM
		(
			SELECT
			    p.*
			    , row_number() over (partition by id order by decode(p.lang, com_ui_user_env_pkg.get_user_lang, 0, 'LANGENG', 1, 2)) row_num
			FROM
			    com_ui_person_vw p
		)
		WHERE			    
		    row_num = 1		
		<iterate prepend=" AND " conjunction="AND " property="filters">
			<isEqual property="filters[].element" compareValue="personId">id LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="firstName">upper(first_name) LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="secondName">upper(second_name) LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="surname">upper(surname) LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="birthday">trunc(birthday) = TO_DATE(#filters[].value#, 'DD.MM.YYYY')</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<select id="get-person-by-id"
			parameterClass="ru.bpc.sv2.common.Person"
			resultMap="mapping-person">
		SELECT 
                     id person_id
                    , lang person_lang
                    , first_name
                    , second_name
                    , surname
					, title
					, suffix
					, gender
					, birthday
					, place_of_birth
					, seqnum person_seqnum
					, inst_id
           	FROM
			(
				SELECT
				    p.*
				    , row_number() over (partition by id order by decode(p.lang, #lang#, 0, 'LANGENG', 1, 2)) row_num
				FROM
				    com_ui_person_vw p
			)
			WHERE			    
			    row_num = 1
			    AND id = #personId#
	</select>

	<select id="get-person-langs"
			parameterClass="long"
			resultClass="String">
		SELECT lang FROM com_ui_person_vw
		WHERE id = #personId#
	</select>

    <procedure id="add-person"
    		parameterClass="ru.bpc.sv2.common.Person">
    	{call COM_UI_PERSON_PKG.add_person(
				  o_person_id		=> #personId,jdbcType=NUMERIC,mode=OUT#
				, i_lang			=> #lang#
				, i_title			=> #title#
				, i_first_name		=> #firstName#
				, i_second_name		=> #secondName#
				, i_surname			=> #surname#
				, i_suffix			=> #suffix#
				, i_gender			=> #gender#
				, i_birthday		=> #birthday,javaType=java.util.Date,jdbcType=TIMESTAMP#
				, i_place_of_birth	=> #placeOfBirth#
				)}
    </procedure>

    <procedure id="modify-person"
    		parameterClass="ru.bpc.sv2.common.Person">
    	{call COM_UI_PERSON_PKG.modify_person(
				  i_person_id		=> #personId#
				, i_title			=> #title#
				, i_first_name		=> #firstName#
				, i_second_name		=> #secondName#
				, i_surname			=> #surname#
				, i_suffix			=> #suffix#
				, i_gender			=> #gender#
				, i_birthday		=> #birthday#
				, i_seqnum			=> #seqNum#
				, i_lang			=> #lang#
				, i_place_of_birth	=> #placeOfBirth#
				)}
    </procedure>

    <procedure id="remove-person"
    		parameterClass="ru.bpc.sv2.common.Person">
    	{call COM_UI_PERSON_PKG.remove_person(
				  i_person_id		=> #personId#
				, i_seqnum			=> #seqNum# 
				)}
    </procedure>

	<select id="get-object-ids"
			parameterClass="qparams"
			resultClass="ru.bpc.sv2.common.PersonId">
		<include refid="paginatedOpen"/>
			SELECT
					  id
					, object_id as objectId
					, entity_type as entityType
					, id_type as idType
					, id_series as idSeries
					, id_number as idNumber
					, id_issuer as idIssuer
					, id_issue_date as issueDate
					, id_expire_date as expireDate
					, seqnum as seqNum
					, description
					, lang
			FROM 
        		com_ui_id_object_vw
			<iterate prepend="WHERE" conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="idType">id_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="idSeries">upper(id_series) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="idNumber">upper(id_number) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="idIssuer">upper(id_issuer) like #filters[].value#</isEqual>				
				<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">f.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="entityType">f.name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="idType">id_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="idSeries">id_series $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="idNumber">id_number $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="idIssuer">id_issuer $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="issueDate">id_issue_date $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="expireDate">id_expire_date $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting">
	       		ORDER BY id DESC
	       	</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-object-ids-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT 
			* 
		FROM 
        	com_ui_id_object_vw
		<iterate prepend="WHERE" conjunction="AND " property="filters">
			<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="objectId">object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="idType">id_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="idSeries">upper(id_series) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="idNumber">upper(id_number) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="idIssuer">upper(id_issuer) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>				
		</iterate>
		<include refid="limitationClose"/>
	</select>

    <procedure id="add-object-id"
    		parameterClass="ru.bpc.sv2.common.PersonId">
    	{call COM_UI_ID_OBJECT_PKG.add_id_object(
		    	  o_id             => #id,jdbcType=NUMERIC,mode=OUT#
		    	, o_seqnum         => #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_entity_type    => #entityType#
				, i_object_id      => #objectId#
				, i_id_type        => #idType#
				, i_id_series      => #idSeries#
				, i_id_number      => #idNumber#
				, i_id_issuer      => #idIssuer#
				, i_id_issue_date  => #issueDate#
				, i_id_expire_date => #expireDate#
				, i_id_desc        => #description#
				, i_lang           => #lang#
				, i_inst_id        => #instId#
				)}
    </procedure>

    <procedure id="modify-object-id"
    		parameterClass="ru.bpc.sv2.common.PersonId">
    	{call COM_UI_ID_OBJECT_PKG.modify_id_object(
		    	  i_id             => #id#
		    	, io_seqnum        => #seqNum,jdbcType=NUMERIC,mode=INOUT#
				, i_id_type        => #idType#
				, i_id_series      => #idSeries#
				, i_id_number      => #idNumber#
				, i_id_issuer      => #idIssuer#
				, i_id_issue_date  => #issueDate#
				, i_id_expire_date => #expireDate#
				, i_id_desc        => #description#
				, i_lang           => #lang#
				)}
    </procedure>

	<parameterMap class="java.util.Map" id="remove-object-id-map">
    	<parameter property="id" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
    	<parameter property="seqNum" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
    </parameterMap>
    
    <procedure id="remove-object-id"
    		parameterMap="remove-object-id-map">
    	{call COM_UI_ID_OBJECT_PKG.remove_id_object(
    			  i_id             => ?
    			, i_seqnum         => ?
    			)}
    </procedure>

	<resultMap class="ru.bpc.sv2.common.FlexField" id="mapping-parameter">
		<result property="dataType" column="data_type" />
        <result property="dataFormat" column="data_format" />
        <result property="lovId" column="lov_id" />
	</resultMap>
	
	<resultMap  id="mapping-flex-field"
                class="ru.bpc.sv2.common.FlexField" extends="mapping-parameter" >
        <result property="id" column="id" />
        <result property="systemName" column="name" />
        <result property="name" column="label" />
        <result property="lang" column="lang" />
        <result property="dataType" column="data_type" />
        <result property="description" column="description" />        
        <result property="entityType" column="entity_type" />
        <result property="objectType" column="object_type" />
        <result property="lovName" column="lov_name" />
        <result property="userDefined" column="is_user_defined" javaType="boolean" nullValue="false"/>
        <result property="instId" column="inst_id" />
        <result property="instName" column="inst_name" />
        <result property="defaultNumberValue" column="default_value_n" />
        <result property="defaultCharValue" column="default_value_v" />
        <result property="defaultDateValue" column="default_value_d" />
        <result property="defaultLovValue" column="default_lov_value" />
	</resultMap>
	
	<select id="get-flex-fields"
	    	parameterClass="qparams"
	    	resultMap="mapping-flex-field" >
	    <include refid="paginatedOpen"/>
		SELECT
				  f.id
				, f.entity_type
				, f.object_type
				, f.name
				, f.label
				, f.description
				, f.lang
				, f.data_type
				, f.data_format
				, f.lov_id
				, f.is_user_defined
				, f.inst_id
				, f.default_number_value default_value_n
			    , f.default_char_value default_value_v
			    , f.default_date_value default_value_d
			    , f.default_lov_value default_lov_value
				, i.name inst_name
				, l.name lov_name
		FROM 
              	  com_ui_flexible_field_vw f 
              	, ost_ui_institution_sys_vw i 
              	, com_ui_lov_vw l
		WHERE
              	f.inst_id = i.id(+)
              	AND f.lov_id = l.id(+)
              	AND l.lang(+)=f.lang
				AND i.lang(+)=f.lang
			<iterate prepend="AND" conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="id">f.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">f.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">f.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectType">f.object_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="dataType">f.data_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="systemName">upper(f.name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(f.label) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">f.inst_id = #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">f.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="systemName">f.name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="name">f.label $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="dataType">f.data_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="objectType">f.object_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="entityType">f.entity_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="instName">i.name $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-flex-fields-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
        SELECT 
        	f.id 
        FROM 
        	com_ui_flexible_field_vw f
		<iterate prepend="WHERE" conjunction="AND " property="filters">
			<isEqual property="filters[].element" compareValue="id">f.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">f.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">f.entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="objectType">f.object_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="dataType">f.data_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="systemName">upper(f.name) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(f.label) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">f.inst_id = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
    </select>

	<resultMap  id="mapping-flex-field-data"
                class="ru.bpc.sv2.common.FlexFieldData"  >
        <result property="dataId" column="id" />
        <result property="fieldId" column="field_id" />
        <result property="entityType" column="entity_type" />
        <result property="objectType" column="object_type" />
        <result property="objectId" column="object_id" />
        <result property="systemName" column="name" />
        <result property="name" column="label" />
        <result property="description" column="description" />
        <result property="dataType" column="data_type" />
        <result property="dataFormat" column="data_format" />
        <result property="lovId" column="lov_id" />
        <result property="userDefined" column="is_user_defined" javaType="boolean" nullValue="false"/>
        <result property="instId" column="inst_id" />
        <result property="seqNum" column="seq_number" />
        <result property="fieldValue" column="field_value" />
        <result property="lovValue" column="lov_value"/>
        <result property="valueV" column="value_v" />
        <result property="valueN" column="value_n" />
        <result property="valueD" column="value_d" />
        <result property="defaultValue" column="default_value" />
        <result property="defaultNumberValue" column="default_value_n" />
        <result property="defaultCharValue" column="default_value_v" />
        <result property="defaultDateValue" column="default_value_d" />
        <result property="defaultLovValue" column="default_lov_value" />
	</resultMap>
	
	<select id="get-flex-fields-data"
	    	parameterClass="qparams"
	    	resultMap="mapping-flex-field-data" >
	    <include refid="limitationOpen"/>
		SELECT
				  d.id
				, f.id field_id 
			    , f.entity_type
			    , f.object_type
			    , d.object_id
			    , f.name
				, f.label
				, f.description
			    , f.data_type
			    , f.data_format
			    , f.lov_id
			    , f.is_user_defined
			    , f.inst_id
			    , f.default_value
			    , nvl(d.seq_number, 1) seq_number
			    , d.field_value
			    , nvl(d.field_char_value,f.default_char_value) value_v
			    , nvl(d.field_number_value,f.default_number_value) value_n
			    , nvl(d.field_date_value,f.default_date_value) value_d
			    , nvl(d.field_lov_value,f.default_lov_value) lov_value
			    , f.default_number_value default_value_n
			    , f.default_char_value default_value_v
			    , f.default_date_value default_value_d
			    , f.default_lov_value default_lov_value
			    
		FROM
				  com_ui_flexible_field_vw f
			    , com_ui_flexible_data_vw d
		WHERE
		    	d.entity_type(+) = f.entity_type
		    	and d.field_id(+) = f.id
			<iterate prepend=" AND " conjunction=" AND " property="filters">
	            <isEqual property="filters[].element" compareValue="id">d.id = #filters[].value#</isEqual>
	            <isEqual property="filters[].element" compareValue="description">upper(f.description) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">f.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectType">(f.object_type IS NULL OR f.object_type = #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">d.object_id(+) = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(f.name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">f.inst_id in ('9999', #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="lang">f.lang = #filters[].value# AND d.lang(+) = #filters[].value#</isEqual>					
				<isEqual property="filters[].element" compareValue="defaultValue">f.default_value = #filters[].value#</isEqual>			
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="name">f.label $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="description">f.description $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="defaultValue">f.default_value $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting">
	       		ORDER BY f.label ASC
	       	</isEmpty>
		<include refid="limitationClose"/>
	</select>

	<select id="get-flex-fields-data-with-child-entities"
	    	parameterClass="qparams"
	    	resultMap="mapping-flex-field-data" >
	    <include refid="limitationOpen"/>
		SELECT
				  d.id
				, f.id field_id 
			    , f.entity_type
			    , f.object_type
			    , d.object_id
			    , f.name
				, f.label
				, f.description
			    , f.data_type
			    , f.data_format
			    , f.lov_id
			    , f.is_user_defined
			    , f.inst_id
			    , f.default_value
			    , nvl(d.seq_number, 1) seq_number
			    , d.field_value
			    , nvl(d.field_char_value,f.default_char_value) value_v
			    , nvl(d.field_number_value,f.default_number_value) value_n
			    , nvl(d.field_date_value,f.default_date_value) value_d
			    , nvl(d.field_lov_value,f.default_lov_value) lov_value
			    , f.default_number_value default_value_n
			    , f.default_char_value default_value_v
			    , f.default_date_value default_value_d
			    , f.default_lov_value default_lov_value
			    
		FROM
				  com_ui_flexible_field_vw f
			    , com_ui_flexible_data_vw d
		WHERE
		    	d.entity_type(+) = f.entity_type
		    	and d.field_id(+) = f.id
			<iterate prepend=" AND " conjunction=" AND " property="filters">
	            <isEqual property="filters[].element" compareValue="id">d.id = #filters[].value#</isEqual>
	            <isEqual property="filters[].element" compareValue="description">upper(f.description) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">f.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectType">(f.object_type IS NULL OR f.object_type = #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">d.object_id(+) = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(f.name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">f.inst_id in ('9999', #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="lang">f.lang = #filters[].value# AND d.lang(+) = #filters[].value#</isEqual>					
				<isEqual property="filters[].element" compareValue="defaultValue">f.default_value = #filters[].value#</isEqual>			
			</iterate>			
		UNION		
				SELECT
				  d.id
				, f.id field_id 
			    , f.entity_type
			    , f.object_type
			    , d.object_id
			    , f.name
				, f.label
				, f.description
			    , f.data_type
			    , f.data_format
			    , f.lov_id
			    , f.is_user_defined
			    , f.inst_id
			    , f.default_value
			    , nvl(d.seq_number, 1) seq_number
			    , d.field_value
			    , nvl(d.field_char_value,f.default_char_value) value_v
			    , nvl(d.field_number_value,f.default_number_value) value_n
			    , nvl(d.field_date_value,f.default_date_value) value_d
			    , nvl(d.field_lov_value,f.default_lov_value) lov_value
			    , f.default_number_value default_value_n
			    , f.default_char_value default_value_v
			    , f.default_date_value default_value_d
			    , f.default_lov_value default_lov_value
			    
		FROM
				  com_ui_flexible_field_vw f
			    , com_ui_flexible_data_vw d
		WHERE
		    	d.entity_type(+) = f.entity_type
		    	and d.field_id(+) = f.id
			<iterate prepend=" AND " conjunction=" AND " property="filters">
	            <isEqual property="filters[].element" compareValue="childEntityId">d.id = #filters[].value#</isEqual>
	            <isEqual property="filters[].element" compareValue="childEntityDescription">upper(f.description) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityEntityType">f.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityObjectType">(f.object_type IS NULL OR f.object_type = #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityObjectId">d.object_id(+) = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityName">upper(f.name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityInstId">f.inst_id in ('9999', #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="lang">f.lang = #filters[].value# AND d.lang(+) = #filters[].value#</isEqual>					
				<isEqual property="filters[].element" compareValue="childEntityDefaultValue">f.default_value = #filters[].value#</isEqual>			
			</iterate>
			
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="name">label $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="description">description $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="defaultValue">default_value $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>			
			<isEmpty property="sorting">
	       		ORDER BY label ASC
	       	</isEmpty>
		<include refid="limitationClose"/>
	</select>

	<select id="get-flex-fields-data-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT *
		FROM 
				com_ui_flexible_field_vw f
				, com_ui_flexible_data_vw d
		WHERE
				d.entity_type(+) = f.entity_type
			    AND d.field_id(+) = f.id
			<iterate prepend=" AND " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="id">d.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="shortDesc">lower(f.description) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">f.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectType">(f.object_type IS NULL OR f.object_type = #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">d.object_id(+) = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">f.name like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">f.inst_id in ('9999', #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="lang">f.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="defaultValue">f.default_value = #filters[].value#</isEqual>
			</iterate>
		<include refid="limitationClose"/>
    </select>
    
    <select id="get-flex-fields-data-with-child-entities-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT *
		FROM 
				com_ui_flexible_field_vw f
				, com_ui_flexible_data_vw d
		WHERE
				d.entity_type(+) = f.entity_type
			    AND d.field_id(+) = f.id
			<iterate prepend=" AND " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="id">d.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="shortDesc">lower(f.description) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">f.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectType">f.object_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">d.object_id(+) = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">f.name like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">f.inst_id in ('9999', #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="lang">f.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="defaultValue">f.default_value = #filters[].value#</isEqual>
			</iterate>
		UNION
		SELECT *
		FROM 
				com_ui_flexible_field_vw f
				, com_ui_flexible_data_vw d
		WHERE
				d.entity_type(+) = f.entity_type
			    AND d.field_id(+) = f.id
			<iterate prepend=" AND " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="childEntityId">d.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityShortDesc">lower(f.description) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityEntityType">f.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityObjectType">f.object_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityObjectId">d.object_id(+) = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityName">f.name like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntityInstId">f.inst_id in ('9999', #filters[].value#)</isEqual>
				<isEqual property="filters[].element" compareValue="lang">f.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="childEntitydefaultValue">f.default_value = #filters[].value#</isEqual>
			</iterate>
		
		<include refid="limitationClose"/>
    </select>

    <procedure id="set-flexible-value_v"
    		parameterClass="ru.bpc.sv2.common.FlexFieldData">
    	{call COM_UI_FLEXIBLE_DATA_PKG.set_flexible_value_v(
    			  i_field_name	=> #systemName#
				, i_object_id  	=> #objectId#
				, i_seq_number 	=> #seqNum#
				, i_field_value	=> #valueV#
				, i_entity_type	=> #entityType#
				)}
    </procedure>

    <procedure id="set-flexible-value_n"
    		parameterClass="ru.bpc.sv2.common.FlexFieldData">
    	{call COM_UI_FLEXIBLE_DATA_PKG.set_flexible_value_n(
    			  i_field_name	=> #systemName#
				, i_object_id  	=> #objectId#
				, i_seq_number 	=> #seqNum#
				, i_field_value	=> #valueN#
				, i_entity_type	=> #entityType#
				)}
    </procedure>

    <procedure id="set-flexible-value_d"
    		parameterClass="ru.bpc.sv2.common.FlexFieldData">
    	{call COM_UI_FLEXIBLE_DATA_PKG.set_flexible_value_d(
    			  i_field_name	=> #systemName#
				, i_object_id  	=> #objectId#
				, i_seq_number 	=> #seqNum#
				, i_field_value	=> #valueD#
				, i_entity_type	=> #entityType#
				)}
    </procedure>

    <select id="get-entity-types" resultClass="String">
    	SELECT entity_type FROM adt_ui_entity_vw
    </select>

    <select id="get-currencies" 
    		parameterClass="qparams"
    		resultMap="mapping-currency" fetchSize="1000">
		<include refid="paginatedOpen"/>
	    	SELECT	  id
		    		, code
		    		, name
		    		, exponent
	    			, seqnum
	    			, currency_name
	    			, lang
	    	FROM com_ui_currency_vw
	   		<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="code">code = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">name LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="currencyName">upper(currency_name) LIKE #filters[].value#</isEqual>
	   		</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="code">code $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="name">name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="currencyName">upper(currency_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="exponent">exponent $sorting[].direction$</isEqual>
				</isNotEqual>
	       	</iterate>
	       	<isEmpty property="sorting">
	       		ORDER BY name
	       	</isEmpty>
		<include refid="paginatedClose"/>
    </select>

   	<select id="get-currencies-count"
   			parameterClass="qparams"
   			resultClass="int">
   		<include refid="limitationOpenCount"/>
   		SELECT * FROM com_ui_currency_vw
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="code">code = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">name LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="currencyName">upper(currency_name) LIKE #filters[].value#</isEqual>
   		</iterate>
   		<include refid="limitationClose"/>
   	</select>
   	
   	<procedure id="add-currency" parameterClass="ru.bpc.sv2.common.Currency">
		{call COM_UI_CURRENCY_PKG.add_currency(
			o_id                => #id,jdbcType=NUMERIC,mode=OUT#
			, o_seqnum          => #seqNum,jdbcType=NUMERIC,mode=OUT#
			, i_code            => #code#
			, i_name            => #name#
			, i_exponent        => #exponent#
			, i_lang            => #lang#
			, i_currency_name   => #currencyName#
		)}
	</procedure>
	
	<procedure id="modify-currency"
			parameterClass="ru.bpc.sv2.common.Currency">
		{call COM_UI_CURRENCY_PKG.modify_currency(
			i_id             	=> #id#
			, io_seqnum      	=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
			, i_code            => #code#
			, i_name            => #name#
			, i_exponent        => #exponent#
			, i_lang            => #lang#
			, i_currency_name   => #currencyName#
		)}
	</procedure>
	
	<procedure id="remove-currency"
    		parameterClass="ru.bpc.sv2.common.Currency">
    	{call COM_UI_CURRENCY_PKG.remove_currency(
			i_id		=> #id#      
			, i_seqnum	=> #seqNum#
		)}
    </procedure>

    <select id="get-entity-type-objects"
    		resultClass="ru.bpc.sv2.audit.EntityType">
    	SELECT entity_type as entityType,
    			table_name as tableName,
    			is_active as active,
    			name as name
    	FROM adt_ui_entity_vw
   	</select>

   	<select id="get-labels"
   			parameterClass="qparams"
   			resultMap="mapping-label">
		<include refid="paginatedOpen"/>
	   		SELECT
	   				id
	   				, name
	   				, label_type
	   				, module_code
	   				, lang
	   				, text
	   		FROM com_ui_label_vw
	   		<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="text">upper(text) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="labelType">label_type = #filters[].value#</isEqual>
	   		</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="name">upper(name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="text">upper(text) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="labelType">label_type $sorting[].direction$</isEqual>
				</isNotEqual>
	       	</iterate>
		<include refid="paginatedClose"/>
   	</select>

   	<select id="get-labels-count"
   			parameterClass="qparams"
   			resultClass="int">
   		<include refid="limitationOpenCount"/>
   		SELECT * FROM com_ui_label_vw
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="text">upper(text) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(name) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="labelType">label_type = #filters[].value#</isEqual>
   		</iterate>
   		<include refid="limitationClose"/>
   	</select>

   	<select id="get-captions"
   			parameterClass="qparams"
   			resultMap="mapping-label">
		<include refid="paginatedOpen"/>
	   		SELECT	  id
	   				, name
	   				, label_type
	   				, module_code
	   				, lang
	   				, text
	   		FROM com_ui_caption_vw
	   		<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="text">upper(text) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">name like #filters[].value#</isEqual>
	   		</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="name">name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="text">text $sorting[].direction$</isEqual>
				</isNotEqual>
	       	</iterate>
		<include refid="paginatedClose"/>
   	</select>

   	<select id="get-captions-count"
   			parameterClass="qparams"
   			resultClass="int">
   		<include refid="limitationOpenCount"/>
   		SELECT * FROM com_ui_caption_vw
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="text">upper(text) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">name like #filters[].value#</isEqual>
   		</iterate>
   		<include refid="limitationClose"/>
   	</select>

   	<procedure  id="add-label"
   				parameterClass="ru.bpc.sv2.common.Label">
   		{call COM_API_LABEL_PKG.register_label(
				  i_name 		=> #name#
				, i_label_type 	=> #labelType#
				, i_lang 		=> #lang#
				, i_module_code	=> #moduleCode#
				, i_short_desc 	=> #text#
				, i_full_desc 	=> null
				)}
   	</procedure>

   	<select id="get-label-by-id"
   			parameterClass="ru.bpc.sv2.common.Label"
   			resultMap="mapping-label">
   		SELECT	  id
   				, name
   				, label_type
   				, module_code
   				, lang
   				, text
   		FROM com_ui_label_vw
		WHERE id = #id# 
			AND lang = #lang#
   	</select>

	<parameterMap id="mapping-flexible-field" class="ru.bpc.sv2.common.FlexField">
		<parameter property="fieldId" javaType="Long" jdbcType="NUMERIC" mode="INOUT"/>
		<parameter property="entityType" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="objectType" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="name" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="description" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="lang" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="dataType" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="dataFormat" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="lovId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN" />
		<parameter property="instId" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
	</parameterMap>
	
    <procedure id="add-flex-field"
    		parameterClass="ru.bpc.sv2.common.FlexField">
    	{call COM_UI_FLEXIBLE_DATA_PKG.add_flexible_field(
				  o_field_id	=> #id,jdbcType=NUMERIC,mode=OUT#
				, i_entity_type => #entityType#
				, i_object_type => #objectType#
				, i_name        => #systemName#
				, i_label       => #name#
				, i_description => #description#
				, i_lang        => #lang#
				, i_data_type   => #dataType#
				, i_lov_id      => #lovId#
				, i_inst_id     => #instId#
				, i_default_value_char => #defaultCharValue#
				, i_default_value_num  => #defaultNumberValue#
				, i_default_value_date => #defaultDateValue#
				)}
    </procedure>
    
    <procedure id="modify-flex-field"
    		parameterClass="ru.bpc.sv2.common.FlexField">
    	{call COM_UI_FLEXIBLE_DATA_PKG.modify_flexible_field(
				  i_field_id	=> #id#
				, i_entity_type => #entityType#
				, i_object_type => #objectType#
				, i_name        => #systemName#
				, i_label		=> #name#
				, i_description	=> #description#
				, i_lang        => #lang#
				, i_data_type   => #dataType#
				, i_lov_id      => #lovId#
				, i_default_value_char => #defaultCharValue#
				, i_default_value_num  => #defaultNumberValue#
				, i_default_value_date => #defaultDateValue#
				)}
    </procedure>

	<procedure id="delete-flex-field"
    		parameterClass="ru.bpc.sv2.common.FlexField">
    	{call COM_UI_FLEXIBLE_DATA_PKG.remove_flexible_field(
				  i_field_id	=> #id#
				)}
    </procedure>
    
	<resultMap id="mapping-menu"
				class="ru.bpc.sv2.common.MenuNode">
		<result property="id" column="id"/>
		<result property="parentId" column="parent_id"/>
		<result property="action" column="action"/>
		<result property="type" column="type"/>
		<result property="name" column="caption"/>
		<result property="displayOrder" column="display_order"/>
		<result property="managedBeanName" column="managed_bean_name"/>
		<result property="level" column="rec_level"/>
		<result property="isLeaf" column="is_leaf" javaType="boolean"/>
	</resultMap>

	<resultMap id="mapping-menu-all"
			   class="ru.bpc.sv2.common.MenuNode">
		<result property="id" column="id"/>
		<result property="parentId" column="parent_id"/>
		<result property="action" column="action"/>
		<result property="type" column="type"/>
		<result property="name" column="caption"/>
		<result property="displayOrder" column="display_order"/>
		<result property="managedBeanName" column="managed_bean_name"/>
		<result property="visible" column="is_visible" />
		<result property="level" column="rec_level"/>
		<result property="isLeaf" column="is_leaf" javaType="boolean"/>
	</resultMap>

	<select id="get-menu"
			resultMap="mapping-menu">
        SELECT 
            id
            , parent_id
            , action
            , section_type type
            , caption
            , lang
            , display_order
            , managed_bean_name
            , level rec_level
            , CONNECT_BY_ISLEAF as is_leaf
        FROM acm_cu_section_vw
            START WITH parent_id is null
                AND lang = com_ui_user_env_pkg.get_user_lang
            CONNECT BY PRIOR id = parent_id 
                AND lang = com_ui_user_env_pkg.get_user_lang
            ORDER SIBLINGS by display_order	
	</select>
	
	<select id="get-menus"
	    	parameterClass="qparams"
	    	resultMap="mapping-menu">
		<include refid="paginatedOpen"/>
			SELECT 	
				  id
	            , parent_id
	            , action
	            , section_type type
	            , caption
	            , lang
	            , display_order
	            , managed_bean_name
	            , level rec_level
	            , CONNECT_BY_ISLEAF as is_leaf
	        FROM 
	        	acm_ui_section_vw	        	
	        WHERE 
            <iterate conjunction="AND " property="filters">
            	<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
            	<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
            	<isEqual property="filters[].element" compareValue="parentId">parent_id = #filters[].value#</isEqual>
            	<isEqual property="filters[].element" compareValue="action">action like #filters[].value#</isEqual>
            	<isEqual property="filters[].element" compareValue="type">section_type like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="caption">caption like #filters[].value#</isEqual>
            </iterate>
            <iterate prepend="ORDER BY" conjunction=", " property="sorting">
                <isNotEqual property="sorting[].direction" compareValue="AUTO">
                	<isEqual property="sorting[].property" compareValue="action">action $sorting[].direction$</isEqual>
                	<isEqual property="sorting[].property" compareValue="type">section_type $sorting[].direction$</isEqual>
                	<isEqual property="sorting[].property" compareValue="caption">caption $sorting[].direction$</isEqual>                	
                </isNotEqual>
			</iterate>
			START WITH parent_id is null
            CONNECT BY PRIOR id = parent_id 
            ORDER SIBLINGS by display_order
        <include refid="paginatedClose"/>
	</select>
	
	<select id="get-search-menus"
	    	parameterClass="qparams"
	    	resultMap="mapping-menu">
		<include refid="paginatedOpen"/>
			SELECT 	
				  id
	            , parent_id
	            , action
	            , section_type type
	            , caption
	            , lang
	            , display_order
	            , managed_bean_name
	            , level rec_level
	            , CONNECT_BY_ISLEAF as is_leaf
	        FROM ( 
    			SELECT id, parent_id, action, section_type, caption, lang, display_order, managed_bean_name, level
      			FROM acm_cu_section_vw
     			WHERE lang = com_ui_user_env_pkg.get_user_lang 
    			CONNECT BY PRIOR  parent_id = id 
    			START WITH 
    				section_type!='modal' AND
    				<iterate conjunction="AND " property="filters">
						<isEqual property="filters[].element" compareValue="caption">upper(caption) like #filters[].value#</isEqual>
		            </iterate> 
    			UNION 
    			SELECT id, parent_id, action, section_type, caption, lang, display_order, managed_bean_name, level
      			FROM acm_cu_section_vw
     			WHERE lang = com_ui_user_env_pkg.get_user_lang
    			CONNECT BY PRIOR id= parent_id 
    			START WITH 
    				section_type!='modal' AND
    				<iterate conjunction="AND " property="filters">
						<isEqual property="filters[].element" compareValue="caption">upper(caption) like #filters[].value#</isEqual>
		            </iterate> 
			)
			CONNECT BY PRIOR id= parent_id
			START WITH parent_id IS NULL        
			ORDER SIBLINGS by display_order
        <include refid="paginatedClose"/>
	</select>
	
	<select id="get-menu-favorites"
			resultMap="mapping-menu">        
        with sec as (
		    SELECT DISTINCT
		        * 
		    FROM 
		        acm_cu_section_vw
		    START WITH
		        id IN (
		        	SELECT DISTINCT section_id FROM acm_ui_favorite_page_vw
		        	WHERE user_id = com_ui_user_env_pkg.get_user_id
		        )
		        AND lang = com_ui_user_env_pkg.get_user_lang
		    CONNECT BY PRIOR parent_id = id AND PRIOR lang = lang
		),
		fltr as (
		    select
		       f.id
		       , f.section_id   parent_id
		       , sec.action     action
		       , 'filter'       section_type
		       , f.name         caption
		       , f.lang
		       , 1              is_visible
		       , f.display_order
		       , sec.managed_bean_name
		    from
		       sec
		       , acm_ui_filter_vw f
		    where
		       sec.id = f.section_id
		       and sec.lang = f.lang
		       and set_ui_value_pkg.get_system_param_n('MENU_BOOKMARKS_FILTER')=1
		)
		SELECT 
		     id
		    , parent_id
		    , action
		    , section_type type
		    , caption
		    , lang
		    , display_order
		    , managed_bean_name
		    , level rec_level
		    , CONNECT_BY_ISLEAF as is_leaf 
		FROM (
		select * from sec
		union all
		select * from fltr  
		) 
		START WITH parent_id is null
		CONNECT BY PRIOR id = parent_id AND PRIOR lang = lang    	
	</select>
	
	<select id="get-menu-favorites-plain"
			resultMap="mapping-menu">        
        with sec as (
		    SELECT DISTINCT
		        s.* 
		    FROM 
		        acm_cu_section_vw s, acm_ui_favorite_page_vw f
		    WHERE
		        s.id = f.section_id 
		        AND s.lang = com_ui_user_env_pkg.get_user_lang
		        AND f.user_id = com_ui_user_env_pkg.get_user_id
		),
		fltr as (
		    select
		       f.id
		       , f.section_id   parent_id
		       , sec.action     action
		       , 'filter'       section_type
		       , f.name         caption
		       , f.lang
		       , 1              is_visible
		       , f.display_order
		       , sec.managed_bean_name
		    from
		       sec
		       , acm_ui_filter_vw f
		    where
		       sec.id = f.section_id
		       and sec.lang = f.lang
		)
		SELECT 
		     id
		    , parent_id
		    , action
		    , section_type type
		    , caption
		    , lang
		    , display_order
		    , managed_bean_name 
		    , 1 rec_level
    		, 1 is_leaf    
		FROM (
		select * from sec
		union all
		select * from fltr  
		)    	
	</select>
	
	<insert id="add-to-favourites"
		parameterClass="java.lang.Long">
		{call ACM_UI_FAVORITE_PAGE_PKG.add_favorite_page (
			            i_user_id => acm_api_user_pkg.get_user_id
			            , i_section_id => #value#
			            )}
	</insert>
	
	<insert id="remove-from-favourites"
		parameterClass="java.lang.Long">
		{call ACM_UI_FAVORITE_PAGE_PKG.remove_favorite_page (
			            i_user_id => acm_api_user_pkg.get_user_id
			            , i_section_id => #value#
			            )}
	</insert>
	
	<select id="get-menu-all"
			resultMap="mapping-menu-all">
        SELECT 
            id
            , parent_id
            , action
            , section_type type
            , caption
            , lang
            , display_order
            , managed_bean_name
			, is_visible
            , level rec_level
            , CONNECT_BY_ISLEAF as is_leaf
        FROM acm_ui_section_vw
            START WITH parent_id is null
                AND lang = com_ui_user_env_pkg.get_user_lang
            CONNECT BY PRIOR id = parent_id 
                AND lang = com_ui_user_env_pkg.get_user_lang
            ORDER SIBLINGS by display_order	
	</select>
	
	<select id="get-modal-windows"
			resultClass="ru.bpc.sv2.common.MenuNode">
        SELECT 
            id
            , caption AS name
        FROM acm_ui_section_vw
        WHERE section_type = 'modal' AND lang = com_ui_user_env_pkg.get_user_lang
	</select>

	<!-- MENU CREATION -->	
	<select id="get-menu-light"
			resultClass="ru.bpc.sv2.common.MenuNode">
        SELECT 
            id
            , lpad(' ', 3*level)||caption AS name
            , section_type AS type
        FROM acm_ui_section_vw
            START WITH parent_id IS NULL
                AND lang = com_ui_user_env_pkg.get_user_lang
            CONNECT BY PRIOR id = parent_id 
                AND PRIOR lang = lang
            ORDER SIBLINGS BY caption ASC, display_order ASC, id ASC
	</select>

	<procedure id="add-menu-node"
			parameterClass="ru.bpc.sv2.common.MenuNode">
		{call ACM_UI_SECTION_PKG.add_menu_section(
				  o_section_id		=> #id,jdbcType=NUMERIC,mode=OUT#
				, i_parent_id		=> #parentId#
				, i_action			=> #action#
				, i_section_type	=> #type#
				, i_is_visible		=> #visible#
				, i_display_order	=> #displayOrder#
				, i_caption			=> #name#
				, i_description		=> NULL
				, i_lang			=> #lang#
				, i_managed_bean_name => #managedBeanName#
				)}
	</procedure>
		
	<procedure id="update-menu-node"
			parameterClass="ru.bpc.sv2.common.MenuNode">
		{call ACM_UI_SECTION_PKG.modify_menu_section(
				  i_section_id		=> #id#
				, i_parent_id		=> #parentId#
				, i_action			=> #action#
				, i_section_type	=> #type#
				, i_is_visible		=> #visible#
				, i_display_order	=> #displayOrder#
				, i_caption			=> #name#
				, i_description		=> NULL
				, i_lang			=> #lang#
				, i_managed_bean_name => #managedBeanName#
				)}
	</procedure>

	<procedure id="delete-menu-node"
			parameterClass="int">
		{call ACM_UI_SECTION_PKG.remove_menu_section(
				  i_section_id		=> #id#
				)}
	</procedure>
	<!-- END MENU CREATION -->
	
	<resultMap  id="mapping-lov"
                class="ru.bpc.sv2.common.Lov">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="dict" column="dict"/>
        <result property="moduleCode" column="module_code"/>
        <result property="lang" column="lang"/>
        <result property="lovQuery" column="lov_query"/>
        <result property="sortMode" column="sort_mode"/>
        <result property="appearance" column="appearance"/>
        <result property="dataType" column="data_type"/>
        <result property="parametrized" column="is_parametrized" nullValue="false"/>
	</resultMap>

	<select id="get-lovs"
			parameterClass="qparams"
			resultMap="mapping-lov">
		<include refid="paginatedOpen"/>
			SELECT	  id
					, name
					, dict
					, module_code
					, lang
					, lov_query
					, sort_mode
					, appearance
					, data_type
					, is_parametrized
			FROM com_ui_lov_vw
	   		<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(name) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="moduleCode">module_code LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="dataType">data_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="parametrized">is_parametrized = #filters[].value#</isEqual>
	   		</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="name">upper(name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="dict">dict $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="moduleCode">module_code $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="dataType">data_type $sorting[].direction$</isEqual>
				</isNotEqual>
	       	</iterate>
	        <isEmpty property="sorting">ORDER BY upper(name)</isEmpty>
	    <include refid="paginatedClose"/>
	</select>

	<select id="get-lovs-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT *
		FROM com_ui_lov_vw
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(name) LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="moduleCode">module_code LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="dataType">data_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="parametrized">is_parametrized = #filters[].value#</isEqual>
   		</iterate>
   		<include refid="limitationClose"/>
	</select>

	<select id="get-lovs-list"
			resultClass="ru.bpc.sv2.common.Lov">
		<include refid="limitationOpen"/>
		SELECT	  id
				, name
				, dict
				, lov_query as lovQuery
				, module_code as moduleCode
				, lang
				, is_parametrized as parametrized
		FROM com_ui_lov_vw
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="moduleCode">module_code LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="parametrized">is_parametrized = #filters[].value#</isEqual>
   		</iterate>
   		<isEmpty property="filters">
   			WHERE lang = com_ui_user_env_pkg.get_user_lang
   		</isEmpty>
        ORDER BY name
        <include refid="limitationClose"/>
	</select>

	<procedure id="add-lov"
			parameterClass="ru.bpc.sv2.common.Lov">
		{call COM_UI_LOV_PKG.add_lov(
				  o_lov_id          => #id,jdbcType=NUMERIC,mode=OUT#
				, i_dict            => #dict#
				, i_lov_query       => #lovQuery#
				, i_lang            => #lang#
				, i_short_desc      => #name#
				, i_full_desc       => null
				, i_module_code     => #moduleCode#
				, i_sort_mode       => #sortMode#
				, i_appearance      => #appearance#
				, i_data_type       => #dataType#
				, i_is_parametrized => #parametrized#
				)}
	</procedure>

	<procedure id="edit-lov"
			parameterClass="ru.bpc.sv2.common.Lov">
		{call COM_UI_LOV_PKG.modify(
				  i_lov_id          => #id#
				, i_dict            => #dict#
				, i_lov_query       => #lovQuery#
				, i_lang            => #lang#
				, i_short_desc      => #name#
				, i_full_desc       => null
				, i_module_code     => #moduleCode#
				, i_sort_mode       => #sortMode#
				, i_appearance      => #appearance#
				, i_data_type       => #dataType#
				, i_is_parametrized => #parametrized#
				)}
	</procedure>

	<select id="get-rate-types"
			parameterClass="qparams"
			resultMap="mapping-rate-type">
		<include refid="paginatedOpen"/>
			SELECT	  rt.id
					, rt.seqnum
					, rt.rate_type
					, rt.inst_id
					, inst.name as inst_name
					, rt.use_cross_rate
					, rt.use_base_rate
					, rt.is_reversible
					, rt.warning_level
					, rt.use_double_typing
					, rt.use_verification
					, rt.adjust_exponent
					, rt.base_currency
					, rt.exp_period
					, rt.rounding_accuracy
			FROM com_ui_rate_type_vw rt, ost_ui_institution_sys_vw inst
			WHERE inst.id(+) = rt.inst_id 
				AND inst.lang(+) = com_ui_user_env_pkg.get_user_lang
		   		<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="id">rt.id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="rateType">rt.rate_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="instId">rt.inst_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="baseCurrency">rt.base_currency = #filters[].value#</isEqual>
		   		</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="rateType">rt.rate_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="instName">inst.name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="baseCurrency">rt.base_currency $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="reversible">rt.is_reversible $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="useCrossRate">rt.use_cross_rate $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="useBaseRate">rt.use_base_rate $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="expPeriod">rt.exp_period $sorting[].direction$</isEqual>
				</isNotEqual>
	       	</iterate>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-rate-types-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT *
		FROM com_ui_rate_type_vw
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="rateType">rate_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="baseCurrency">base_currency = #filters[].value#</isEqual>
   		</iterate>
   		<include refid="limitationClose"/>
	</select>
	
	<procedure id="add-rate-type"
			parameterClass="ru.bpc.sv2.common.rates.RateType">
		{call COM_UI_RATE_TYPE_PKG.add(
				  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_rate_type			=> #rateType#
				, i_inst_id				=> #instId#
				, i_use_cross_rate		=> #useCrossRate#
				, i_use_base_rate		=> #useBaseRate#
				, i_base_currency		=> #baseCurrency#
				, i_is_reversible		=> #isReversible#
				, i_warning_level		=> #warningLevel#
				, i_use_double_typing	=> #useDoubleTyping#
				, i_use_verification	=> #useVerification#
				, i_adjust_exponent		=> #adjustExponent#
				, i_exp_period			=> #expPeriod#
				, i_rounding_accuracy	=> #roundingAccuracy#
				)}
	</procedure>

	<procedure id="edit-rate-type"
			parameterClass="ru.bpc.sv2.common.rates.RateType">
		{call COM_UI_RATE_TYPE_PKG.modify(
				  i_id					=> #id#
				, io_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
				, i_use_cross_rate		=> #useCrossRate#
				, i_use_base_rate		=> #useBaseRate#
				, i_base_currency		=> #baseCurrency#
				, i_is_reversible		=> #isReversible#
				, i_warning_level		=> #warningLevel#
				, i_use_double_typing	=> #useDoubleTyping#
				, i_use_verification	=> #useVerification#
				, i_adjust_exponent		=> #adjustExponent#
				, i_exp_period			=> #expPeriod#
				, i_rounding_accuracy	=> #roundingAccuracy#
				)}
	</procedure>

	<procedure id="delete-rate-type"
			parameterClass="ru.bpc.sv2.common.rates.RateType">
		{call COM_UI_RATE_TYPE_PKG.remove(
				  i_id					=> #id#
				, i_seqnum				=> #seqNum#
				)}
	</procedure>
	
	<select id="get-rate-pairs"
			parameterClass="qparams"
			resultMap="mapping-rate-pair">
		<include refid="paginatedOpen"/>
			SELECT	  
					rp.id
					, rp.seqnum
					, rp.rate_type
					, rp.inst_id
					, rp.src_currency
					, rp.dst_currency
					, rp.base_rate_type
					, rp.base_rate_formula
					, i.name inst_name
					, rp.input_mode
					, rp.src_scale
					, rp.dst_scale
					, rp.inverted
					, rp.display_order
					, rp.rate_example
					, rp.label					
			FROM 
				com_ui_rate_pair_vw rp, ost_ui_institution_sys_vw i
			WHERE 
				i.id(+) = rp.inst_id 
				AND i.lang(+) = com_ui_user_env_pkg.get_user_lang
	   		<iterate prepend=" AND " conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">rp.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="rateType">rp.rate_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="baseRateType">rp.base_rate_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">rp.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="srcCurrency">rp.src_currency = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="dstCurrency">rp.dst_currency = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="inputMode">rp.input_mode = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="inverted">rp.inverted = #filters[].value#</isEqual>
	   		</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="displayOrder">rp.display_order $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="rateType">rp.rate_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="instId">rp.inst_id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="srcCurrency">rp.src_currency $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="dstCurrency">rp.dst_currency $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="baseRateType">rp.base_rate_type $sorting[].direction$</isEqual>
				</isNotEqual>
	       	</iterate>
		<include refid="paginatedClose"/>
	</select>
	
	<resultMap class="ru.bpc.sv2.common.rates.Rate" id="mapping-rate-pair-with-rate">
		<result property="rateType" column="rate_type"/> 
		<result property="instId" column="inst_id"/> 
		<result property="srcScale" column="src_scale"/> 
		<result property="srcCurrency" column="src_currency"/> 
		<result property="dstScale" column="dst_scale"/> 
		<result property="dstCurrency" column="dst_currency"/> 
		<result property="inverted" column="inverted" nullValue="false"/> 
		<result property="effRate" column="rate"/>
		<result property="rate" column="rate"/>
		<result property="rateExample" column="rate_example"/>
		<result property="label" column="label"/>
	</resultMap>
	
	<select id="get-rate-pairs-to-add"
			parameterClass="qparams"
			resultMap="mapping-rate-pair-with-rate">
			SELECT	  
					rp.id
					, rp.seqnum
					, rp.rate_type
					, rp.inst_id
					, rp.src_scale
					, rp.src_currency
					, rp.dst_scale
					, rp.dst_currency
					, rp.inverted
					, case when rp.inverted = 1 then 1/COM_API_RATE_PKG.get_rate(
                        i_src_currency      => rp.src_currency
                        , i_dst_currency    => rp.dst_currency
                        , i_rate_type       => rp.rate_type
                        , i_inst_id         => rp.inst_id
                        , i_eff_date        => sysdate
                        , i_mask_exception  => 1
                        )  when rp.inverted = 0 then COM_API_RATE_PKG.get_rate(
                        i_src_currency      => rp.src_currency
                        , i_dst_currency    => rp.dst_currency
                        , i_rate_type       => rp.rate_type
                        , i_inst_id         => rp.inst_id
                        , i_eff_date        => sysdate
                        , i_mask_exception  => 1
                        ) end rate
                   , rp.rate_example
                   , rp.label       		
			FROM 
				com_ui_rate_pair_vw rp
			WHERE 1=1 
			<iterate prepend=" AND " conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="rateType">rp.rate_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">rp.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="inputMode">rp.input_mode = #filters[].value#</isEqual>
			</iterate>
			ORDER BY rp.display_order					
	</select>

	<select id="get-rate-pairs-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT 
			rp.id
		FROM 	
			com_ui_rate_pair_vw rp
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">rp.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="rateType">rp.rate_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="baseRateType">rp.base_rate_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">rp.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="srcCurrency">rp.src_currency = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="dstCurrency">rp.dst_currency = #filters[].value#</isEqual>
   		</iterate>
   		<include refid="limitationClose"/>
	</select>
	
	<procedure id="add-rate-pair"
			parameterClass="ru.bpc.sv2.common.rates.RatePair">
		{call COM_UI_RATE_PAIR_PKG.add(
				  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_rate_type			=> #rateType#
				, i_inst_id				=> #instId#
				, i_src_currency		=> #srcCurrency#
				, i_dst_currency		=> #dstCurrency#
				, i_base_rate_type		=> #baseRateType#
				, i_base_rate_formula	=> #baseRateFormula#
				, i_input_mode			=> #inputMode#
				, i_inverted			=> #inverted#
				, i_src_scale			=> #srcScale#
				, i_dst_scale			=> #dstScale#
				, i_rate_example        => #rateExample#
			    , i_display_order       => #displayOrder#
    			, i_label               => #label#
    			, i_lang                => #lang#
				)}
	</procedure>

	<procedure id="edit-rate-pair"
			parameterClass="ru.bpc.sv2.common.rates.RatePair">
		{call COM_UI_RATE_PAIR_PKG.modify(
				  i_id					=> #id#
				, io_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
				, i_rate_type			=> #rateType#
				, i_inst_id				=> #instId#
				, i_base_rate_type		=> #baseRateType#
				, i_base_rate_formula	=> #baseRateFormula#
				, i_input_mode			=> #inputMode#
				, i_inverted			=> #inverted#
				, i_src_scale			=> #srcScale#
				, i_dst_scale			=> #dstScale#
				, i_rate_example        => #rateExample#
			    , i_display_order       => #displayOrder#
    			, i_label               => #label#
    			, i_lang                => #lang#
				)}
	</procedure>

	<procedure id="delete-rate-pair"
			parameterClass="ru.bpc.sv2.common.rates.RatePair">
		{call COM_UI_RATE_PAIR_PKG.remove(
				  i_id					=> #id#
				, i_seqnum				=> #seqNum#
				)}
	</procedure>
	
	<resultMap class="ru.bpc.sv2.common.rates.Rate" id="mapping-rate">
		<result property="id" column="id"/> 
		<result property="seqNum" column="seqnum"/> 
		<result property="rateType" column="rate_type"/> 
		<result property="instId" column="inst_id"/> 
		<result property="effDate" column="eff_date"/> 
		<result property="regDate" column="reg_date"/> 
		<result property="srcScale" column="src_scale"/> 
		<result property="srcCurrency" column="src_currency"/> 
		<result property="dstScale" column="dst_scale"/> 
		<result property="dstCurrency" column="dst_currency"/> 
		<result property="status" column="status"/> 
		<result property="expDate" column="exp_date"/> 
		<result property="inverted" column="inverted" nullValue="false"/> 
		<result property="rate" column="rate"/> 
		<result property="effRate" column="eff_rate"/> 
		<result property="instName" column="inst_name"/>
		<result property="initiateId" column="initiate_rate_id"/> 
	</resultMap>

	<select id="get-rates"
			parameterClass="qparams"
			resultMap="mapping-rate">
		<include refid="paginatedOpen"/>
			SELECT 	  r.id
					, r.seqnum
					, r.inst_id
					, r.eff_date
					, r.reg_date
					, r.rate_type
					, r.src_scale
					, r.src_currency
					, r.dst_scale
					, r.dst_currency
					, r.status
					, r.exp_date
					, r.inverted
					, r.rate
					, r.eff_rate
					, r.initiate_rate_id
					, inst.name as inst_name
			FROM 
				com_ui_rate_vw r, ost_ui_institution_sys_vw inst
			WHERE 
				inst.id(+) = r.inst_id 
				AND inst.lang(+) = com_ui_user_env_pkg.get_user_lang
		   		<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="id">r.id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="rateType">r.rate_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="instId">r.inst_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="status">r.status = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="initiateId">r.initiate_rate_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="effDate">
		        		(r.eff_date <![CDATA[<]]>= TO_DATE(#filters[].value#, 'DD.MM.YYYY') OR r.eff_date IS NULL) 
		        		AND (r.exp_date >= TO_DATE(#filters[].value#, 'DD.MM.YYYY')OR r.exp_date IS NULL)
		        	</isEqual>
					<isEqual property="filters[].element" compareValue="srcCurrency">r.src_currency = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="dstCurrency">r.dst_currency = #filters[].value#</isEqual>
		   		</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting" close=", r.id ASC">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="rateType">r.rate_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="instName">inst.inst_name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="srcCurrency">r.src_currency $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="dstCurrency">r.dst_currency $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="status">r.status $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="effDate">r.eff_date $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="regDate">r.reg_date $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="expDate">r.exp_date $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="dstScale">r.dst_scale $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="effRate">r.eff_rate $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="srcScale">r.src_scale $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="inverted">r.inverted $sorting[].direction$</isEqual>
				</isNotEqual>		
	       	</iterate>
	       	<isEmpty property="sorting" prepend=" ORDER BY ">r.id ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>
	
	<select id="get-rates-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT r.id
		FROM com_ui_rate_vw r
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">r.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="rateType">r.rate_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">r.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="status">r.status = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="initiateId">r.initiate_rate_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="effDate">
        		(r.eff_date <![CDATA[<]]>= TO_DATE(#filters[].value#, 'DD.MM.YYYY') OR r.eff_date IS NULL) 
        		AND (r.exp_date >= TO_DATE(#filters[].value#, 'DD.MM.YYYY')OR r.exp_date IS NULL)
        	</isEqual>
			<isEqual property="filters[].element" compareValue="srcCurrency">r.src_currency = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="dstCurrency">r.dst_currency = #filters[].value#</isEqual>
   		</iterate>
   		<include refid="limitationClose"/>
	</select>	

	<procedure id="set-rate"
			parameterClass="ru.bpc.sv2.common.rates.Rate">
		{call COM_UI_RATE_PKG.set_rate(
				  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=OUT#
				, o_count				=> #count,jdbcType=NUMERIC,mode=OUT#
				, i_src_currency		=> #srcCurrency#
				, i_dst_currency		=> #dstCurrency#
				, i_rate_type			=> #rateType#
				, i_inst_id				=> #instId#
				, i_eff_date			=> #effDate#
				, i_rate				=> #rate#
				, i_inverted			=> #inverted#
				, i_src_scale			=> #srcScale#
				, i_dst_scale			=> #dstScale#
				, i_exp_date			=> #expDate#
				)}
	</procedure>

	<procedure id="check-rate"
			parameterMap="check-rate-param-map">
		{? = call COM_UI_RATE_PKG.check_rate(
				  i_src_currency		=> ?
				, i_dst_currency		=> ?
				, i_rate_type			=> ?
				, i_inst_id				=> ?
				, i_eff_date			=> ?
				, i_rate				=> ?
				, i_inverted			=> ?
				, i_src_scale			=> ?
				, i_dst_scale			=> ?
				, o_message				=> ?
				)}
	</procedure>

	<procedure id="invalidate-rate"
			parameterClass="ru.bpc.sv2.common.rates.Rate">
		{call COM_UI_RATE_PKG.invalidate_rate(
				  i_id					=> #id#
				, io_seqnum				=> #seqNum#
				)}
	</procedure>
	
	<select id="get-last-version" resultClass="string">
		SELECT 
			com_ui_version_pkg.get_last_version 
		FROM 
			dual
	</select>
	
    <parameterMap class="java.util.Map" id="mapping-set-user-context">
		<parameter property="userName" javaType="java.lang.String" mode="IN" jdbcType="VARCHAR"/>
		<parameter property="sessionId" javaType="long" mode="INOUT" jdbcType="NUMERIC"/>
	</parameterMap>
    
    <procedure id="set-user-context"
    		parameterMap="mapping-set-user-context">
    	{call com_ui_user_env_pkg.set_user_context(
    			  i_user_name	=> ?  
				, io_session_id => ?
				)}
    </procedure>
    
    
    <resultMap id="mapping-company" class="ru.bpc.sv2.common.Company">
		<result property="id" column="id"/>
		<result property="embossedName" column="embossed_name"/>
		<result property="seqNum" column="seqnum"/>
		<result property="splitHash" column="split_hash"/>
		<result property="lang" column="lang"/>
		<result property="label" column="label"/>
		<result property="description" column="description"/>		
	</resultMap>
	
    <select id="get-companies"
			parameterClass="qparams"
			resultMap="mapping-company">
       <include refid="paginatedOpen"/>
			SELECT
					  c.id
					, c.embossed_name
					, c.seqnum
					, c.split_hash
					, c.lang
					, c.label
					, c.description                  
           	FROM
           		com_ui_company_vw c
			<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">c.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="label">upper(c.label) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="embossedName">upper(c.embossed_name) like #filters[].value#</isEqual>				
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">c.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="label">upper(c.label) $sorting[].direction$</isEqual>					
					<isEqual property="sorting[].property" compareValue="embossedName">upper(c.embossed_name) $sorting[].direction$</isEqual>					
				</isNotEqual>
        	</iterate>
        	<isEmpty property="sorting">ORDER BY upper(c.label) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-companies-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT
			c.id                    
       	FROM
       		com_ui_company_vw c
		<iterate prepend=" WHERE " conjunction="AND " property="filters">
			<isEqual property="filters[].element" compareValue="id">c.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="label">upper(c.label) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="embossedName">upper(c.embossed_name) like #filters[].value#</isEqual>				
		</iterate>
		<include refid="limitationClose"/>
	</select>
	<!-- 
	<parameterMap id="mapWsRate" class="java.util.Map">
		<parameter property="ref" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT"/>
        <parameter property="effectiveDate" javaType="java.util.Date" jdbcType="DATE" mode="IN"/>
    </parameterMap>
    
	<resultMap class="in.bpc.sv2.utils.Rate" id="ws-rates">
    	<result property="sourceCurrency" column="source_currency"/>
    	<result property="destinationCurrency" column="destination_currency" />
    	<result property="value" column="value"/>
    </resultMap>

    <procedure id="ws-get-rates-by-effective-date"
            parameterMap="mapWsRate" resultMap="ws-rates">
       	{call CST_UI_YOTA_TEST_PKG.get_rates(
				  o_ref_cur		=> ?  
				, i_eff_date	=> ?
				)}
    </procedure>
    
    <parameterMap id="mapWsCheckDocument" class="java.util.Map">
		<parameter property="result" javaType="java.lang.String" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="surname" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="firstName" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="secondName" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="birthday" javaType="java.util.Date" jdbcType="DATE" mode="IN"/>
		<parameter property="idSeries" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="idNumber" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
    </parameterMap>
    
    <procedure id="ws-check-document" parameterMap="mapWsCheckDocument">
       	{? = call CST_UI_YOTA_TEST_PKG.check_document(
				  i_surname    	=> ?
				, i_first_name  => ?
				, i_second_name => ?
				, i_birthday    => ?
				, i_id_series   => ?
				, i_id_number   => ?
				)}
    </procedure>
    
    <parameterMap id="mapWsKladr" class="java.util.Map">
		<parameter property="ref" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT"/>
        <parameter property="parent_id" javaType="java.lang.String" jdbcType="NUMERIC" mode="IN"/>
    </parameterMap>

    <resultMap class="in.bpc.sv2.utils.KladrRecord" id="resWsKladr">
    	<result property="key" column="id" javaType="java.lang.String" jdbcType="VARCHAR"/>
    	<result property="label" column="place_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
    	<result property="level" column="comp_level" javaType="java.lang.Integer" jdbcType="NUMERIC"/>
    </resultMap>

    <procedure id="ws-get-kladr"
            parameterMap="mapWsKladr" resultMap="resWsKladr">
       	{call CST_UI_YOTA_TEST_PKG.get_kladr(
				  o_ref_cur		=> ?  
				, i_parent_id  	=> ?				
				)}
    </procedure>
    
    <parameterMap id="mapWsKladrByPostalCode" class="java.util.Map">
		<parameter property="ref" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT"/>
        <parameter property="postalCode" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
    </parameterMap>
    
    <procedure id="ws-get-kladr-by-postal-code"
            parameterMap="mapWsKladrByPostalCode" resultMap="resWsKladr">
       	{call CST_UI_YOTA_TEST_PKG.get_kladr(
				  o_ref_cur		=> ?  
				, i_postal_code	=> ?				
				)}
    </procedure>
    
    <parameterMap id="mapPostalCodeByAddress" class="java.util.Map">
		<parameter property="postalCode" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="addressId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN" />		
    </parameterMap>
    
    <procedure id="ws-get-postal-code-by-address"
            parameterMap="mapPostalCodeByAddress">
       	{? = call CST_UI_YOTA_TEST_PKG.get_postal_code(
				  i_place_id => ?			
				)}
    </procedure>
	
	<parameterMap id="mapWsCheckPhone" class="java.util.Map">
		<parameter property="result" javaType="java.lang.String" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="phoneNumber" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
    </parameterMap>
    
    <procedure id="ws-check-phone" parameterMap="mapWsCheckPhone">
       	{? = call CST_UI_YOTA_TEST_PKG.check_phone(
				  i_phone_number => ?
				)}
    </procedure>
	
	<parameterMap id="mapWsCheckOneTimePassword" class="java.util.Map">
		<parameter property="result" javaType="java.lang.String" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="address" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
		<parameter property="sessionId" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />		
		<parameter property="password" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN" />
    </parameterMap>
    
    <procedure id="ws-check-one-time-password" parameterMap="mapWsCheckOneTimePassword">
       	{? = call CST_UI_YOTA_TEST_PKG.check_one_time_password(
				  i_address    		=> ?
				, i_session_id  	=> ?
				, i_one_time_pass  	=> ?
				)}
    </procedure>
    
    <procedure id="ws-send-one-time-password" parameterClass="in.bpc.sv2.utils.OtpSend">
       	{call CST_UI_YOTA_TEST_PKG.send_one_time_password(
				  i_address    		=> #address#
				, i_session_id  	=> #sessionId#
				)}
    </procedure>
	
	<select id="ws-get-application-xslt" resultClass="java.lang.String">
    	select xsd_source from prc_file where id = 5001 
    </select>
    -->

	<resultMap  id="mapping-id-type"
                class="ru.bpc.sv2.common.IdType">
        <result property="id" column="id"/>
        <result property="seqNum" column="seqnum"/>
        <result property="entityType" column="entity_type"/>
        <result property="entityTypeDesc" column="entity_type_desc"/>
        <result property="instId" column="inst_id"/>
        <result property="idType" column="id_type"/>
        <result property="idTypeDesc" column="id_type_desc"/>
        <result property="lang" column="lang"/>
        <result property="instName" column="inst_name"/>
	</resultMap>

	<select id="get-id-types"
			parameterClass="qparams"
			resultMap="mapping-id-type">
		<include refid="paginatedOpen"/>
			SELECT	  it.id
					, it.seqnum
					, it.entity_type
					, it.entity_type_desc
					, it.inst_id
					, it.id_type
					, it.id_type_desc
					, it.lang
					, i.name AS inst_name
			FROM com_ui_id_type_vw it, ost_ui_institution_sys_vw i
			WHERE it.inst_id = i.id
				AND it.lang = i.lang(+)
	   		<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">it.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">it.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">it.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">it.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="idType">it.id_type = #filters[].value#</isEqual>
	   		</iterate>
			<iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">it.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="entityType">it.entity_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="entityTypeDesc">upper(it.entity_type_desc) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="idType">it.id_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="idTypeDesc">upper(it.id_type_desc) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="instName">upper(inst_name) $sorting[].direction$</isEqual>
				</isNotEqual>
	       	</iterate>
	        <isEmpty property="sorting">ORDER BY upper(id_type_desc)</isEmpty>
	    <include refid="paginatedClose"/>
	</select>

	<select id="get-id-types-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT *
		FROM com_ui_id_type_vw it
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">it.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">it.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">it.entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">it.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="idType">it.id_type = #filters[].value#</isEqual>
   		</iterate>
   		<include refid="limitationClose"/>
	</select>

	<procedure id="add-id-type"
			parameterClass="ru.bpc.sv2.common.IdType">
		{call COM_UI_ID_TYPE_PKG.add(
				  o_id			=> #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum		=> #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_entity_type	=> #entityType#
				, i_inst_id		=> #instId#
				, i_id_type		=> #idType#
				)}
	</procedure>

	<procedure id="modify-id-type"
			parameterClass="ru.bpc.sv2.common.IdType">
		{call COM_UI_ID_TYPE_PKG.modify(
				  i_id			=> #id#
				, io_seqnum		=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
				, i_entity_type	=> #entityType#
				, i_id_type		=> #idType#
				)}
	</procedure>

	<procedure id="remove-id-type"
			parameterClass="ru.bpc.sv2.common.IdType">
		{call COM_UI_ID_TYPE_PKG.remove(
				  i_id			=> #id#
				, i_seqnum		=> #seqNum#
				)}
	</procedure>
	
	<resultMap  id="mapping-translation"
                class="ru.bpc.sv2.common.Translation">
        <result property="sourceLang" column="src_lang"/>
        <result property="destLang" column="dst_lang"/>
        <result property="tableName" column="table_name"/>
        <result property="columnName" column="column_name"/>
        <result property="objectId" column="object_id"/>
        <result property="srcText" column="src_text"/>
        <result property="dstText" column="dst_text"/>
        <result property="srcTextOld" column="src_text"/>
        <result property="dstTextOld" column="dst_text"/>
        <result property="translateExists" column="translate_exists" javaType="boolean" nullValue="false"/>
	</resultMap>
	
	<select id="get-translations"
			parameterClass="qparams"
			resultMap="mapping-translation">
		<include refid="paginatedOpen"/>
			SELECT	  it.table_name
					, it.column_name
					, it.object_id
					, it.src_lang
					, it.src_text
					, it.dst_lang
					, it.dst_text
					, it.TRANSLATE_EXISTS
			FROM COM_UI_TRANSLATE_VW it
	   		<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="sourceLang">it.src_lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="destLang">it.dst_lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="translateExists">it.TRANSLATE_EXISTS = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="tableName">upper(it.table_name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="columnName">upper(it.column_name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">it.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="srcText">upper(it.src_text) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="dstText">upper(it.dst_text) like #filters[].value#</isEqual>
	   		</iterate>
	   		<iterate prepend="ORDER BY" conjunction="," property="sorting" close=", it.object_id ASC">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="tableName">upper(it.table_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="columnName">upper(it.column_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="objectId">it.object_id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="srcText">upper(it.src_text) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="dstText">upper(it.dst_text) $sorting[].direction$</isEqual>
				</isNotEqual>
	       	</iterate>
	       	<isEmpty property="sorting" prepend=" ORDER BY ">it.table_name ASC, it.object_id ASC</isEmpty>
	    <include refid="paginatedClose"/>
	</select>
	
	
	<select id="get-translation-count"
			parameterClass="qparams"
			resultClass="int">
		SELECT count(*)
		FROM COM_UI_TRANSLATE_VW it
   		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="sourceLang">it.src_lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="destLang">it.dst_lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="translateExists">it.TRANSLATE_EXISTS = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="tableName">upper(it.table_name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="columnName">upper(it.column_name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">it.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="srcText">upper(it.src_text) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="dstText">upper(it.dst_text) like #filters[].value#</isEqual>
   		</iterate>
	</select>
	
	<procedure id="modify-translation-source"
			parameterClass="ru.bpc.sv2.common.Translation">
		{call COM_UI_I18N_PKG.add_text(
				  i_table_name	=> #tableName#
				, i_column_name	=> #columnName#
				, i_object_id	=> #objectId#
				, i_text		=> #srcText#
				, i_lang		=> #sourceLang#
				, i_check_unique => #checkUnique#
				)}
	</procedure>
	
	<procedure id="modify-translation-dest"
			parameterClass="ru.bpc.sv2.common.Translation">
		{call COM_UI_I18N_PKG.add_text(
				  i_table_name	=> #tableName#
				, i_column_name	=> #columnName#
				, i_object_id	=> #objectId#
				, i_text		=> #dstText#
				, i_lang		=> #destLang#
				, i_check_unique => #checkUnique#
				)}
	</procedure>

	<resultMap id="mapping-array-type" class="ru.bpc.sv2.common.arrays.ArrayType">
		<result property="id" column="id" />
		<result property="seqnum" column="seqnum" />
		<result property="systemName" column="name" />
		<result property="isUnique" javaType="boolean" column="is_unique" />
		<result property="lovId" column="lov_id" />
		<result property="lovName" column="lov_name" />
		<result property="entityType" column="entity_type" />
		<result property="dataType" column="data_type" />
		<result property="instId" column="inst_id" />
		<result property="instName" column="inst_name" />
		<result property="lang" column="lang" />
		<result property="name" column="label" />
		<result property="description" column="description" />
        <result property="scaleType" column="scale_type" />
        <result property="className" column="class_name" />
	</resultMap>

	<select id="get-array-types" parameterClass="qparams" resultMap="mapping-array-type">
		<include refid="paginatedOpen" />
			SELECT t.id
				, t.seqnum
				, t.name
				, t.is_unique
				, t.lov_id
				, lov.name as lov_name
				, t.entity_type
				, t.data_type
				, t.inst_id
				, i.name as inst_name
				, t.label
				, t.description
				, t.lang
                , t.scale_type
                , t.class_name
			FROM
				com_ui_array_type_vw t,
				com_ui_lov_vw lov,
				ost_ui_institution_sys_vw i
			WHERE
				t.lov_id = lov.id(+)
				AND t.inst_id = i.id
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">t.id =
					#filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">t.inst_id
					= #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(t.label)
					like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="systemName">upper(t.name)
					like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lovId">t.lov_id =
					#filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">
					t.lang(+)
					= #filters[].value#
					AND lov.lang(+) = #filters[].value#
					AND i.lang(+) = #filters[].value#
				</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">t.id
						$sorting[].direction$</isEqual>
                    <isEqual property="sorting[].property" compareValue="systemName">upper(t.name)
                        $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="name">upper(t.label)
						$sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="entityType">upper(t.entity_type)
						$sorting[].direction$</isEqual>
                    <isEqual property="sorting[].property" compareValue="scaleType">upper(t.scale_type)
                        $sorting[].direction$</isEqual>
                    <isEqual property="sorting[].property" compareValue="className">upper(t.class_name)
                        $sorting[].direction$</isEqual>
                    <isEqual property="sorting[].property" compareValue="instName">upper(i.name)
                        $sorting[].direction$</isEqual>
                </isNotEqual>
			</iterate>
			<isEmpty property="sorting" prepend="ORDER BY ">upper(t.label) ASC
			</isEmpty>
		<include refid="paginatedClose" />
	</select>

	<select id="get-array-types-count" parameterClass="qparams"
		resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT t.id
		FROM com_ui_array_type_vw t
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">t.id =
				#filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">t.inst_id
				= #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(t.label)
				like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="systemName">upper(t.name)
				like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lovId">t.lov_id =
				#filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">t.lang =
				#filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<procedure id="add-array-type" parameterClass="ru.bpc.sv2.common.arrays.ArrayType">
		{call COM_UI_ARRAY_TYPE_PKG.add_array_type(
			o_id 			=> #id,jdbcType=NUMERIC,mode=OUT#
			, o_seqnum	 	=> #seqnum,jdbcType=NUMERIC,mode=OUT#
			, i_name 		=> #systemName#
			, i_is_unique 	=> #isUnique#
			, i_lov_id 		=> #lovId#
			, i_entity_type => #entityType#
			, i_data_type 	=> #dataType#
			, i_inst_id 	=> #instId#
			, i_lang 		=> #lang#
			, i_label 		=> #name#
			, i_description => #description#
            , i_scale_type  => #scaleType#
            , i_class_name  => #className#
		)}
	</procedure>

	<procedure id="edit-array-type" parameterClass="ru.bpc.sv2.common.arrays.ArrayType">
		{call COM_UI_ARRAY_TYPE_PKG.modify_array_type(
			i_id 			=> #id#
			, io_seqnum 	=> #seqnum,jdbcType=NUMERIC,mode=INOUT#
			, i_name 		=> #systemName#
			, i_is_unique 	=> #isUnique#
			, i_lov_id 		=> #lovId#
			, i_entity_type => #entityType#
			, i_data_type 	=> #dataType#
			, i_inst_id 	=> #instId#
			, i_lang 		=> #lang#
			, i_label 		=> #name#
			, i_description => #description#
            , i_scale_type  => #scaleType#
            , i_class_name  => #className#
		)}
	</procedure>

	<procedure id="delete-array-type" parameterClass="ru.bpc.sv2.common.arrays.ArrayType">
		{call COM_UI_ARRAY_TYPE_PKG.remove_array_type(
			i_id 		=> #id#
			, i_seqnum 	=> #seqnum#
			)}
	</procedure>

	<resultMap id="mapping-array" class="ru.bpc.sv2.common.arrays.Array">
		<result property="id" column="id" />
		<result property="seqnum" column="seqnum" />
		<result property="arrayTypeId" column="array_type_id" />
		<result property="arrayTypeName" column="array_type_name" />
		<result property="instId" column="inst_id" />
		<result property="instName" column="inst_name" />
		<result property="dataType" column="data_type" />
		<result property="lovId" column="lov_id" />
		<result property="lang" column="lang" />
		<result property="name" column="label" />
		<result property="description" column="description" />
        <result property="agentId" column="agent_id" />
        <result property="agentName" column="agent_name" />
        <result property="modifierId" column="mod_id" />
        <result property="modifierName" column="modifier_name" />
        <result property="isPrivate" javaType="boolean" column="is_private" />
        <result property="className" column="class_name" />
        <result property="agentNumber" column="agent_number" />
	</resultMap>

	<select id="get-arrays" parameterClass="qparams" resultMap="mapping-array">
		<include refid="paginatedOpen" />
		SELECT DISTINCT t.id
			, t.seqnum
			, t.array_type_id
			, a.label as array_type_name
			, a.data_type
			, a.lov_id
			, t.inst_id
			, i.name as inst_name
			, t.label
			, t.description
			, t.lang
            , t.mod_id
            , t.agent_id
            , (case when t.is_private is null or t.is_private = 0 then 0 else 1 end)is_private
            , m.name as modifier_name
            , ag.name as agent_name
            , a.class_name as class_name
            , ag.agent_number
		FROM
			com_ui_array_vw t,
			com_ui_array_type_vw a,
			ost_ui_institution_sys_vw i,
            rul_ui_mod_vw m,
            ost_ui_agent_vw ag
		WHERE
			t.array_type_id = a.id(+)
			AND t.inst_id = i.id
            AND t.mod_id = m.id(+)
            AND t.agent_id = ag.id(+)
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">t.id LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">t.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="arrayTypeId">t.array_type_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(t.label) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
				t.lang(+) = #filters[].value#
				AND i.lang(+) = #filters[].value#
				AND a.lang(+) = #filters[].value#
                AND ag.lang(+) = #filters[].value#
			</isEqual>
		</iterate>
		<iterate prepend="ORDER BY" conjunction=", " property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="id">t.id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="entityType">upper(t.label) $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="modifierName">upper(modifier_name) $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="agentName">upper(agent_name) $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="name">upper(t.label) $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="arrayTypeName">upper(a.label) $sorting[].direction$</isEqual>
            </isNotEqual>
		</iterate>
		<isEmpty property="sorting" prepend="ORDER BY ">upper(t.label) ASC
		</isEmpty>
		<include refid="paginatedClose" />
	</select>

	<select id="get-arrays-count" parameterClass="qparams"
		resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT t.id
		FROM COM_UI_ARRAY_VW t
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">t.id LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">t.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="arrayTypeId">t.array_type_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(t.label) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<procedure id="add-array" parameterClass="ru.bpc.sv2.common.arrays.Array">
		{call COM_UI_ARRAY_PKG.add_array(
			o_id 				=> #id,jdbcType=NUMERIC,mode=OUT#
			, o_seqnum 			=> #seqnum,jdbcType=NUMERIC,mode=OUT#
			, i_array_type_id 	=> #arrayTypeId#
			, i_inst_id 		=> #instId#
			, i_lang 			=> #lang#
			, i_label 			=> #name#
			, i_description 	=> #description#
            , i_mod_id          => #modifierId#
            , i_agent_id        => #agentId#
            , i_is_private      => #isPrivate#
		)}
	</procedure>

	<procedure id="edit-array" parameterClass="ru.bpc.sv2.common.arrays.Array">
		{call COM_UI_ARRAY_PKG.modify_array(
			i_id 				=> #id#
			, io_seqnum 		=> #seqnum,jdbcType=NUMERIC,mode=INOUT#
			, i_array_type_id 	=> #arrayTypeId#
			, i_inst_id 		=> #instId#
			, i_lang 			=> #lang#
			, i_label 			=> #name#
			, i_description 	=> #description#
            , i_mod_id          => #modifierId#
            , i_agent_id        => #agentId#
            , i_is_private      => #isPrivate#
		)}
	</procedure>

	<procedure id="delete-array" parameterClass="ru.bpc.sv2.common.arrays.Array">
		{call COM_UI_ARRAY_PKG.remove_array(
				i_id 		=> #id#
				, i_seqnum 	=> #seqnum#
			)}
	</procedure>

	<resultMap id="mapping-array-element" class="ru.bpc.sv2.common.arrays.ArrayElement">
		<result property="id" column="id" />
		<result property="seqNum" column="seqnum" />
		<result property="arrayId" column="array_id" />
		<result property="elementNumber" column="element_number" />
		<result property="lang" column="lang" />
		<result property="name" column="label" />
		<result property="description" column="description" />
		<result property="dataType" column="data_type"/>
		<result property="lovId" column="lov_id"/>
		<result property="lovValue" column="lov_value"/>
        <result property="value" column="element_value"/>
        <result property="valueV" column="value_v"/>
        <result property="valueN" column="value_n"/>
        <result property="valueD" column="value_d"/>
	</resultMap>

	<select id="get-array-elements" parameterClass="qparams"
		resultMap="mapping-array-element">
		<include refid="paginatedOpen" />
		SELECT t.id
			, t.seqnum
			, t.array_id
			, t.element_value
			, t.element_number
			, t.label
			, t.description
			, t.lang
			, t.data_type
			, t.lov_id
			, t.element_char_value value_v
			, t.element_number_value value_n
			, t.element_date_value value_d  
			, t.element_lov_value lov_value  
		FROM
			com_ui_array_element_vw t
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">t.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="arrayId">t.array_id	= #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="elementValue">t.element_value = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="elementNumber">t.element_number = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">(upper(t.label) like #filters[].value# OR upper(t.element_lov_value) like #filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="description">upper(t.description) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
		</iterate>
		<iterate prepend="ORDER BY" conjunction=", " property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="id">t.id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="entityType">upper(t.label)
					$sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<isEmpty property="sorting" prepend="ORDER BY ">upper(t.label) ASC
		</isEmpty>
		<include refid="paginatedClose" />
	</select>

	<select id="get-array-elements-count" parameterClass="qparams"
		resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT t.id
		FROM com_ui_array_element_vw t
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">t.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="arrayId">t.array_id	= #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="elementValue">t.element_value = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="elementNumber">t.element_number = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">(upper(t.label) like #filters[].value# OR upper(t.element_lov_value) like #filters[].value#)</isEqual>
			<isEqual property="filters[].element" compareValue="description">upper(t.description) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<procedure id="add-array-element" parameterClass="ru.bpc.sv2.common.arrays.ArrayElement">
		{call COM_UI_ARRAY_ELEMENT_PKG.add_array_element(
			o_id 				=> #id,jdbcType=NUMERIC,mode=OUT#
			, o_seqnum 			=> #seqNum,jdbcType=NUMERIC,mode=OUT#
			, i_array_id 		=> #arrayId#
			, i_data_type 		=> #dataType#
			, i_value_char		=> #valueV#
			, i_value_number	=> #valueN#
			, i_value_date		=> #valueD#
			, i_element_number 	=> #elementNumber#
			, i_lang 			=> #lang#
			, i_label 			=> #name#
			, i_description 	=> #description#
		)}
	</procedure>

	<procedure id="edit-array-element" parameterClass="ru.bpc.sv2.common.arrays.ArrayElement">
		{call COM_UI_ARRAY_ELEMENT_PKG.modify_array_element(
			i_id 				=> #id#
			, io_seqnum 		=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
			, i_array_id 		=> #arrayId#
			, i_data_type 		=> #dataType#
			, i_value_char		=> #valueV#
			, i_value_number	=> #valueN#
			, i_value_date		=> #valueD#
			, i_element_number 	=> #elementNumber#
			, i_lang 			=> #lang#
			, i_label 			=> #name#
			, i_description 	=> #description#
		)}
	</procedure>

	<procedure id="delete-array-element" parameterClass="ru.bpc.sv2.common.arrays.ArrayElement">
		{call COM_UI_ARRAY_ELEMENT_PKG.remove_array_element(
			i_id 				=> #id#
			, i_seqnum 			=> #seqNum#
		)}
	</procedure>
	
	<resultMap id="mapping-array-conversion" class="ru.bpc.sv2.common.arrays.ArrayConversion">
		<result property="id" column="id" />
		<result property="seqnum" column="seqnum" />
		<result property="inArrayId" column="in_array_id" />
		<result property="inArrayName" column="in_array_name" />
		<result property="inLovId" column="in_lov_id" />
		<result property="inLovName" column="in_lov_name" />
		<result property="outArrayId" column="out_array_id" />
		<result property="outArrayName" column="out_array_name" />
		<result property="outLovId" column="out_lov_id" />
		<result property="outLovName" column="out_lov_name" />
		<result property="convType" column="conv_type" />
		<result property="lang" column="lang" />
		<result property="name" column="label" />
		<result property="description" column="description" />
	</resultMap>
	
	<select id="get-arrays-conversion" parameterClass="qparams" resultMap="mapping-array-conversion">
		<include refid="paginatedOpen" />
		 SELECT t.id            
            , t.seqnum
			, t.in_array_id
			, get_text (i_table_name       => 'com_array',
	                    i_column_name      => 'label',
	                    i_object_id        => t.in_array_id,
	                    i_lang             => t.lang
	                   ) in_array_name
			, t.in_lov_id
			, get_text (i_table_name       => 'com_lov',
	                    i_column_name      => 'name',
	                    i_object_id        => t.in_lov_id,
	                    i_lang             => t.lang
	                   ) in_lov_name
			, t.out_array_id
			, get_text (i_table_name       => 'com_array',
	                    i_column_name      => 'label',
	                    i_object_id        => t.out_array_id,
	                    i_lang             => t.lang
	                   ) out_array_name
			, t.out_lov_id
			, get_text (i_table_name       => 'com_lov',
	                    i_column_name      => 'name',
	                    i_object_id        => t.out_lov_id,
	                    i_lang             => t.lang
	                   ) out_lov_name
			, t.conv_type
			, t.label
			, t.description
			, t.lang
		FROM
			COM_UI_ARRAY_CONVERSION_VW t
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">t.id like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(t.label) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="convType">t.conv_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
		</iterate>
		<iterate prepend="ORDER BY" conjunction=", " property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="id">t.id
					$sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="entityType">upper(t.label)
					$sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="inArrayName">upper(in_array_name)
					$sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="inLovName">upper(in_lov_name)
					$sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="outArrayName">upper(out_array_name)
					$sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="outLovName">upper(out_lov_name)
					$sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="convType">upper(t.conv_type)
					$sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="name">upper(t.label)
					$sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<isEmpty property="sorting" prepend="ORDER BY ">upper(t.label) ASC
		</isEmpty>
		<include refid="paginatedClose" />
	</select>

	<select id="get-arrays-conversion-count" parameterClass="qparams"
		resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT t.id
		FROM COM_UI_ARRAY_CONVERSION_VW t
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">t.id like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(t.label) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="convType">t.conv_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>
	
	<procedure id="add-array-conversion" parameterClass="ru.bpc.sv2.common.arrays.ArrayConversion">
		{call COM_UI_ARRAY_CONVERSION_PKG.add_array_conversion(
			o_id 				=> #id,jdbcType=NUMERIC,mode=OUT#
			, o_seqnum	 		=> #seqnum,jdbcType=NUMERIC,mode=OUT#
			, i_in_array_id 	=> #inArrayId#
  			, i_in_lov_id		=> #inLovId#
  			, i_out_array_id	=> #outArrayId#  
  			, i_out_lov_id    	=> #outLovId#
  			, i_conv_type		=> #convType#
			, i_lang 			=> #lang#
			, i_label 			=> #name#
			, i_description 	=> #description#
		)}
	</procedure>

	<procedure id="edit-array-conversion" parameterClass="ru.bpc.sv2.common.arrays.ArrayConversion">
		{call COM_UI_ARRAY_CONVERSION_PKG.modify_array_conversion(
			i_id 				=> #id#
			, io_seqnum 		=> #seqnum,jdbcType=NUMERIC,mode=INOUT#
			, i_in_array_id 	=> #inArrayId#
  			, i_in_lov_id		=> #inLovId#
  			, i_out_array_id	=> #outArrayId#  
  			, i_out_lov_id    	=> #outLovId#
  			, i_conv_type		=> #convType#
			, i_lang 			=> #lang#
			, i_label 			=> #name#
			, i_description 	=> #description#
		)}
	</procedure>

	<procedure id="delete-array-conversion" parameterClass="ru.bpc.sv2.common.arrays.ArrayConversion">
		{call COM_UI_ARRAY_CONVERSION_PKG.remove_array_conversion(
			i_id 		=> #id#
			, i_seqnum 	=> #seqnum#
			)}
	</procedure>
	
	<resultMap id="mapping-array-conv-elem" class="ru.bpc.sv2.common.arrays.ArrayConvElement">
		<result property="id" column="id" />
		<result property="convId" column="conv_id" />
		<result property="inElementValue" column="in_element_value" />
		<result property="outElementValue" column="out_element_value" />
		<result property="inValue" column="in_value" />
		<result property="outValue" column="out_value" />
	</resultMap>

	<select id="get-array-conv-elems" parameterClass="qparams"
		resultMap="mapping-array-conv-elem">
		<include refid="paginatedOpen" />
		SELECT 
            x.conv_elem_id id
			, x.id conv_id
			, x.in_element_value
			, x.out_element_value
            , x.in_lov_id
            , x.in_array_id
            , x.out_lov_id
            , x.out_array_id
            , nvl(ae1.label, ae1.element_lov_value) in_value
            , nvl(ae2.label, ae2.element_lov_value) out_value
		FROM
			(SELECT 
                c.*
                , t.in_element_value
                , t.out_element_value 
                , t.id conv_elem_id
             FROM 
                COM_UI_ARRAY_CONV_ELEM_VW t
                , com_ui_array_conversion_vw c
             WHERE
                t.conv_id = c.id 
            ) x
            , com_ui_array_element_vw ae1
            , com_ui_array_element_vw ae2            
        WHERE
            x.in_array_id = ae1.array_id(+)
            AND x.out_array_id = ae2.array_id(+)
            AND x.in_element_value = ae1.element_value(+)
            AND x.out_element_value = ae2.element_value(+)
		<iterate prepend=" AND " conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">x.conv_elem_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
				x.lang = #filters[].value#
	            AND ae1.lang(+) = #filters[].value#
	            AND ae2.lang(+) = #filters[].value#
			</isEqual>
			<isEqual property="filters[].element" compareValue="convId">x.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="inElementValue">x.in_element_value = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="outElementValue">x.out_element_value = #filters[].value#</isEqual>
		</iterate>
		<iterate prepend="ORDER BY" conjunction=", " property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="id">x.conv_elem_id $sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<include refid="paginatedClose" />
	</select>

	<select id="get-array-conv-elems-count" parameterClass="qparams"
		resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT 
           *
		FROM
			(SELECT 
                c.*
                , t.in_element_value
                , t.out_element_value 
                , t.id conv_elem_id
             FROM 
                COM_UI_ARRAY_CONV_ELEM_VW t
                , com_ui_array_conversion_vw c
             WHERE
                t.conv_id = c.id 
            ) x
            , com_ui_array_element_vw ae1
            , com_ui_array_element_vw ae2            
        WHERE
            x.in_array_id = ae1.array_id(+)
            AND x.out_array_id = ae2.array_id(+)
            AND x.in_element_value = ae1.element_value(+)
            AND x.out_element_value = ae2.element_value(+)
		<iterate prepend=" AND " conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">x.conv_elem_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
				x.lang = #filters[].value#
	            AND ae1.lang(+) = #filters[].value#
	            AND ae2.lang(+) = #filters[].value#
			</isEqual>
			<isEqual property="filters[].element" compareValue="convId">x.id	= #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="inElementValue">x.in_element_value = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="outElementValue">x.out_element_value = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<procedure id="add-array-conv-elem" parameterClass="ru.bpc.sv2.common.arrays.ArrayConvElement">
		{call COM_UI_ARRAY_CONV_ELEM_PKG.add_array_conv_elem(
			o_id 					=> #id,jdbcType=NUMERIC,mode=OUT#
			, i_conv_id 			=> #convId#
			, i_in_element_value 	=> #inElementValue#
			, i_out_element_value 	=> #outElementValue#
		)}
	</procedure>

	<procedure id="edit-array-conv-elem" parameterClass="ru.bpc.sv2.common.arrays.ArrayConvElement">
		{call COM_UI_ARRAY_CONV_ELEM_PKG.modify_array_conv_elem(
			i_id 					=> #id#
			, i_conv_id 			=> #convId#
			, i_in_element_value 	=> #inElementValue#
			, i_out_element_value 	=> #outElementValue#
		)}
	</procedure>

	<procedure id="delete-array-conv-elem" parameterClass="ru.bpc.sv2.common.arrays.ArrayConvElement">
		{call COM_UI_ARRAY_CONV_ELEM_PKG.remove_array_conv_elem(
			i_id 				=> #id#
		)}
	</procedure>
	
	<parameterMap id="mapping-get-flex-field-value" class="java.util.Map">
		<parameter property="fieldName" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="entityType" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="objectId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
	</parameterMap>
	
	<select id="get-flex-field-value" 
		resultClass="java.lang.String" 
		parameterMap="mapping-get-flex-field-value" >
		SELECT 
			com_api_flexible_data_pkg.get_flexible_value (
                  i_field_name		=> ?
				, i_entity_type		=> ?
				, i_object_id		=> ?  
            )
        FROM dual               
	</select>

	<select id="get-last-error" resultClass="string">
		SELECT COM_API_ERROR_PKG.get_last_error FROM dual               
	</select>

	<select id="get-array-out-element"
			parameterClass="qparams" 
			resultClass="string">
		SELECT t.out_element_value 
		FROM COM_UI_ARRAY_CONV_ELEM_VW t
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="convId">t.conv_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="inValue">t.in_element_value = #filters[].value#</isEqual>
		</iterate>
	</select>
	
	 <resultMap  id="mapping-appearance"
                class="ru.bpc.sv2.common.Appearance">
        <result property="id" column="id" />
        <result property="entityType" column="entity_type" />
        <result property="seqNum" column="seqnum" />
        <result property="objectId" column="object_id" />
        <result property="cssClass" column="css_class" />
        <result property="objectReference" column="object_reference" />
	</resultMap>
	
	<select id="get-appearance"
    		parameterClass="qparams"
    		resultMap="mapping-appearance" fetchSize="500">
		<include refid="paginatedOpen" />
	    	SELECT 	
	    			 id
	    		   , seqnum
	    		   , entity_type
	    		   , object_id
	    		   , object_reference
	    		   , css_class	  
	    	FROM
	    		com_appearance_vw 
	    	<iterate prepend="WHERE" conjunction="AND" property="filters">
	    		<isEqual property="filters[].element" compareValue="id">id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectReference">object_reference = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="cssClass">css_class = #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="entityType">entity_type $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
		<include refid="paginatedClose" />
	</select>
	
	<select id="get-appearance-count"
    		parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT
	    			 id
	    	FROM
	    		com_appearance_vw 
	    	<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="entityType">entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectReference">object_reference = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="cssClass">css_class = #filters[].value#</isEqual>
			</iterate>			
		<include refid="limitationClose"/>
	</select>
	
	<parameterMap class="ru.bpc.sv2.common.Appearance" id="appearance-map">
		<parameter property="id" javaType="java.lang.Long" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="seqNum" javaType="java.lang.Long" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="entityType" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>		
		<parameter property="objectId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="cssClass" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>		
		<parameter property="objectReference" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>
	
	<procedure id="add-appearance"
			parameterMap="appearance-map">
		{call com_ui_appearance_pkg.add_appearance(
			  o_id                =>  ?
        	, o_seqnum	          =>  ?
        	, i_entity_type       =>  ?
        	, i_object_id	      =>  ?
        	, i_css_class         =>  ?
        	, i_object_reference  =>  ?
		)}
	</procedure>
	
	<procedure id="remove-appearance"
			 parameterClass="ru.bpc.sv2.common.Appearance">
		{call com_ui_appearance_pkg.remove_appearance(
			  i_id         	      => #id#
			, i_seqnum            => #seqNum# 			
		)}
	</procedure>
	
	<parameterMap class="ru.bpc.sv2.common.Appearance" id="appearance-map-modify">
		<parameter property="id" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="seqNum" javaType="java.lang.Long" jdbcType="NUMERIC" mode="INOUT"/>
		<parameter property="entityType" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>		
		<parameter property="objectId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="cssClass" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="objectReference" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>		
	</parameterMap>
	
	<procedure id="modify-appearance"
			parameterMap="appearance-map-modify">
		{call com_ui_appearance_pkg.modify_appearance(
			  i_id                =>  ?
        	, io_seqnum	          =>  ?
        	, i_entity_type       =>  ?
        	, i_object_id	      =>  ?
        	, i_css_class         =>  ?
        	, i_object_reference  =>  ?
		)}
	</procedure>

	<parameterMap id="mapping-map-error-code" class="java.util.Map">
		<parameter property="mappedCode" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="errorCode" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>

	<procedure id="map-error-code"
			 parameterMap="mapping-map-error-code">
		{? = call COM_API_ERROR_PKG.get_error_code(i_error_code => ?)}
	</procedure>
	
	<procedure id="set-sysdate"
			 parameterClass="java.util.Date">			 
		{call com_api_sttl_day_pkg.set_sysdate(i_sysdate => #value,mode=IN,jdbcType=TIMESTAMP#)}
	</procedure>
	
	<resultMap  id="mapping-wizard-steps"
	            class="ru.bpc.sv2.common.CommonWizardStepInfo"  >
	    <result property="id" column="id" />
	    <result property="seqnum" column="seqnum" />
	    <result property="wizardId" column="wizard_id" />
	    <result property="order" column="step_order" />
	    <result property="source" column="step_source" />
	    <result property="name" column="name" />
	    <result property="lang" column="lang" />
	</resultMap>	
	
	<select id="get-wizard-steps"
			parameterClass="qparams" resultMap="mapping-wizard-steps">
		<include refid="paginatedOpen" />
			SELECT
				wsv.id
				,wsv.seqnum
				,wsv.wizard_id
				,wsv.step_order
				,wsv.step_source
				,wsv.name
				,wsv.lang
			FROM
				gui_ui_wizard_step_vw wsv
			<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">wsv.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="seqnum">wsv.seqnum = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="wizardId">wsv.wizard_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="stepOrder">wsv.step_order = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="stepSource">wsv.step_source = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">wsv.name = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">wsv.lang = #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">wsv.id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="seqnum">wsv.seqnum $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="wizardId">wsv.wizard_id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="stepOrder">wsv.step_order $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="stepSource">wsv.step_source $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="name">wsv.name $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="lang">wsv.lang $sorting[].direction$</isEqual>		
				</isNotEqual>
			</iterate>				
		<include refid="paginatedClose" />
	</select>
	
	<select id="get-wizard-steps-count"
			parameterClass="qparams"
			resultClass="int">
		SELECT
			count(wsv.id)
		FROM
			gui_ui_wizard_step_vw wsv
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">wsv.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="seqnum">wsv.seqnum = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="wizardId">wsv.wizard_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="stepOrder">wsv.step_order = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="stepSource">wsv.step_source = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">wsv.name = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">wsv.lang = #filters[].value#</isEqual>
		</iterate>			
	</select>





    <resultMap id="mapping-default-array-element" class="ru.bpc.sv2.common.arrays.DefaultArrayElement">
        <result property="id" column="id" />
        <result property="seqNum" column="seqnum" />
        <result property="arrayId" column="array_id" />
        <result property="elementNumber" column="element_number" />
        <result property="lang" column="lang" />
        <result property="name" column="label" />
        <result property="description" column="description" />
        <result property="dataType" column="data_type"/>
        <result property="lovId" column="lov_id"/>
        <result property="lovValue" column="lov_value"/>
        <result property="value" column="element_value"/>
        <result property="valueV" column="value_v"/>
        <result property="valueN" column="value_n"/>
        <result property="valueD" column="value_d"/>
    </resultMap>

    <select id="get-default-array-elements" parameterClass="qparams"
            resultMap="mapping-default-array-element">
        <include refid="paginatedOpen" />
        SELECT t.id
        , t.seqnum
        , t.array_id
        , t.element_value
        , t.element_number
        , t.label
        , t.description
        , t.lang
        , t.data_type
        , t.lov_id
        , t.element_char_value value_v
        , t.element_number_value value_n
        , t.element_date_value value_d
        , t.element_lov_value lov_value
        FROM
        com_ui_array_element_vw t
        <iterate prepend="WHERE" conjunction="AND" property="filters">
            <isEqual property="filters[].element" compareValue="id">t.id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="arrayId">t.array_id	= #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="elementValue">t.element_value = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="elementNumber">t.element_number = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="name">(upper(t.label) like #filters[].value# OR upper(t.element_lov_value) like #filters[].value#)</isEqual>
            <isEqual property="filters[].element" compareValue="description">upper(t.description) like #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
        </iterate>
        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
            <isNotEqual property="sorting[].direction" compareValue="AUTO">
                <isEqual property="sorting[].property" compareValue="id">t.id $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="entityType">upper(t.label)
                    $sorting[].direction$</isEqual>
            </isNotEqual>
        </iterate>
        <isEmpty property="sorting" prepend="ORDER BY ">upper(t.label) ASC
        </isEmpty>
        <include refid="paginatedClose" />
    </select>

    <select id="get-default-array-elements-count" parameterClass="qparams"
            resultClass="int">
        <include refid="limitationOpenCount"/>
        SELECT t.id
        FROM com_ui_array_element_vw t
        <iterate prepend="WHERE" conjunction="AND" property="filters">
            <isEqual property="filters[].element" compareValue="id">t.id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="arrayId">t.array_id	= #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="elementValue">t.element_value = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="elementNumber">t.element_number = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="name">(upper(t.label) like #filters[].value# OR upper(t.element_lov_value) like #filters[].value#)</isEqual>
            <isEqual property="filters[].element" compareValue="description">upper(t.description) like #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
        </iterate>
        <include refid="limitationClose"/>
    </select>

    <procedure id="add-default-array-element" parameterClass="ru.bpc.sv2.common.arrays.DefaultArrayElement">
        {call COM_UI_ARRAY_ELEMENT_PKG.add_array_element(
        o_id 				=> #id,jdbcType=NUMERIC,mode=OUT#
        , o_seqnum 			=> #seqNum,jdbcType=NUMERIC,mode=OUT#
        , i_array_id 		=> #arrayId#
        , i_data_type 		=> #dataType#
        , i_value_char		=> #valueV#
        , i_value_number	=> #valueN#
        , i_value_date		=> #valueD#
        , i_element_number 	=> #elementNumber#
        , i_lang 			=> #lang#
        , i_label 			=> #name#
        , i_description 	=> #description#
        )}
    </procedure>

    <procedure id="edit-default-array-element" parameterClass="ru.bpc.sv2.common.arrays.DefaultArrayElement">
        {call COM_UI_ARRAY_ELEMENT_PKG.modify_array_element(
        i_id 				=> #id#
        , io_seqnum 		=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
        , i_array_id 		=> #arrayId#
        , i_data_type 		=> #dataType#
        , i_value_char		=> #valueV#
        , i_value_number	=> #valueN#
        , i_value_date		=> #valueD#
        , i_element_number 	=> #elementNumber#
        , i_lang 			=> #lang#
        , i_label 			=> #name#
        , i_description 	=> #description#
        )}
    </procedure>

    <procedure id="delete-default-array-element" parameterClass="ru.bpc.sv2.common.arrays.DefaultArrayElement">
        {call COM_UI_ARRAY_ELEMENT_PKG.remove_array_element(
        i_id 				=> #id#
        , i_seqnum 			=> #seqNum#
        )}
    </procedure>


    <resultMap  id="mapping-atm-group"
                class="ru.bpc.sv2.common.arrays.AtmGroup" extends="mapping-array" >
        <result property="atmId" column="atm_id" />
        <result property="elementId" column="element_id" />
        <result property="elementSeqNum" column="element_seqnum" />
        <result property="agentNumber" column="agent_number" />

    </resultMap>

    <select id="get-atm-groups" parameterClass="qparams" resultMap="mapping-atm-group">
        <include refid="paginatedOpen" />
        SELECT
            t.id
          , t.seqnum
          , t.array_type_id
          , a.name as array_type_name
          , a.data_type
          , a.lov_id
          , t.inst_id
          , i.name as inst_name
          , t.label
          , t.description
          , t.lang
          , t.mod_id
          , t.agent_id
          , (case when t.is_private is null or t.is_private = 0 then 0 else 1 end)is_private
          , m.name as modifier_name
          , ag.name as agent_name
          , a.class_name as class_name
          , e.numeric_value as atm_id
          , e.id as element_id
          , e.seqnum as element_seqnum
          , ag.agent_number
        FROM
          com_ui_array_vw t,
          com_array_element e,
          com_ui_array_type_vw a,
          ost_ui_institution_sys_vw i,
          rul_ui_mod_vw m,
          ost_ui_agent_vw ag
        WHERE
              t.id=e.array_id(+)
          AND t.array_type_id = a.id(+) AND t.lang = a.lang(+)
          AND t.inst_id = i.id(+) AND t.lang = i.lang(+)
          AND t.mod_id = m.id(+) AND t.lang = m.lang(+)
          AND t.agent_id = ag.id(+) AND t.lang = ag.lang(+)

        <iterate prepend=" AND " conjunction="AND" property="filters">
            <isEqual property="filters[].element" compareValue="atmId">e.numeric_value = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="lang">
                t.lang = #filters[].value#
            </isEqual>
            <isEqual property="filters[].element" compareValue="arrayTypeId">t.array_type_id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="id">t.id = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="elementId">e.id = #filters[].value#</isEqual>
        </iterate>

        <iterate prepend="ORDER BY" conjunction=", " property="sorting">
            <isNotEqual property="sorting[].direction" compareValue="AUTO">
                <isEqual property="sorting[].property" compareValue="instName">i.name $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="agentName">ag.name $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="modifierName">m.name $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="name">t.label $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="isPrivate">is_private $sorting[].direction$</isEqual>
                <isEqual property="sorting[].property" compareValue="description">t.description $sorting[].direction$</isEqual>

            </isNotEqual>
        </iterate>
        <include refid="paginatedClose" />
    </select>

    <select id="get-atm-groups-count" parameterClass="qparams"
            resultClass="int">
        <include refid="limitationOpenCount"/>
        SELECT
        t.id
        FROM
        com_ui_array_vw t,
        com_array_element e
        WHERE
        t.id=e.array_id(+)
        <iterate prepend=" AND " conjunction="AND" property="filters">
            <isEqual property="filters[].element" compareValue="atmId">e.numeric_value = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="arrayTypeId">t.array_type_id = #filters[].value#</isEqual>
        </iterate>
        <include refid="limitationClose"/>
    </select>

    <procedure id="remove-atm-from-group" parameterClass="ru.bpc.sv2.common.arrays.AtmGroup">
        {call COM_UI_ARRAY_ELEMENT_PKG.remove_array_element(
          i_id 				=> #elementId#
        , i_seqnum 			=> #elementSeqNum#
        )}
    </procedure>

    <procedure id="add-atm-to-group" parameterClass="ru.bpc.sv2.common.arrays.ArrayElement">
        {call COM_UI_ARRAY_ELEMENT_PKG.add_array_element(
        o_id 				=> #id,jdbcType=NUMERIC,mode=OUT#
        , o_seqnum 			=> #seqNum,jdbcType=NUMERIC,mode=OUT#
        , i_array_id 		=> #arrayId#
        , i_data_type 		=> #dataType#
        , i_value_char		=> #valueV#
        , i_value_number	=> #valueN#
        , i_value_date		=> #valueD#
        , i_element_number 	=> #elementNumber#
        , i_lang 			=> #lang#
        , i_label 			=> #name#
        , i_description 	=> #description#
        )}
    </procedure>
    
    <select id="get-split-hash"
    	resultClass="int" parameterClass="java.lang.String">
    	select com_api_hash_pkg.get_split_hash(i_value => #value#) from dual
    </select>

 	<select id="get-open-sttl-date"
    	resultClass="java.util.Date" parameterClass="java.lang.Integer">
    	select com_api_sttl_day_pkg.get_open_sttl_date(i_inst_id => #value#) from dual
    </select>
    
    <select id="get-calc-date"
    	resultClass="java.util.Date" parameterClass="java.lang.Integer">
    	select com_api_sttl_day_pkg.get_calc_date(i_inst_id => #value#) from dual
    </select>
    
    <resultMap id="mapping-user-session-info" class="ru.bpc.sv2.process.ProcessSession">
		<result property="sessionId" column="id"/>
		<result property="startDate" column="start_time"/>
		<result property="endDate" column="end_time"/>
		<result property="userName" column="user_name"/>
		<result property="address" column="ip_address"/>
	</resultMap>
    
    <select id="user-session-info" parameterClass="qparams"
			resultMap="mapping-user-session-info">
    	<include refid="paginatedOpen"/>
    	select
		    a.id
		  , a.start_time
		  , nvl(a.end_time, (select max(case when s.current_count * s.estimated_count > 0 then s.start_time + (s.current_time - s.start_time) / s.current_count * s.estimated_count else s.start_time end) from prc_stat s where session_id = a.id)) end_time
		  , get_object_desc(i_entity_type => 'ENTTPERS', i_object_id => u.person_id) user_name
		  , a.ip_address
		from
		    prc_session_vw a
		  , acm_user u
		where u.id(+) = a.user_id
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="sessionId">a.id=#filters[].value#</isEqual>
		</iterate>
		<include refid="paginatedClose"/>
    </select>

	<select id="current-user-session-id" resultClass="java.lang.String">
		select prc_api_session_pkg.get_session_id from dual
	</select>

	<select id="get-contact-user"
			parameterClass="qparams"
			resultMap="mapping-contact-data">
		<include refid="limitationOpen"/>
		select d.id
		, d.contact_id
		, d.commun_method
		, d.commun_address
		, d.start_date
		, d.end_date
		from com_contact_data d, com_contact_object o
		where o.contact_id=d.contact_id
		<iterate prepend="AND" conjunction="AND " property="filters">
			<isEqual property="filters[].element" compareValue="objectId">o.object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entity_type">o.entity_type = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<resultMap id="mapping-user-session-info-ex" class="ru.bpc.sv2.process.ProcessSession">
		<result property="sessionId" column="prc_session_id"/>
		<result property="startDate" column="start_time"/>
		<result property="endDate" column="end_time"/>
		<result property="userName" column="user_name_per"/>
		<result property="address" column="ip_address"/>
	</resultMap>

	<resultMap  id="mapping-audit-trail-full"
				class="ru.bpc.sv2.audit.AuditTrail">
		<result property="id" column="adt_trail_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="objectId" column="object_id"/>
		<result property="actionType" column="action_type"/>
		<result property="actionDate" column="action_time"/>
		<result property="userId" column="user_id"/>
		<result property="privId" column="priv_id"/>
		<result property="sessionId" column="session_id"/>
		<result property="status" column="status"/>
		<result property="userName" column="user_name"/>
		<result property="privName" column="priv_name"/>
		<result property="trailDetails" resultMap="common.mapping-audit-log-details" />
		<result property="processSession" resultMap="common.mapping-user-session-info-ex" />
	</resultMap>

	<select
			id="get-audit-trails-full"
			parameterClass="qparams"
			resultMap="mapping-audit-trail-full">
		<include refid="paginatedOpen"/>
		SELECT
		t.id adt_trail_id
		, t.entity_type
		, t.object_id
		, t.action_type
		, t.action_time
		, t.user_id
		, t.priv_id
		, t.session_id
		, t.status
		, u.user_name
		, p.short_desc AS priv_name
		, a.id
		, a.trail_id
		, a.column_name
		, a.data_type
		, CASE
		WHEN a.column_name = 'CARD_NUMBER' AND a.old_char_value IS NOT NULL
		THEN iss_api_card_pkg.get_card_mask(i_card_number => a.old_char_value)
		ELSE a.old_char_value
		END old_value_v
		, a.old_number_value old_value_n
		, a.old_date_value old_value_d
		, CASE
		WHEN a.column_name = 'CARD_NUMBER' AND a.new_char_value IS NOT NULL
		THEN iss_api_card_pkg.get_card_mask(i_card_number => a.new_char_value)
		ELSE a.new_char_value
		END new_value_v
		, a.new_number_value new_value_n
		, a.new_date_value new_value_d

		, s.id as prc_session_id
		, s.start_time
		, nvl(s.end_time, (select max(case when ss.current_count * ss.estimated_count > 0 then ss.start_time + (ss.current_time - ss.start_time) / ss.current_count * ss.estimated_count else ss.start_time end) from prc_stat ss where ss.session_id = s.id)) end_time
		, get_object_desc(i_entity_type => 'ENTTPERS', i_object_id => u.person_id) user_name_per
		, s.ip_address

		FROM adt_ui_trail_vw t, acm_ui_user_vw u, acm_ui_privilege_vw p, adt_ui_detail_vw a, prc_session_vw s
		WHERE t.user_id = u.user_id(+) AND t.priv_id = p.id(+) AND a.trail_id(+) = t.id AND s.id(+) = t.session_id
		AND u.lang(+) = com_ui_user_env_pkg.get_user_lang
		AND p.lang(+) = com_ui_user_env_pkg.get_user_lang
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">t.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="entityType">t.entity_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="objectId">t.object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="actionType">t.action_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="actionDateFrom">t.action_time >= #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="actionDateTo">t.action_time <![CDATA[<=]]>  #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="userId">t.user_id like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="privId">t.priv_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="sessionId">t.session_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="status">t.status = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="userName">u.user_name LIKE #filters[].value#</isEqual>
		</iterate>
		<iterate prepend="ORDER BY" conjunction=", " property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="id">t.id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="entityType">t.entity_type $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="actionType">t.action_type $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="actionDate">t.action_time $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="userId">t.user_id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="privName">priv_name $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="sessionId">t.session_id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="status">t.status $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="userName">user_name $sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<include refid="paginatedClose"/>
	</select>

	<procedure id="set-session-file-id" parameterClass="java.lang.Long">
		{call prc_api_file_pkg.set_session_file_id(i_sess_file_id => #value#)}
	</procedure>

    <select id="get-unique-i18n-strings"
            parameterClass="qparams"
            resultClass="java.lang.String">
        SELECT
            DISTINCT(text)
        FROM
           com_i18n
        <iterate prepend=" WHERE " conjunction="AND " property="filters">
            <isEqual property="filters[].element" compareValue="lang">lang = #filters[].value#</isEqual>
        </iterate>
        ORDER BY text ASC
    </select>

    <parameterMap class="java.util.Map" id="translate-text-map">
        <parameter property="src_lang" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
        <parameter property="dst_lang" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
        <parameter property="text_trans" jdbcType="COM_TEXT_TRANS_TPT" typeName="COM_TEXT_TRANS_TPT" typeHandler="ru.bpc.sv2.utils.TranslationTextTypeHandler" mode="IN"/>
    </parameterMap>

    <procedure id="load-translation-text" parameterMap="translate-text-map">
        {call com_api_i18n_pkg.load_translation(
            i_src_lang => ?,
            i_dst_lang => ?,
            i_text_trans => ?
        )}
    </procedure>

</sqlMap>
