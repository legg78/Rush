taskKey="com.javarush.games.moonlander.part05"\n\nИгра Moon Lander (5/23)

Мы будем часто пользоваться такими параметрами как ширина и высота игрового объекта. Следовательно, вынесем их в
отдельные переменные класса GameObject. Чтобы объект мог отрисовываться на игровом поле, добавим ему метод draw.
Этот метод будет принимать в качестве параметра объект класса Game. Теперь мы сможем задавать цвет ячейки на экране,
вызвав метод setCellColor с нужными параметрами. Обрати внимание, что x и y объекта типа GameObject — это координаты
левого верхнего угла матрицы matrix. Чтобы отобразить объект matrix на игровом поле, в качестве параметров
в метод setCellColor необходимо передать: x объекта + x в матрице, y объекта + y в матрице, цвет из матрицы (см. подсказку ниже).
В конце данной подзадачи мы отрисуем ракету, используя созданный метод.

Подсказка:
В классе ShapeMatrix числа обозначают порядковый номер цвета из enum Color(игрового движка).
Чтоб получить цвет, нужно использовать Color.values()[matrix[y][x]].


Требования:
1.	В классе GameObject должно существовать публичное поле width типа int.
2.	В классе GameObject должно существовать публичное поле height типа int.
3.	В конструкторе класса GameObject поле width должно инициализироваться значением matrix[0].length, где matrix &mdash; последний параметр конструктора.
4.	В конструкторе класса GameObject поле height должно инициализироваться значением matrix.length, где matrix &mdash; последний параметр конструктора.
5.	В классе GameObject должен существовать публичный метод void draw(Game).
6.	Метод draw(Game) не должен ничего делать, если поле класса matrix == null.
7.	В методе draw(Game game) у объекта game должен быть вызван метод setCellColor(int, int, Color) для каждой ячейки матрицы matrix. В качестве параметров необходимо передать: x класса + x в матрице, y класса + y в матрице, цвет из матрицы.
8.	В классе MoonLanderGame должно существовать приватное поле rocket типа Rocket.
9.	Поле rocket должно быть проинициализировано в методе createGame() новым объектом типа Rocket до вызова метода drawScene().
10.	Конструктор класса Rocket должен быть вызван с параметрами (WIDTH / 2) и 0.
11.	В методе drawScene() после отрисовки поля, у ракеты должен быть вызван метод draw(Game). В качестве параметра передай в метод &quot;this&quot;.
12.	В классе GameObject должен быть импорт всего содержимого пакета com.javarush.engine.cell.


Игра Moon Lander (4/23)

Кроме координат, у игрового объекта будет матрица, отвечающая за внешний вид. Давай добавим в класс GameObject
переменную matrix типа int[][] для ее хранения. А теперь займемся посадочным лунным модулем.
Для простоты будем называть его просто ракетой. Создадим класс Rocket, наследуемый от класса GameObject, так как ракета — это игровой объект.
Обрати внимание, что у нас появился вспомогательный класс
ShapeMatrix, который хранит матрицу, отвечающую за внешний вид ракеты.



Игра Moon Lander (3/23)

Так как в Moon Lander будут использоваться игровые объекты, давай создадим класс GameObject, в который вынесем
их общие характеристики. На данном этапе это координаты x и y.



Игра Moon Lander (2/23)

На данном этапе давай создадим метод drawScene(), который будет отвечать за отрисовку игрового поля.
Сперва в этом методе мы будем окрашивать все ячейки игрового поля в один цвет.
Также нам понадобится метод createGame(),отвечающий за создание игры.
Для начала мы будем вызывать в нем только метод отрисовки drawScene().
Сам метод createGame() вызовем в методе initialize() после вызова setScreenSize(int, int).



Игра Moon Lander (1/23)

Сегодня мы предлагаем тебе написать увлекательную игру — Moon Lander. Как всегда, начнем с правил.
Цель – опустить посадочный модуль на лунную поверхность. Для этого игроку нужно преодолеть притяжение Луны,
используя кормовой ускоритель для замедления падения и боковые ускорители для перемещения корабля влево или вправо.
Рельеф у местности ухабистый, и есть всего одна плоская область для мягкой посадки — «платформа». Если игрок успешно совершает посадку, он выигрывает.
Количество очков зависит от длительности посадки: чем дольше игрок совершает посадку, тем меньше очков он получит в итоге. Игра окончена, когда игрок разбивается
о поверхность Луны. Итак, начнем с главного класса игры MoonLanderGame. Унаследуем его от класса Game. Этот класс, как ты помнишь, содержит в себе методы,
которые помогут нам в реализации игры.
Теперь реализуем игровое поле. Для этого нам необходимо переопределить метод initialize(), в котором, в свою очередь, нужно вызвать метод setScreenSize(int, int).
Этот метод задает ширину и высоту игрового поля, которые он принимает в качестве параметров. Их будем хранить в переменных.



