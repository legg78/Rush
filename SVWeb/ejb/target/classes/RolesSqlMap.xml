<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="roles">

    <!--
        Common sql configuration not included in SqlMapConfig
     -->
    <sql id="limitationOpen">
            SELECT *
            FROM (                
    </sql>
    
    <sql id="limitationOpenCount">
            SELECT count(*)
            FROM (                
    </sql>
    
    <sql id="limitationClose">               
            	) q
            <isNotNull property="limitation" prepend=" WHERE ">$limitation$</isNotNull>
    </sql>
     
    <sql id="paginatedOpen">
            SELECT *
            FROM(
                SELECT a.*, rownum r
                FROM(
		<include refid="limitationOpen"/>
    </sql>

    <sql id="paginatedClose">
    	<include refid="limitationClose"/>
                    ) a
                WHERE rownum <![CDATA[<]]>= (#range.end# + 1)
            )
            WHERE r >= (#range.start# + 1)
    </sql>

	<resultMap  id="mapping-inst-acm"
                class="ru.bpc.sv2.orgstruct.Institution"  >
        <result property="id" column="id" />
        <result property="name" column="name"/>
        <result property="description" column="description" />
        <result property="lang" column="lang"/>
        <result property="parentId" column="parent_id" />
        <result property="level" column="level" />
        <result property="isLeaf" javaType="boolean" column="is_leaf" />
        <result property="defaultForUser" javaType="boolean" column="is_default" />
        <result property="entirelyForUser" javaType="boolean" column="is_entirely" />
        <result property="assignedToUser" javaType="boolean" column="is_assigned" />
        <result property="grantType" column="grant_type" />
	</resultMap>

	<resultMap  id="mapping-agent-acm"
                class="ru.bpc.sv2.orgstruct.Agent"  >
        <result property="id" column="id" />
        <result property="instId" column="inst_id" />
        <result property="name" column="name" />
        <result property="parentId" column="parent_id" />
        <result property="type" column="agent_type" />
        <result property="isDefault" column="is_default" />
        <result property="level" column="level" />
        <result property="isLeaf" javaType="boolean" column="is_leaf" />
        <result property="defaultForUser" javaType="boolean" column="is_default_for_user" />
        <result property="assignedToUser" javaType="boolean" column="is_assigned" />
        <result property="grantType" column="grant_type" />
	</resultMap>
	
	<resultMap  id="mapping-agent-acm-agent"
                class="ru.bpc.sv2.orgstruct.Agent"  >
        <result property="id" column="id" />
        <result property="instId" column="inst_id" />
        <result property="name" column="name" />
        <result property="parentId" column="parent_id" />
        <result property="type" column="agent_type" />
        <result property="isDefault" column="is_default" />
        <result property="level" column="level" />
        <result property="isLeaf" javaType="boolean" column="is_leaf" />
        <result property="defaultForUser" javaType="boolean" column="is_default_for_user" />
        <result property="defaultForInst" javaType="boolean" column="is_default_for_inst" />
        <result property="assignedToUser" javaType="boolean" column="is_assigned" />
        <result property="grantType" column="grant_type" />
	</resultMap>

	<parameterMap id="mapping-object-role" class="java.util.Map">
		<parameter property="roleId" javaType="int" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="objectId" javaType="int" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="id" javaType="int" jdbcType="NUMERIC" mode="INOUT"/>
	</parameterMap>

	<parameterMap id="mapping-remove-user-role" class="java.util.Map">
		<parameter property="roleId" javaType="int" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="userId" javaType="int" jdbcType="NUMERIC" mode="IN"/>
	</parameterMap>

	<parameterMap id="mapping-user-agent" class="java.util.Map">
		<parameter property="userId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="objectId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="isDefault" javaType="boolean" jdbcType="NUMBER" mode="IN"/>
		<parameter property="id" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="INOUT"/>
		<parameter property="force" javaType="boolean" jdbcType="NUMBER" mode="IN"/>
	</parameterMap>

	<parameterMap id="mapping-user-remove" class="java.util.Map">
		<parameter property="userId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="objectId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
	</parameterMap>

	<parameterMap id="mapping-priv-to-role" class="java.util.Map">
		<parameter property="id" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="INOUT"/>
		<parameter property="roleId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="privId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
	</parameterMap>

	<parameterMap id="mapping-priv-from-role" class="java.util.Map">
		<parameter property="roleId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="privId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
	</parameterMap>

	<parameterMap id="mapping-role-from-role" class="java.util.Map">
		<parameter property="subroleId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="roleId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
	</parameterMap>

	<parameterMap id="mapping-role-to-role" class="java.util.Map">
		<parameter property="subroleId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="roleId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="id" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="INOUT"/>
	</parameterMap>

    <resultMap id="mapping-privilege" class="ru.bpc.sv2.administrative.roles.Privilege">
        <result property="id" column="priv_id"/>
        <result property="name" column="priv_name"/>
        <result property="shortDesc" column="short_desc"/>
        <result property="fullDesc" column="full_desc"/>
        <result property="lang" column="lang"/>
        <result property="sectionId" column="section_id"/>
        <result property="moduleCode" column="module_code"/>
        <result property="isActive" column="is_active"/>
    </resultMap>

    <resultMap  id="mapping-role-privilege"
                class="ru.bpc.sv2.administrative.roles.Privilege"
                extends="mapping-privilege">
        <result property="limitationId" column="limit_id"/>
        <result property="limitationLabel" column="limitation_label"/>
        <result property="roleName" column="role_name"/>
        <result property="roles" column="roles"/>
    </resultMap>

    <resultMap  id="mapping-privilege-node"
                class="ru.bpc.sv2.administrative.roles.PrivilegeNode" >
        <result property="privilege" resultMap="roles.mapping-privilege" />
    </resultMap>

    <resultMap  id="mapping-privilege-node-assignable"
                class="ru.bpc.sv2.administrative.roles.PrivilegeNode"
                extends="mapping-privilege-node">
        <result property="assigned" column="role_id" typeHandler="ru.bpc.sv2.logic.utility.db.IsNotNullTypeHandlerCallback" />
    </resultMap>

    <resultMap  id="mapping-privilege-group-node"
                class="ru.bpc.sv2.administrative.roles.PrivilegeGroupNode"  >
        <result property="id" column="priv_id" />
        <result property="name" column="priv_name" />
    </resultMap>

    <resultMap  id="mapping-privilege-group-node-assignable"
                class="ru.bpc.sv2.administrative.roles.PrivilegeGroupNode"
                extends="mapping-privilege-group-node" >
        <result property="assigned" column="role_id" typeHandler="ru.bpc.sv2.logic.utility.db.IsNotNullTypeHandlerCallback" />
    </resultMap>

	<resultMap  id="mapping-role-light"
                class="ru.bpc.sv2.administrative.roles.ComplexRole">
        <result property="id" column="role_id"/>
        <result property="name" column="role_name"/>
        <result property="shortDesc" column="short_desc"/>
        <result property="fullDesc" column="full_desc"/>
        <result property="lang" column="lang"/>
	</resultMap>

	<resultMap  id="mapping-role"
                class="ru.bpc.sv2.administrative.roles.ComplexRole"
                extends="mapping-role-light">
        <result property="notifSchemeId" column="notif_scheme_id"/>
        <result property="notifSchemeName" column="notif_scheme_name"/>
	</resultMap>

    <resultMap  id="mapping-role-hier"
                class="ru.bpc.sv2.administrative.roles.ComplexRole"
                extends="mapping-role-light">
        <result property="isLeaf" column="is_leaf" />
        <result property="level" column="level" />
	</resultMap>

    <resultMap  id="mapping-role-binding"
                class="ru.bpc.sv2.administrative.roles.ComplexRole" extends="mapping-role">
        <result property="bindId" column="bind_id"/>
	</resultMap>

	<select id="get-roles"
	    	parameterClass="qparams"
	    	resultMap="mapping-role" >
		<include refid="paginatedOpen"/>
			SELECT
					  a.id AS role_id
					, a.name AS role_name
					, a.short_desc
					, a.full_desc
					, a.lang
					, a.notif_scheme_id
					, s.name notif_scheme_name
			FROM acm_ui_role_vw a, ntf_ui_scheme_vw s
			WHERE 
				a.notif_scheme_id = s.id(+)				
			<iterate prepend=" AND " conjunction=" AND " property="filters">
				<isEqual property="filters[].element" compareValue="id">a.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">
					a.lang = #filters[].value#
					AND s.lang(+) = #filters[].value#
				</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(a.name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="shortDesc">upper(a.short_desc) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="privilegeId">
					(
						a.id IN (
							SELECT b.role_id FROM acm_ui_role_privilege_vw b 
							WHERE b.priv_id = #filters[].value#
						) OR a.id IN (
      					  select
					      parent_role_id
					      from acm_ui_role_role_vw start with child_role_id in
					      (
					         select
					         role_id
					         from acm_ui_role_privilege_vw
					         where priv_id = #filters[].value#
					      )
					      connect by prior parent_role_id = child_role_id
						)
					)
				</isEqual>
				<isEqual property="filters[].element" compareValue="ids">
					<isNotEmpty property="filters[].valueList">
						a.id in (
						<iterate conjunction="," property="filters[].valueList">
							#filters[].valueList[]#
						</iterate>
						)
					</isNotEmpty>
				</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="name">a.name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="shortDesc">upper(a.short_desc) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="notifScheme">upper(notif_scheme_name) $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-roles-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
		SELECT 
			*
		FROM 
			acm_ui_role_vw a
		<iterate prepend=" WHERE " conjunction=" AND " property="filters">
			<isEqual property="filters[].element" compareValue="id">a.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">
					a.lang = #filters[].value#					
			</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(a.name) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="shortDesc">upper(a.short_desc) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="privilegeId">
				(
					a.id IN (
						SELECT b.role_id FROM acm_ui_role_privilege_vw b 
						WHERE b.priv_id = #filters[].value#
					) OR a.id IN (
						SELECT parent_role_id FROM acm_ui_role_role_vw 
						WHERE child_role_id IN (
						    SELECT child_role_id FROM acm_ui_role_role_vw 
						    WHERE parent_role_id = a.id
						) AND child_role_id IN (
								SELECT c.role_id FROM acm_ui_role_privilege_vw c 
								WHERE c.priv_id = #filters[].value#
							)
					)
				)
			</isEqual>
			<isEqual property="filters[].element" compareValue="ids">
				<isNotEmpty property="filters[].valueList">
					a.id in (
					<iterate conjunction="," property="filters[].valueList">
						#filters[].valueList[]#
					</iterate>
					)
				</isNotEmpty>
			</isEqual>
		</iterate>
		<include refid="limitationClose"/>
    </select>

    <select id="get-role-by-id"
	    	parameterClass="ru.bpc.sv2.administrative.roles.ComplexRole"
	    	resultMap="mapping-role">
		SELECT
				  a.id AS role_id
				, a.name AS role_name
				, a.short_desc
				, a.full_desc
				, a.lang
				, a.notif_scheme_id
				, s.name notif_scheme_name
		FROM acm_ui_role_vw a, ntf_ui_scheme_vw s
		WHERE a.id = #id# 
				AND a.lang = #lang#
	</select>

    <select id="get-langs-by-role"
			parameterClass="ru.bpc.sv2.administrative.roles.ComplexRole"
			resultClass="String">
		SELECT lang
		FROM acm_ui_role_vw a
		WHERE a.id = #id#
	</select>

    <select id="get-role-subroles"
	    	parameterClass="qparams"
	    	resultMap="mapping-role-hier" >
		SELECT
				level
				, r.id role_id
				, r.name role_name
				, r.short_desc
				, r.full_desc
				, r.lang
				, CONNECT_BY_ISLEAF as is_leaf
		FROM
				acm_ui_role_vw r, acm_ui_role_role_vw rr
		WHERE
				r.lang = com_ui_user_env_pkg.get_user_lang() AND
				r.ID = rr.CHILD_ROLE_ID
		START WITH 
				r.lang = com_ui_user_env_pkg.get_user_lang()
				<iterate prepend="AND" conjunction="" property="filters">
					<isEqual property="filters[].element" compareValue="parentRoleId">rr.parent_role_id = #filters[].value#</isEqual>
				</iterate>
		CONNECT BY PRIOR r.id = rr.parent_role_id
				AND prior r.lang = r.lang
		ORDER SIBLINGS BY r.id
	</select>

    <select id="get-roles-not-assigned-to-object"
	    	parameterClass="qparams"
	    	resultMap="mapping-role" >
		<include refid="paginatedOpen"/>
            SELECT
                  r.id AS role_id
                  , r.name AS role_name
                  , r.short_desc
                  , r.full_desc
                  , r.lang
                  , r.notif_scheme_id
                  , s.name notif_scheme_name
            FROM acm_ui_role_vw r, ntf_ui_scheme_vw s
			WHERE
               	r.lang = com_ui_user_env_pkg.get_user_lang()
				AND r.notif_scheme_id = s.id(+)
				AND r.lang = s.lang(+)
			<iterate prepend=" AND " conjunction=" AND " property="filters">
				<isEqual property="filters[].element" compareValue="userId">
						r.id NOT IN (SELECT
										ur.role_id
									FROM
										acm_ui_user_role_vw ur
									WHERE
										ur.user_id = #filters[].value#
									)
				</isEqual>
				<isEqual property="filters[].element" compareValue="processId">
						r.id NOT IN (SELECT
										rp.role_id
									FROM
										acm_ui_role_process_vw rp
									WHERE
										rp.object_id = #filters[].value#
										AND rp.entity_type ='ENTTPRCS'
									)
				</isEqual>
				<isEqual property="filters[].element" compareValue="reportId">
						r.id NOT IN (SELECT
										rr.role_id
									FROM
										acm_ui_role_report_vw rr
									WHERE
										rr.object_id = #filters[].value#
									)
				</isEqual>
				<isEqual property="filters[].element" compareValue="roleId">
						r.id NOT IN (SELECT
										rr.child_role_id
									FROM
										acm_ui_role_role_vw rr
									WHERE
										rr.parent_role_id = #filters[].value#
									) and r.id != #filters[].value#
				</isEqual>				
				<isEqual property="filters[].element" compareValue="name">upper(r.name) LIKE #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="shortDesc">upper(r.short_desc) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="privilegeId">
					r.id IN (SELECT b.role_id FROM acm_ui_role_privilege_vw b WHERE b.priv_id = #filters[].value#)
				</isEqual>
				<isEqual property="filters[].element" compareValue="selectedRoles">
					<isNotEmpty property="filters[].valueList">
						r.id not in (
						<iterate conjunction="," property="filters[].valueList">
							#filters[].valueList[]#
						</iterate>
						)
					</isNotEmpty>
				</isEqual>
				<isEqual property="filters[].element" compareValue="notifSchemeId">r.notif_scheme_id = #filters[].value#</isEqual>
			</iterate>

			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="name">r.name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="shortDesc">r.short_desc $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-roles-not-assigned-to-object-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
		SELECT
			*
		FROM
			acm_ui_role_vw r
		WHERE
			r.lang = com_ui_user_env_pkg.get_user_lang()
		<iterate prepend=" AND " conjunction=" AND " property="filters">
			<isEqual property="filters[].element" compareValue="userId">
					r.id NOT IN (SELECT
									ur.role_id
								FROM
									acm_ui_user_role_vw ur
								WHERE
									ur.user_id = #filters[].value#
								)
			</isEqual>
			<isEqual property="filters[].element" compareValue="processId">
					r.id NOT IN (SELECT
										rp.role_id
									FROM
										acm_ui_role_process_vw rp
									WHERE
										rp.object_id = #filters[].value#
										AND rp.entity_type ='ENTTPRCS'
									)
			</isEqual>
			<isEqual property="filters[].element" compareValue="reportId">
						r.id NOT IN (SELECT
										rr.role_id
									FROM
										acm_ui_role_report_vw rr
									WHERE
										rr.object_id = #filters[].value#
									)
				</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(r.name) LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="shortDesc">upper(r.short_desc) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="privilegeId">
				r.id IN (SELECT b.role_id FROM acm_ui_role_privilege_vw b WHERE b.priv_id = #filters[].value#)
			</isEqual>
			<isEqual property="filters[].element" compareValue="selectedRoles">
				<isNotEmpty property="filters[].valueList">
					r.id not in (
					<iterate conjunction="," property="filters[].valueList">
						#filters[].valueList[]#
					</iterate>
					)
				</isNotEmpty>
			</isEqual>
		</iterate>
		<include refid="limitationClose"/>
    </select>

     <!--
        Queries related to roles list loading
     -->

	<select id="get-role-privs"
	    	parameterClass="qparams"
	    	resultMap="mapping-role-privilege" >
		<include refid="paginatedOpen"/>
			select priv.id as priv_id
				 , priv.name as priv_name
				 , priv.section_id
				 , priv.short_desc
				 , priv.full_desc
				 , priv.lang
				 , priv.module_code
				 , priv.is_active
				 , role_priv.limit_id
				 , role_priv.limitation_label
				 , listagg(role_priv.role_id, com_api_const_pkg.get_separator)
				   within group (order by role_priv.role_id) AS roles
				 , listagg(role_priv.role_name, com_api_const_pkg.get_separator)
				   within group (order by role_priv.role_name) AS role_name
			  from acm_ui_role_privilege_vw role_priv,
				   acm_ui_privilege_vw priv
			 where priv.lang = com_ui_user_env_pkg.get_user_lang()
			   and role_priv.priv_id = priv.id
			<iterate prepend=" AND " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="roleId">role_priv.role_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="roleIds">role_priv.role_id IN ($filters[].value$)</isEqual>
				<isEqual property="filters[].element" compareValue="name">priv.name like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="shortDesc">priv.short_desc like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="privId">priv.id = #filters[].value#</isEqual>
			</iterate>
			group by  priv.id
					, priv.name
					, priv.section_id
					, priv.short_desc
					, priv.full_desc
					, priv.lang
					, priv.module_code
					, priv.is_active
					, role_priv.limit_id
					, role_priv.limitation_label
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="name">upper(name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="shortDesc">upper(short_desc) $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting">order by upper(priv.short_desc)</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-role-privs-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
		SELECT priv.id
		FROM 
			acm_ui_role_privilege_vw role_priv
			, acm_ui_privilege_vw priv
		WHERE
			priv.lang = com_ui_user_env_pkg.get_user_lang()
			AND role_priv.priv_id = priv.id
		<iterate prepend=" AND " conjunction="AND " property="filters">
			<isEqual property="filters[].element" compareValue="roleId">role_priv.role_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="roleIds">role_priv.role_id IN ($filters[].value$)</isEqual>
			<isEqual property="filters[].element" compareValue="name">priv.name like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="shortDesc">priv.short_desc like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="privId">priv.id = #filters[].value#</isEqual>
		</iterate>
		GROUP BY  priv.id
				, priv.name
				, priv.section_id
				, priv.short_desc
				, priv.full_desc
				, priv.lang
				, priv.module_code
				, priv.is_active
		<include refid="limitationClose"/>
    </select>

    <select id="get-privs"
	    	parameterClass="qparams"
	    	resultMap="mapping-privilege" >
		<include refid="paginatedOpen"/>
			SELECT
					  priv.id AS priv_id
					, priv.name AS priv_name
					, priv.section_id
					, priv.short_desc
					, priv.full_desc
					, priv.lang
					, priv.module_code
					, priv.is_active
			FROM acm_ui_privilege_vw priv
			WHERE
			<iterate  conjunction=" AND " property="filters">
				<isEqual property="filters[].element" compareValue="id">priv.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="ids">
					<isNotEmpty property="filters[].valueList">
						priv.id in (
						<iterate conjunction="," property="filters[].valueList">
							#filters[].valueList[]#
						</iterate>
						)
					</isNotEmpty>
				</isEqual>
				<isEqual property="filters[].element" compareValue="shortDesc">upper(priv.short_desc) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(priv.name) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="moduleCode">upper(priv.module_code) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="isActive">priv.is_active = #filters[].value#</isEqual>
                <isEqual property="filters[].element" compareValue="lang">priv.lang = #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="name">priv.name $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="shortDesc">priv.short_desc $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="moduleCode">priv.module_code $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="isActive">priv.is_active $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting">ORDER BY priv.module_code ASC, priv.short_desc ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-privs-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT priv.id
		FROM acm_ui_privilege_vw priv
		WHERE
		<iterate  conjunction=" AND " property="filters">
			<isEqual property="filters[].element" compareValue="id">priv.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="ids">
				<isNotEmpty property="filters[].valueList">
					priv.id in (
					<iterate conjunction="," property="filters[].valueList">
						#filters[].valueList[]#
					</iterate>
					)
				</isNotEmpty>
			</isEqual>
			<isEqual property="filters[].element" compareValue="shortDesc">upper(priv.short_desc) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(priv.name) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="moduleCode">upper(priv.module_code) like #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="lang">priv.lang = #filters[].value#</isEqual>
        </iterate>
		<include refid="limitationClose"/>
    </select>

    <procedure id="add-privilege"
    		parameterClass="ru.bpc.sv2.administrative.roles.Privilege">
    	{call ACM_UI_PRIVILEGE_PKG.add_privilege(
				  io_id        => #id,jdbcType=NUMERIC,mode=INOUT#
				, i_name       => #name#
				, i_short_desc => #shortDesc#
				, i_full_desc  => #fullDesc# 
				, i_lang       => #lang#
				, i_module     => #moduleCode#
				, i_is_active  => #isActive#
                , i_section_id => #sectionId#
    			)}
    </procedure>

    <procedure id="remove-privilege"
    		parameterClass="int">
    	{call ACM_UI_PRIVILEGE_PKG.remove_privilege(
				  i_priv_id		=> #id#
				)}
    </procedure>

    <select id="get-privs-for-combo"
	    	parameterClass="qparams"
	    	resultMap="mapping-privilege" >
		SELECT
				  priv.id AS priv_id
				, priv.name AS priv_name
				, priv.section_id
				, priv.short_desc
				, priv.full_desc
				, priv.lang
				, priv.module_code
				, priv.is_active
		FROM acm_ui_privilege_vw priv
		WHERE lang = com_ui_user_env_pkg.get_user_lang
		ORDER BY priv.short_desc ASC
	</select>

    <select id="get-privs-not-assigned-to-role"
			parameterClass="qparams"
			resultMap="mapping-privilege" >
		<include refid="paginatedOpen"/>
			SELECT
					  priv.id priv_id
					, priv.name priv_name
					, priv.section_id
					, priv.short_desc
					, priv.full_desc
					, priv.lang
					, priv.module_code
					, priv.is_active
			FROM acm_ui_privilege_vw priv
			WHERE
			<iterate  conjunction=" AND " property="filters">
				<isEqual property="filters[].element" compareValue="roleId">
					priv.id NOT IN (
						SELECT role_priv.priv_id
						FROM acm_ui_role_privilege_vw role_priv
						WHERE role_priv.role_id = #filters[].value#
					)
				</isEqual>
				<isEqual property="filters[].element" compareValue="shortDesc">upper(priv.short_desc) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="moduleCode">upper(priv.module_code) like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="name">upper(priv.name) like #filters[].value#</isEqual>
                <isEqual property="filters[].element" compareValue="lang">priv.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="selectedPrivs">
					<isNotEmpty property="filters[].valueList">
						priv.id not in (
						<iterate conjunction="," property="filters[].valueList">
							#filters[].valueList[]#
						</iterate>
						)
					</isNotEmpty>
				</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="moduleCode">upper(priv.module_code) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="name">upper(priv.name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="shortDesc">upper(priv.short_desc) $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
       <include refid="paginatedClose"/>
	</select>

	<select id="get-privs-not-assigned-to-role-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
		SELECT priv.id
		FROM acm_ui_privilege_vw priv
		WHERE
		<iterate  conjunction=" AND " property="filters">
			<isEqual property="filters[].element" compareValue="roleId">
				priv.id NOT IN (
					SELECT role_priv.priv_id
					FROM acm_ui_role_privilege_vw role_priv
					WHERE role_priv.role_id = #filters[].value#
				)
			</isEqual>
			<isEqual property="filters[].element" compareValue="shortDesc">upper(priv.short_desc) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="moduleCode">upper(priv.module_code) like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="name">upper(priv.name) like #filters[].value#</isEqual>
            <isEqual property="filters[].element" compareValue="lang">priv.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="selectedPrivs">
				<isNotEmpty property="filters[].valueList">
					priv.id not in (
					<iterate conjunction="," property="filters[].valueList">
						#filters[].valueList[]#
					</iterate>
					)
				</isNotEmpty>
			</isEqual>
		</iterate>
		<include refid="limitationClose"/>
    </select>

    <select id="get-privilege-node-privileges-byrole"
            resultMap="mapping-privilege-node-assignable"
            parameterClass="ru.bpc.sv2.administrative.roles.RoleIdPrivilegeIdBind" >
        SELECT
		    privs.id priv_id,
            privs.name priv_name,
            privs.short_desc,
            privs.full_desc,
            privs.section_id,
            role_privs.role_id
            , privs.module_code
            , privs.is_active
		FROM
		    acm_ui_privilege_vw privs
		    left join
		    acm_ui_role_privilege_vw role_privs
		    on
		        privs.id = role_privs.priv_id AND role_privs.role_id = #roleId#
		ORDER BY
            privs.name ASC
    </select>

	<select	id="get-user-role-list"
			   parameterClass="java.lang.Integer"
			   resultClass="java.lang.String">
		SELECT acm_api_user_pkg.get_user_role_list(#value#) from dual
	</select>

    <!-- Before calling this query one should call "set-user-id" procedure (see below) -->
    <select id="get-privileges-by-user-id" resultMap="mapping-privilege" parameterClass="qparams">
        <include refid="limitationOpen"/>
		select p.id          as priv_id,
			   p.name        as priv_name,
			   p.section_id  as section_id,
			   p.short_desc  as short_desc,
			   null 		 as full_desc,
			   p.lang        as lang,
			   p.module_code as module_code,
			   p.is_active   as is_active
		from (
			select a.id
				 , a.name
				 , get_text (i_table_name => 'acm_privilege', i_column_name => 'label', i_object_id => a.id, i_lang => com_ui_user_env_pkg.get_user_lang) as short_desc
				 , com_ui_user_env_pkg.get_user_lang as lang
				 , a.section_id
				 , a.module_code
				 , a.is_active
			from acm_privilege a
			where a.is_active = 1
		) p
		<iterate prepend="where" conjunction="and " property="filters">
			<isEqual property="filters[].element" compareValue="roleList">
				<isNotEmpty property="filters[].valueList">
					p.id in (select arp.priv_id
							 from acm_role_privilege arp
							 where arp.role_id in (
								<iterate conjunction="," property="filters[].valueList">
									#filters[].valueList[]#
								</iterate>
							)
					)
				</isNotEmpty>
			</isEqual>
		</iterate>
        order by upper(p.short_desc) asc
        <include refid="limitationClose"/>
    </select>

    <procedure id="set-user-id"
            parameterClass="int">
        {call ACM_API_USER_PKG.set_user_id(
				  i_user_id		=> #value#
				)}
    </procedure>

	<!-- Before calling this query one should call "set-user-id" procedure (see above) -->
	<select id="get-privileges-by-user-id-count"
			resultClass="int">
		<include refid="limitationOpenCount"/>
        SELECT priv_id
        FROM acm_ui_user_privilege_all_vw
        where lang = com_ui_user_env_pkg.GET_USER_LANG
		<iterate prepend=" AND " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="userId">user_id = #filters[].value#</isEqual>
		</iterate>
        <include refid="limitationClose"/>
	</select>

    <procedure id="insert-new-role"
            parameterClass="ru.bpc.sv2.administrative.roles.ComplexRole">
    	{call ACM_UI_ROLE_PKG.add_role(
    			  i_role_name 		=> #name#
				, i_role_short_desc => #shortDesc#
				, i_role_full_desc	=> #fullDesc#
				, i_role_lang		=> #lang#
				, i_notif_scheme_id => #notifSchemeId#
				, io_role_id		=> #id,jdbcType=NUMERIC,mode=INOUT#
				)}
    </procedure>

    <procedure id="update-existing-role"
            parameterClass="ru.bpc.sv2.administrative.roles.ComplexRole">
    	{call ACM_UI_ROLE_PKG.add_role(
    			  i_role_name 		=> #name#
				, i_role_short_desc => #shortDesc#
				, i_role_full_desc	=> #fullDesc#
				, i_role_lang		=> #lang#
				, i_notif_scheme_id => #notifSchemeId#
				, io_role_id		=> #id,jdbcType=NUMERIC,mode=INOUT#
				)}
    </procedure>

    <procedure id="remove-role"
            parameterClass="int">
    	{call ACM_UI_ROLE_PKG.remove_role( #value# )}
    </procedure>

    <!--  User queries -->
    <procedure id="add-new-user"
            parameterClass="ru.bpc.sv2.administrative.users.User">
        {call ACM_UI_USER_PKG.add_new_user(
				  i_user_name	=> #name#
				, io_user_id	=> #id,jdbcType=NUMERIC,mode=INOUT#
				, i_person_id	=> #personId#
				)}
    </procedure>

    <procedure id="add-role-to-user"
            parameterMap="mapping-object-role">
            {call ACM_UI_USER_PKG.add_role_to_user( ?, ?, ? )}
    </procedure>

    <procedure id="remove-role-from-user"
            parameterMap="mapping-remove-user-role">
       		{call ACM_UI_USER_PKG.remove_role_from_user( ?, ? )}
    </procedure>

	<parameterMap id="mapping-user-inst" class="java.util.Map">
		<parameter property="userId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="objectId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="isEntirely" javaType="boolean" jdbcType="NUMBER" mode="IN"/>
		<parameter property="id" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="INOUT"/>
		<parameter property="force" javaType="boolean" jdbcType="NUMBER" mode="IN"/>
	</parameterMap>
	
    <procedure id="add-inst-to-user"
            parameterMap="mapping-user-inst">
		{call ACM_UI_USER_PKG.add_inst_to_user(
				  i_user_id		=> ?
				, i_inst_id		=> ?
				, i_is_ent		=> ?
				, io_id			=> ?
				, i_force		=> ?
				)}
    </procedure>

	<parameterMap id="mapping-user-default-inst" class="java.util.Map">
		<parameter property="instId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="userId" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>				
	</parameterMap>
	
    <procedure id="set-user-default-inst"
            parameterMap="mapping-user-default-inst">
		{call ACM_UI_USER_PKG.set_def_inst(
				  i_inst_id		=> ?
				, i_user_id		=> ?
				)}
    </procedure>
    
    <procedure id="add-agent-to-user"
            parameterMap="mapping-user-agent">
            {call ACM_UI_USER_PKG.add_agent_to_user( ?, ?, ?, ?, ? )}
    </procedure>

    <procedure id="remove-inst-from-user"
            parameterMap="mapping-user-remove">
            {call ACM_UI_USER_PKG.remove_inst_from_user(  ?, ? )}
    </procedure>

    <procedure id="remove-agent-from-user"
            parameterMap="mapping-user-remove">
            {call ACM_UI_USER_PKG.remove_agent_from_user( ?, ? )}
    </procedure>

    <procedure id="block-user"
            parameterClass="int">
            {call ACM_UI_USER_PKG.block_user( #value# )}
    </procedure>

    <procedure id="unblock-user"
            parameterClass="int">
            {call ACM_UI_USER_PKG.unblock_user( #value# )}
    </procedure>

    <parameterMap id="mapping-get-password" class="java.util.Map">
        <parameter property="username" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
    </parameterMap>

    <procedure id="get-password"
               parameterMap="mapping-get-password" resultClass="string">
        {? = call ACM_API_PASSWORD_PKG.get_password(i_user_name => ?)}
    </procedure>

    <parameterMap id="mapping-set-password" class="java.util.Map">
        <parameter property="username" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
        <parameter property="oldPassword" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
        <parameter property="newPassword" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
    </parameterMap>

    <procedure id="set-password"

               parameterMap="mapping-set-password">
        {call ACM_UI_PASSWORD_PKG.set_password(
                  i_user_name            => ?
                , i_old_password_hash    => ?
                , i_new_password_hash    => ?)}
    </procedure>

    <parameterMap id="mapping-change-user-auth-scheme" class="java.util.Map">
        <parameter property="userId" javaType="java.lang.Integer" jdbcType="VARCHAR" mode="IN"/>
        <parameter property="authScheme" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
    </parameterMap>

    <procedure id="change-user-auth-scheme" parameterMap="mapping-change-user-auth-scheme">
        {call acm_ui_user_pkg.change_user_auth_scheme(
				  i_user_id            => ?
                , i_auth_scheme    => ?)}
    </procedure>

    <select id="get-user-roles"
			parameterClass="qparams"
			resultMap="mapping-role-light">
		<include refid="paginatedOpen"/>
			SELECT
					  r.role_id
					, r.role_name
					, r.role_short_desc short_desc
					, r.role_full_desc full_desc
					, r.lang
			FROM acm_ui_user_role_vw r
			WHERE r.lang = com_ui_user_env_pkg.get_user_lang()						
			<iterate prepend=" AND " conjunction="AND " property="filters">
				<isEqual property="filters[].element" compareValue="userId">r.user_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="shortDesc">r.role_short_desc like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="fullDesc">r.role_full_desc like #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="shortDesc">r.role_short_desc $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-user-roles-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT *
		FROM acm_ui_user_role_vw r	                	
		WHERE r.lang = com_ui_user_env_pkg.get_user_lang()	                	
		<iterate prepend=" AND " conjunction="AND " property="filters">
			<isEqual property="filters[].element" compareValue="userId">r.user_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="shortDesc">r.role_short_desc like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="fullDesc">r.role_full_desc like #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
    </select>

    <select id="get-insts-for-user"
	    	parameterClass="qparams"
	    	resultMap="mapping-inst-acm" >
		SELECT 
		          inst_id id
		        , parent_id
		        , user_id
		        , is_default
		        , is_entirely
		        , name
		        , lang
		        , description
		        , decode(user_id, null,0,1) is_assigned
		        , grant_type
		        , level
		        , CONNECT_BY_ISLEAF as is_leaf
		FROM (
			SELECT DISTINCT 
			          ii.id inst_id
			        , ii.parent_id
			        , ui.user_id
			        , nvl(ui.is_default, 0) is_default
			        , nvl(ui.is_entirely, 0) is_entirely
			        , ii.short_desc AS name
			        , ii.lang
			        , ii.full_desc AS description
			        , ui.grant_type
			FROM (
				SELECT DISTINCT * FROM ost_ui_institution_all_vw
				START WITH id IN (
					SELECT DISTINCT inst_id
					FROM acm_ui_user_inst_vw
					<iterate prepend="WHERE" conjunction="AND" property="filters">
						<isEqual property="filters[].element" compareValue="userId">user_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="userName">user_id in (select id from acm_user_vw where upper(name) = upper(#filters[].value#))</isEqual>
					</iterate>
				) AND lang = com_ui_user_env_pkg.get_user_lang()
				CONNECT BY PRIOR parent_id = id AND PRIOR lang = lang
			) ii, acm_ui_user_inst_vw ui
			WHERE ii.id = ui.inst_id(+) AND ii.lang = ui.lang(+)
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="userId">ui.user_id(+) = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="userName">user_id in (select id from acm_user_vw where upper(name) = upper(#filters[].value#))</isEqual>
			</iterate>
		) i 
		START WITH i.parent_id IS NULL
		CONNECT BY PRIOR i.inst_id = i.parent_id
	</select>

    <select id="get-all-insts-for-user"
	    	parameterClass="qparams"
	    	resultMap="mapping-inst-acm" >
		SELECT
				level
				, id
				, name
				, description
				, lang
				, parent_id
				, user_id
				, is_default
				, is_entirely
				, grant_type
				, decode(user_id, null,0,1) is_assigned
				, CONNECT_BY_ISLEAF as is_leaf
		FROM (
			SELECT 	  i.id
					, i.name
					, i.description
					, i.lang
					, usi.user_id
					, i.parent_id
					, nvl(usi.is_default, 0) is_default
					, nvl(usi.is_entirely, 0) is_entirely
					, usi.grant_type
			FROM ost_ui_institution_vw i, acm_ui_user_inst_vw usi
			WHERE
				i.lang = com_ui_user_env_pkg.get_user_lang()
				AND usi.lang(+) = i.lang
				AND usi.INST_ID(+) = i.ID
				<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="userId">usi.user_id(+) = #filters[].value#</isEqual>
				</iterate>
		)
		START WITH (parent_id IS NULL OR parent_id NOT IN (SELECT id FROM ost_ui_institution_vw))
		CONNECT BY PRIOR id = parent_id
		ORDER SIBLINGS BY id
	</select>

	<select id="get-agents-for-user"
	    	parameterClass="qparams"
	    	resultMap="mapping-agent-acm-agent" >
        SELECT 
                  id
                , name
                , parent_id
                , is_default
                , inst_id
                , user_id
                , is_default_for_user
                , is_default_for_inst
                , agent_type
                , decode(user_id, null,0,1) is_assigned
                , grant_type
                , level
                , CONNECT_BY_ISLEAF as is_leaf
        FROM (
            SELECT DISTINCT 
                      ii.id
                    , ii.parent_id
                    , nvl(ui.is_default, 0) is_default
                    , ui.user_id
                    , ui.agent_type
                    , nvl(ui.is_default, 0) is_default_for_user
                    , nvl (ii.is_default, 0) is_default_for_inst
                    , ii.name
                    , ii.inst_id
                    , ui.grant_type
            FROM (
                SELECT DISTINCT * FROM ost_ui_agent_vw
                START WITH id IN (
                    SELECT DISTINCT agent_id
                    FROM acm_ui_user_agent_vw
					<iterate prepend="WHERE" conjunction="AND" property="filters">
						<isEqual property="filters[].element" compareValue="userId">user_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="instId">inst_id = #filters[].value#</isEqual>
					</iterate>
                ) AND lang = com_ui_user_env_pkg.get_user_lang()
                CONNECT BY PRIOR parent_id = id AND PRIOR lang = lang
            ) ii, acm_ui_user_agent_vw ui
            WHERE ii.id = ui.agent_id(+) AND ii.lang = ui.lang(+)
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="userId">ui.user_id(+) = #filters[].value#</isEqual>
			</iterate>
        ) i 
        START WITH i.parent_id IS NULL
        CONNECT BY PRIOR i.id = i.parent_id
	</select>
	
	<select id="get-all-agents-for-user"
	    	parameterClass="qparams"
	    	resultMap="mapping-agent-acm" >
		SELECT
				level
				, id
				, name
				, parent_id
				, is_default
				, inst_id
				, user_id
				, is_default_for_user
				, agent_type
				, grant_type
				, decode(user_id, null,0,1) is_assigned
				, CONNECT_BY_ISLEAF as is_leaf
		FROM (
			SELECT
					a.id
					, a.name
					, a.parent_id
					, a.is_default
					, a.inst_id
					, usa.user_id
					, nvl(usa.is_default, 0) is_default_for_user
					, a.agent_type
					, usa.grant_type
			FROM ost_ui_agent_vw a, acm_ui_user_agent_vw usa
			WHERE
				a.lang = com_ui_user_env_pkg.get_user_lang()
				AND usa.lang(+) = a.lang
				AND usa.AGENT_ID(+) = a.ID
				<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="userId">usa.user_id(+) = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="instId">a.inst_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="isDefault">a.is_default = #filters[].value#</isEqual>					
				</iterate>
		)
		START WITH (parent_id IS NULL OR parent_id NOT IN (SELECT id FROM ost_ui_agent_vw))
		CONNECT BY PRIOR id = parent_id
		ORDER SIBLINGS BY id
	</select>

	<procedure id="add-priv-to-role"
            parameterMap="mapping-priv-to-role">
		{call ACM_UI_PRIVILEGE_PKG.add_privilege_role(
				  o_id			=> ?
				, i_role_id 	=> ?
				, i_priv_id		=> ?
				, i_limit_id	=> NULL
				)}
    </procedure>

    <procedure id="remove-priv-from-role"
            parameterMap="mapping-priv-from-role">
		{call ACM_UI_PRIVILEGE_PKG.remove_privilege_role(
				  i_role_id		=> ?
				, i_priv_id		=> ?
				)}
    </procedure>

    <procedure id="add-subrole-to-role"
            parameterMap="mapping-role-to-role">
		{call ACM_UI_ROLE_PKG.add_role_in_role( ?, ?, ? )}
    </procedure>

    <procedure id="remove-subrole-from-role"
            parameterMap="mapping-role-from-role">
		{call ACM_UI_ROLE_PKG.remove_role_from_role( ?, ? )}
    </procedure>

    <select id="get-process-roles"
	    	parameterClass="qparams"
	    	resultMap="mapping-role-binding" >
		<include refid="paginatedOpen"/>
			SELECT
					  r.id AS role_id
					, r.name AS role_name
					, r.short_desc
					, r.full_desc
					, rp.id as bind_id
					, r.lang
					, r.notif_scheme_id
					, s.name notif_scheme_name
            FROM acm_ui_role_process_vw rp, acm_ui_role_vw r, ntf_ui_scheme_vw s
			WHERE rp.role_id = r.id
				AND rp.entity_type ='ENTTPRCS'
				AND r.notif_scheme_id = s.id(+)
				AND r.lang = s.lang(+)
				<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="processId">rp.object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="lang">r.lang = #filters[].value#</isEqual>
				</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
                <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="name">upper(r.name) $sorting[].direction$</isEqual>
	                <isEqual property="sorting[].property" compareValue="shortDesc">upper(r.short_desc) $sorting[].direction$</isEqual>
            	</isNotEqual>
			</iterate>
        <include refid="paginatedClose"/>
	</select>

	<select id="get-process-roles-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
   		SELECT *
        FROM acm_ui_role_process_vw rp, acm_ui_role_vw r
		WHERE rp.role_id = r.id
			AND r.lang = com_ui_user_env_pkg.get_user_lang()
			AND rp.entity_type ='ENTTPRCS'
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="processId">rp.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">r.lang = #filters[].value#</isEqual>
			</iterate>
		<include refid="limitationClose"/>
    </select>

    <procedure id="add-role-to-process"
            parameterMap="mapping-object-role">
		{call ACM_UI_ROLE_PKG.add_role_prc(
				  i_role_id		=> ?
				, i_prc_id		=> ?
				, o_id 			=> ?
				)}
    </procedure>
    
    <procedure id="add-role-to-report"
            parameterMap="mapping-object-role">
		{call ACM_UI_ROLE_PKG.add_role_rpt(
				  i_role_id		=> ?
				, i_rpt_id		=> ?
				, o_id 			=> ?
				)}
    </procedure>
    
    <procedure id="add-role-in-role"
            parameterMap="mapping-object-role">
		{call ACM_UI_ROLE_PKG.add_role_in_role(
				  i_role_child		=> ?
				, i_role_parent		=> ?
				, o_id 				=> ?
				)}
    </procedure>    

    <procedure id="remove-role-from-process"
            parameterClass="int">
       	{call ACM_UI_ROLE_PKG.remove_role_prc(#value#)}
    </procedure>
    
    <procedure id="remove-role-from-report"
    		parameterClass="int">
   		{call ACM_UI_ROLE_PKG.remove_role_rpt(#value#)}
    </procedure>
    
    <select id="get-root-user" resultClass="int">
    	SELECT 
    		count(1)
    	FROM 
    		acm_ui_user_role_vw r
        WHERE 
        	r.role_name = 'ROOT' 
        	AND r.user_id = com_ui_user_env_pkg.get_user_id
    </select>
    
    <select id="get-report-roles"
	    	parameterClass="qparams"
	    	resultMap="mapping-role-binding" >
		<include refid="paginatedOpen"/>
			SELECT
					  r.id AS role_id
					, r.name AS role_name
					, r.short_desc
					, r.full_desc
					, rr.id as bind_id
					, r.lang
					, r.notif_scheme_id
					, s.name notif_scheme_name
            FROM acm_ui_role_report_vw rr, acm_ui_role_vw r, ntf_ui_scheme_vw s
			WHERE rr
				.role_id = r.id
				AND r.notif_scheme_id = s.id(+)
				AND r.lang = s.lang(+)				
				<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="reportId">rr.object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="lang">r.lang = #filters[].value#</isEqual>
				</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
                <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="name">upper(r.name) $sorting[].direction$</isEqual>
	                <isEqual property="sorting[].property" compareValue="shortDesc">upper(r.short_desc) $sorting[].direction$</isEqual>
            	</isNotEqual>
			</iterate>
        <include refid="paginatedClose"/>
	</select>
	
	<select id="get-report-roles-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
   		SELECT *
        FROM acm_ui_role_report_vw rr, acm_ui_role_vw r
		WHERE 
			rr.role_id = r.id				
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="reportId">rr.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">r.lang = #filters[].value#</isEqual>
			</iterate>
		<include refid="limitationClose"/>
    </select>

	<select id="get-flow-roles"
			parameterClass="qparams"
			resultMap="mapping-role-binding" >
		<include refid="paginatedOpen"/>
		SELECT
		r.id AS role_id
		, r.name AS role_name
		, r.short_desc
		, r.full_desc
		, rr.id as bind_id
		, r.lang
		, r.notif_scheme_id
		, s.name notif_scheme_name
		FROM acm_role_object_vw rr, acm_ui_role_vw r, ntf_ui_scheme_vw s
		WHERE rr
		.role_id = r.id
		AND RR.ENTITY_TYPE = 'ENTT0026'
		AND r.notif_scheme_id = s.id(+)
		AND r.lang = s.lang(+)
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="flowId">rr.object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">r.lang = #filters[].value#</isEqual>
		</iterate>
		<iterate prepend="ORDER BY" conjunction=", " property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="name">upper(r.name) $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="shortDesc">upper(r.short_desc) $sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-flow-roles-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT r.id
		FROM acm_role_object_vw rr, acm_ui_role_vw r
		WHERE rr
		.role_id = r.id
		AND RR.ENTITY_TYPE = 'ENTT0026'
		<iterate prepend="AND" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="reportId">rr.object_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">r.lang = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>
    
	<resultMap  id="mapping-flat-agent-acm"
                class="ru.bpc.sv2.orgstruct.Agent"  >
        <result property="id" column="id" />
        <result property="instId" column="inst_id" />
        <result property="name" column="name" />
        <result property="parentId" column="parent_id" />
        <result property="type" column="agent_type" />
        <result property="isDefault" column="is_default" />
        <result property="defaultForUser" javaType="boolean" column="is_default_for_user" />
        <result property="assignedToUser" javaType="boolean" column="is_assigned" />
        <result property="grantType" column="grant_type" />
	</resultMap>    
    
    <select id="get-agents-for-user-flat"
    	parameterClass="qparams"
    	resultMap="mapping-flat-agent-acm">
		select 
        a.id
        , a.name
        , a.parent_id
        , a.is_default
        , a.inst_id
        , usa.user_id
        , nvl(usa.is_default, 0) is_default_for_user
        , a.agent_type
        , usa.grant_type
        , decode(usa.user_id, null,0,1) is_assigned
		from ost_ui_agent_vw a
		left outer join  acm_ui_user_agent_vw usa
		on a.lang = usa.lang
		and a.id = usa.agent_id
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="instId">a.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">a.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="userId">usa.user_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="isDefault">a.is_default = #filters[].value#</isEqual>
		</iterate>		
    </select>

	<select id="get-default-user-agent"
		parameterClass="qparams"
		resultClass="int">
		select
			agent_id
		from
			acm_ui_user_agent_vw a
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="instId">a.inst_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">a.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="userId">a.user_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="isDefault">a.is_default = #filters[].value#</isEqual>
		</iterate>
	</select>

    
    <parameterMap class="java.util.Map" id="add-new-user-with-inst-map">
    	<parameter property="userName" mode="IN"/>
    	<parameter property="userId" jdbcType="NUMERIC" mode="INOUT"/>
    	<parameter property="personId" mode="IN"/>
    	<parameter property="instId" mode="IN"/>
    	<parameter property="password" mode="IN"/>
		<parameter property="passwordChangeNeeded" javaType="boolean" jdbcType="NUMBER" mode="IN"/>
		<parameter property="authScheme" mode="IN"/>
    </parameterMap>
    
    <procedure id="add-new-user-with-inst"
            parameterMap="add-new-user-with-inst-map">
        {call ACM_UI_USER_PKG.add_new_user(
				  i_user_name	=> ?
				, io_user_id	=> ?
				, i_person_id	=> ?
				, i_inst_id		=> ?
                , i_password_hash => ?
				, i_password_change_needed => ?
				, i_auth_scheme => ?
				)}
    </procedure>
    
    
    <select id="get-object-roles"
	    	parameterClass="qparams"
	    	resultMap="mapping-role-binding" >
		<include refid="paginatedOpen"/>
			SELECT
                      r.id AS role_id
                    , r.name AS role_name
                    , r.short_desc
                    , r.full_desc
                    , rr.id as bind_id
                    , r.lang
                    , r.notif_scheme_id
                    , s.name notif_scheme_name
            FROM acm_role_object_vw rr, acm_ui_role_vw r, ntf_ui_scheme_vw s
            WHERE rr.role_id = r.id
                AND r.notif_scheme_id = s.id(+)
                AND r.lang = s.lang(+)   
				<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="entity_type">rr.entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="objectId">rr.object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="lang">r.lang = #filters[].value#</isEqual>
				</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
                <isNotEqual property="sorting[].direction" compareValue="AUTO">
	                <isEqual property="sorting[].property" compareValue="name">upper(r.name) $sorting[].direction$</isEqual>
	                <isEqual property="sorting[].property" compareValue="shortDesc">upper(r.short_desc) $sorting[].direction$</isEqual>
            	</isNotEqual>
			</iterate>
        <include refid="paginatedClose"/>
	</select>
	
	<select id="get-object-roles-count"
        	parameterClass="qparams"
        	resultClass="int">
        <include refid="limitationOpenCount"/>
   		SELECT *
        FROM acm_role_object_vw rr, acm_ui_role_vw r
		WHERE 
			rr.role_id = r.id				
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="entity_type">rr.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">rr.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">r.lang = #filters[].value#</isEqual>
			</iterate>
		<include refid="limitationClose"/>
    </select>
    
    <parameterMap id="mapping-entity-object-role" class="java.util.Map">
		<parameter property="roleId" javaType="int" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="entityType" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="objectId" javaType="int" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="id" javaType="int" jdbcType="NUMERIC" mode="INOUT"/>
	</parameterMap>
    
    <procedure id="add-role-to-object"
            parameterMap="mapping-entity-object-role">
		{call ACM_UI_ROLE_PKG.add_role_object(
			      	i_role_id      => ?
				  , i_entity_type  => ?
				  , i_object_id    => ?
				  , o_id           => ?
				)}
    </procedure>
    
    <procedure id="remove-role-from-object"
    		parameterClass="int">
   		{call ACM_UI_ROLE_PKG.remove_role_object(#value#)}
    </procedure>



	<parameterMap id="check-password-expired-map" class="java.util.Map">
		<parameter property="expired" javaType="boolean" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="userName" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>

	<procedure id="check-password-expired"
			   parameterMap="check-password-expired-map" >
		{? = call acm_api_password_pkg.check_password_expired(
			i_user_name      => ?
			)}
	</procedure>

	<parameterMap id="check-user-exist-map" class="java.util.Map">
		<parameter property="userId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="userName" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>

	<procedure id="check-user-exist" parameterMap="check-user-exist-map">
		{? = call acm_ui_user_pkg.get_user_id_by_name(
			i_user_name => ?
		)}
	</procedure>
</sqlMap>