taskKey="com.javarush.games.moonlander.part06"\n\nИгра Moon Lander (6/23)

Ракета у нас уже есть, теперь займемся отрисовкой ландшафта. Его матрицу мы сделали для тебя: ты ее найдешь
в классе ShapeMatrix. Ландшафт — это тоже игровой объект, поэтому создадим метод, который будет отвечать за инициализацию подобных объектов.
В нем будут создаваться ландшафт и ракета.
Как ты заметил, на экране есть сетка. С одной стороны, она помогает эффективнее работать с игровым полем,
а с другой — мешает игровому процессу, поэтому на данном
этапе мы ее скроем. В дальнейшем ты сможешь ее включать, если тебе это понадобится при разработке.


Требования:
1.	В классе MoonLanderGame должно существовать приватное поле landscape типа GameObject.
2.	В классе MoonLanderGame должен существовать приватный метод void createGameObjects().
3.	Поле rocket должно быть проинициализировано в методе createGameObjects().
4.	Поле rocket не должно быть проинициализировано в методе createGame().
5.	Поле landscape должно быть проинициализировано в методе createGameObjects() новым объектом типа GameObject с параметрами: 0, 25, ShapeMatrix.LANDSCAPE.
6.	В методе createGame() метод createGameObjects() должен быть вызван до метода drawScene().
7.	В методе drawScene() после отрисовки поля у ландшафта должен быть вызван метод draw(Game). В качестве параметра передай в метод &quot;this&quot;.
8.	В методе initialize() должен быть вызван метод showGrid(boolean) класса Game c параметром false.


Игра Moon Lander (5/23)

Мы будем часто пользоваться такими параметрами как ширина и высота игрового объекта. Следовательно, вынесем их в
отдельные переменные класса GameObject. Чтобы объект мог отрисовываться на игровом поле, добавим ему метод draw.
Этот метод будет принимать в качестве параметра объект класса Game. Теперь мы сможем задавать цвет ячейки на экране,
вызвав метод setCellColor с нужными параметрами. Обрати внимание, что x и y объекта типа GameObject — это координаты
левого верхнего угла матрицы matrix. Чтобы отобразить объект matrix на игровом поле, в качестве параметров
в метод setCellColor необходимо передать: x объекта + x в матрице, y объекта + y в матрице, цвет из матрицы (см. подсказку ниже).
В конце данной подзадачи мы отрисуем ракету, используя созданный метод.

Подсказка:
В классе ShapeMatrix числа обозначают порядковый номер цвета из enum Color(игрового движка).
Чтоб получить цвет, нужно использовать Color.values()[matrix[y][x]].



Игра Moon Lander (4/23)

Кроме координат, у игрового объекта будет матрица, отвечающая за внешний вид. Давай добавим в класс GameObject
переменную matrix типа int[][] для ее хранения. А теперь займемся посадочным лунным модулем.
Для простоты будем называть его просто ракетой. Создадим класс Rocket, наследуемый от класса GameObject, так как ракета — это игровой объект.
Обрати внимание, что у нас появился вспомогательный класс
ShapeMatrix, который хранит матрицу, отвечающую за внешний вид ракеты.



Игра Moon Lander (3/23)

Так как в Moon Lander будут использоваться игровые объекты, давай создадим класс GameObject, в который вынесем
их общие характеристики. На данном этапе это координаты x и y.



Игра Moon Lander (2/23)

На данном этапе давай создадим метод drawScene(), который будет отвечать за отрисовку игрового поля.
Сперва в этом методе мы будем окрашивать все ячейки игрового поля в один цвет.
Также нам понадобится метод createGame(),отвечающий за создание игры.
Для начала мы будем вызывать в нем только метод отрисовки drawScene().
Сам метод createGame() вызовем в методе initialize() после вызова setScreenSize(int, int).



Игра Moon Lander (1/23)

Сегодня мы предлагаем тебе написать увлекательную игру — Moon Lander. Как всегда, начнем с правил.
Цель – опустить посадочный модуль на лунную поверхность. Для этого игроку нужно преодолеть притяжение Луны,
используя кормовой ускоритель для замедления падения и боковые ускорители для перемещения корабля влево или вправо.
Рельеф у местности ухабистый, и есть всего одна плоская область для мягкой посадки — «платформа». Если игрок успешно совершает посадку, он выигрывает.
Количество очков зависит от длительности посадки: чем дольше игрок совершает посадку, тем меньше очков он получит в итоге. Игра окончена, когда игрок разбивается
о поверхность Луны. Итак, начнем с главного класса игры MoonLanderGame. Унаследуем его от класса Game. Этот класс, как ты помнишь, содержит в себе методы,
которые помогут нам в реализации игры.
Теперь реализуем игровое поле. Для этого нам необходимо переопределить метод initialize(), в котором, в свою очередь, нужно вызвать метод setScreenSize(int, int).
Этот метод задает ширину и высоту игрового поля, которые он принимает в качестве параметров. Их будем хранить в переменных.



