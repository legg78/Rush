<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="pmo">

    <sql id="limitationOpen">
            SELECT *
            FROM (                
    </sql>
    
    <sql id="limitationOpenCount">
            SELECT count(*)
            FROM (                
    </sql>
    
    <sql id="limitationClose">               
            	) q
            <isNotNull property="limitation" prepend=" WHERE ">$limitation$</isNotNull>
    </sql>
    
    <sql id="paginatedOpen">
            SELECT *
            FROM(
                SELECT a.*, rownum r
                FROM(
		<include refid="limitationOpen"/>
    </sql>

    <sql id="paginatedClose">
    	<include refid="limitationClose"/>
                    ) a
                WHERE rownum <![CDATA[<]]>= (#range.end# + 1)
            )
            WHERE r >= (#range.start# + 1)    	
    </sql>

	<resultMap id="mapping-pmo-service" class="ru.bpc.sv2.pmo.PmoService">
		<result property="id" column="id"/>
		<result property="label" column="label"/>
		<result property="description" column="description"/>
		<result property="direction" column="direction"/>
		<result property="lang" column="lang"/>
		<result property="shortName" column="short_name"/>
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst_name"/>
	</resultMap>

	<resultMap id="mapping-pmo-provider" class="ru.bpc.sv2.pmo.PmoProvider">
		<result property="id" column="id"/>
		<result property="label" column="label"/>
		<result property="description" column="description"/>
		<result property="regionCode" column="region_code"/>
		<result property="providerNumber" column="provider_number"/>
		<result property="lang" column="lang"/>
		<result property="shortName" column="short_name"/>
		<result property="providerGroup" column="is_provider_group"/>
		<result property="parentId" column="parent_id"/>
		<result property="logoPath" column="logo_path"/>
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst_name"/>
	</resultMap>

	<resultMap id="mapping-pmo-provider-hier" class="ru.bpc.sv2.pmo.PmoProvider" extends="mapping-pmo-provider">
		<result property="level" column="level" />
		<result property="isLeaf" javaType="boolean" column="is_leaf" />
	</resultMap>

	<resultMap  id="mapping-pmo-host"
                class="ru.bpc.sv2.pmo.PmoHost">
		<result property="hostId" column="host_member_id"/>
		<result property="providerId" column="provider_id"/>
		<result property="providerName" column="provider_name"/>
		<result property="hostName" column="host_name"/>
		<result property="networkId" column="network_id"/>
		<result property="networkName" column="network_name"/>
		<result property="onlineStandardId" column="online_standard_id"/>
		<result property="onlineStandardName" column="online_standard_name"/>
		<result property="offlineStandardId" column="offline_standard_id"/>
		<result property="offlineStandardName" column="offline_standard_name"/>
		<result property="executionType" column="execution_type"/>
		<result property="priority" column="priority"/>
		<result property="modId" column="mod_id"/>
		<result property="modName" column="mod_name"/>
		<result property="inactiveTill" column="inactive_till"/>
		<result property="lang" column="lang"/>
		<result property="status" column="status"/>
	</resultMap>
	
	<resultMap  id="mapping-pmo-purpose" class="ru.bpc.sv2.pmo.PmoPurpose">
		<result property="id" column="id"/>
		<result property="providerId" column="provider_id"/>
		<result property="serviceId" column="service_id"/>
		<result property="label" column="label"/>
		<result property="hostAlgorithm" column="host_algorithm"/>
		<result property="lang" column="lang"/>
		<result property="operType" column="oper_type"/>
		<result property="mcc" column="mcc"/>
		<result property="terminalId" column="terminal_id"/>
		<result property="purposeNumber" column="purpose_number"/>
		<result property="modifierId" column="mod_id"/>
		<result property="amountAlgorithm" column="amount_algorithm"/>
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst_name"/>
	</resultMap>
	
	<resultMap  id="mapping-pmo-purpose-parameter"
                class="ru.bpc.sv2.pmo.PmoPurposeParameter">
		<result property="id" column="id"/>
		<result property="seqNum" column="seqnum"/>
		<result property="paramId" column="param_id"/>
		<result property="name" column="label"/>
		<result property="orderStage" column="order_stage"/>
		<result property="displayOrder" column="display_order"/>
		<result property="mandatory" column="is_mandatory"/>
		<result property="fixed" column="is_template_fixed"/>
		<result property="editable" column="is_editable"/>
		<result property="purposeId" column="purpose_id"/>
		<result property="defaultValue" column="default_value"/>
		<result property="lang" column="lang"/>
		<result property="dataType" column="data_type" />
		<result property="lovId" column="lov_id"/>
		<result property="lovName" column="lov_name"/>
        <result property="valueV" column="value_v" />
        <result property="valueN" column="value_n" />
        <result property="valueD" column="value_d" />
        <result property="lovValue" column="lov_value" />
		<result property="paramFunction" column="param_function" />
	</resultMap>
	
	<resultMap  id="mapping-pmo-parameter-combo"
                class="ru.bpc.sv2.pmo.PmoParameter">
		<result property="id" column="id"/>
		<result property="systemName" column="param_name"/>
		<result property="name" column="label"/>
		<result property="lang" column="lang"/>
	</resultMap>
	
	<resultMap  id="mapping-pmo-template-parameter"
                class="ru.bpc.sv2.pmo.PmoTemplateParameter">
		<result property="id" column="id"/>
		<result property="paramId" column="param_id"/>
		<result property="templateId" column="template_id"/>		
		<result property="name" column="label"/>
		<result property="paramValue" column="param_value"/>
		<result property="fixed" column="is_template_fixed"/>
		<result property="editable" column="is_editable"/>
		<result property="lang" column="lang"/>
		<result property="valueV" column="value_v" />
        <result property="valueN" column="value_n" />
        <result property="valueD" column="value_d" />
        <result property="lovValue" column="lov_value" />
		<result property="lovId" column="lov_id" />
	</resultMap>
	
	<resultMap  id="mapping-pmo-payment-order-parameter"
                class="ru.bpc.sv2.pmo.PmoPaymentOrderParameter">
        <result property="id" column="id"/>
		<result property="orderId" column="order_id"/>
		<result property="paramId" column="param_id"/>
		<result property="systemName" column="param_name"/>		
		<result property="name" column="param_label"/>
		<result property="paramValue" column="param_value"/>
		<result property="fixed" column="is_template_fixed"/>
		<result property="editable" column="is_editable"/>
		<result property="lang" column="lang"/>
		<result property="valueV" column="value_v" />
        <result property="valueN" column="value_n" />
        <result property="valueD" column="value_d" />
        <result property="lovValue" column="lov_value" />
	</resultMap>

	<select id="get-services" parameterClass="qparams" resultMap="mapping-pmo-service">
		<include refid="paginatedOpen"/>
			select ps.id
			     , ps.label
			     , ps.description
			     , ps.direction
			     , ps.lang
			     , ps.short_name
			     , ps.inst_id
			     , (select b.name
			          from ost_ui_institution_sys_vw b
			         where b.id = ps.inst_id
			           and b.lang = ps.lang
			       ) as inst_name
			  from pmo_ui_service_vw ps
		<iterate prepend=" where " conjunction=" and " property="filters">
			<isEqual property="filters[].element" compareValue="id">ps.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="label">ps.label like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="direction">ps.direction = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">ps.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">ps.inst_id = #filters[].value#</isEqual>
		</iterate>
		<iterate prepend=" order by " conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="auto">
					<isEqual property="sorting[].property" compareValue="id">ps.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="label">ps.label $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="inst">ps.inst_id $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting" prepend=" order by ">ps.id asc</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-services-count" parameterClass="qparams" resultClass="int">
		<include refid="limitationOpenCount"/>
			select ps.*
			  from pmo_ui_service_vw ps
		<iterate prepend=" where " conjunction=" and " property="filters">
			<isEqual property="filters[].element" compareValue="id">ps.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="label">ps.label like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="direction">ps.direction = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">ps.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">ps.inst_id = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<procedure id="add-service" parameterClass="ru.bpc.sv2.pmo.PmoService">
		{call pmo_ui_service_pkg.add(
			  o_id			=> #id,jdbcType=NUMERIC,mode=OUT#
			, o_seqnum		=> #seqNum,jdbcType=NUMERIC,mode=OUT#
			, i_direction	=> #direction#
			, i_label		=> #label#
			, i_description	=> #description#
			, i_lang		=> #lang#
			, i_short_name	=> #shortName#
			, i_inst_id		=> #instId#
		)}
	</procedure>

	<procedure id="edit-service" parameterClass="ru.bpc.sv2.pmo.PmoService">
		{call pmo_ui_service_pkg.modify(
			  i_id			=> #id#
			, io_seqnum		=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
			, i_direction	=> #direction#
			, i_label		=> #label#
			, i_description	=> #description#
			, i_lang		=> #lang#
			, i_short_name	=> #shortName#
			, i_inst_id		=> #instId#
		)}
	</procedure>

	<procedure id="remove-service" parameterClass="ru.bpc.sv2.pmo.PmoService">
		{call pmo_ui_service_pkg.remove(
			  i_id		=> #id#
			, i_seqnum	=> #seqNum#
		)}
	</procedure>

	<select id="get-services-for-combo" parameterClass="qparams" resultMap="mapping-pmo-service">
		select ps.id
		     , ps.label
		     , ps.description
		     , ps.direction
		     , ps.lang
		     , ps.short_name
		     , ps.inst_id
		     , (select b.name
		          from ost_ui_institution_sys_vw b
		         where b.id = ps.inst_id
		           and b.lang = ps.lang
		       ) as inst_name
		  from pmo_ui_service_vw ps
		<iterate prepend=" where " conjunction=" and " property="filters">
			<isEqual property="filters[].element" compareValue="id">ps.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="label">ps.label like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="direction">ps.direction = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">ps.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">ps.inst_id = #filters[].value#</isEqual>
		</iterate>
		 order by ps.label asc
	</select>

	<!-- PMO Provider -->
	<select id="get-providers-hier" parameterClass="qparams" resultMap="mapping-pmo-provider-hier">
		select level
		     , po.id
		     , po.label
		     , po.description
		     , po.region_code
		     , po.provider_number
		     , po.lang
		     , po.short_name
		     , po.is_provider_group
		     , po.parent_id
		     , po.logo_path
		     , po.inst_id
		     , (select b.name
		          from ost_ui_institution_sys_vw b
		         where b.id = po.inst_id
		           and b.lang = po.lang
		       ) as inst_name
		     , connect_by_isleaf as is_leaf
		  from (select distinct item.*
		          from pmo_ui_provider_vw item
		<iterate prepend=" where " conjunction=" and " property="filters">
			<isEqual property="filters[].element" compareValue="id">item.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="label">item.label like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="regionCode">item.region_code = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">item.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">item.inst_id = #filters[].value#</isEqual>
		</iterate>
		       ) po
		start with (po.parent_id is null or po.parent_id not in (select id from pmo_ui_provider_vw))
		connect by prior po.parent_id = po.id
		     order siblings by po.id
	</select>
	
	<select id="get-providers" parameterClass="qparams" resultMap="mapping-pmo-provider">
		<include refid="paginatedOpen"/>
			select item.id
			     , item.label
			     , item.description
			     , item.region_code
			     , item.provider_number
			     , item.lang
			     , item.short_name
			     , item.is_provider_group
			     , item.parent_id
			     , item.logo_path
			     , item.inst_id
			     , (select b.name
			          from ost_ui_institution_sys_vw b
			         where b.id = item.inst_id
			           and b.lang = item.lang
			       ) as inst_name
			  from pmo_ui_provider_vw item
		<iterate prepend=" where " conjunction=" and " property="filters">
			<isEqual property="filters[].element" compareValue="id">item.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="label">item.label like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="regionCode">item.region_code = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">item.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">item.inst_id = #filters[].value#</isEqual>
		</iterate>
		<iterate prepend=" order by " conjunction=", " property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="auto">
				<isEqual property="sorting[].property" compareValue="id">item.id $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="label">upper(item.label) $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="regionCode">upper(item.region_code) $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="inst">item.inst_id $sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<isEmpty property="sorting" prepend=" order by ">item.id asc</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-providers-count" parameterClass="qparams" resultClass="int">
		<include refid="limitationOpenCount"/>
			select item.*
			  from pmo_ui_provider_vw item
		<iterate prepend=" where " conjunction=" and " property="filters">
			<isEqual property="filters[].element" compareValue="id">item.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="label">item.label LIKE #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="regionCode">item.region_code = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">item.lang = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="instId">item.inst_id = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<procedure id="add-provider-group" parameterClass="ru.bpc.sv2.pmo.PmoProvider">
		{call pmo_ui_provider_group_pkg.add(
			  o_id						=> #id,jdbcType=NUMERIC,mode=OUT#
			, o_seqnum					=> #seqNum,jdbcType=NUMERIC,mode=OUT#
			, i_parent_id				=> #parentId#
			, i_region_code				=> #regionCode#
			, i_provider_group_number	=> NULL
			, i_logo_path				=> #logoPath#
			, i_label					=> #label#
			, i_description				=> #description#
			, i_lang					=> #lang#
			, i_short_name				=> #shortName#
			, i_inst_id					=> #instId#
		)}
	</procedure>

	<procedure id="edit-provider-group" parameterClass="ru.bpc.sv2.pmo.PmoProvider">
		{call pmo_ui_provider_group_pkg.modify(
			  i_id						=> #id#
			, io_seqnum					=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
			, i_parent_id				=> #parentId#
			, i_region_code				=> #regionCode#
			, i_provider_group_number	=> NULL
			, i_logo_path				=> #logoPath#
			, i_label					=> #label#
			, i_description				=> #description#
			, i_lang					=> #lang#
			, i_short_name				=> #shortName#
			, i_inst_id					=> #instId#
		)}
	</procedure>

	<procedure id="add-provider" parameterClass="ru.bpc.sv2.pmo.PmoProvider">
		{call pmo_ui_provider_pkg.add(
			  o_id				=> #id,jdbcType=NUMERIC,mode=OUT#
			, o_seqnum			=> #seqNum,jdbcType=NUMERIC,mode=OUT#
			, i_region_code		=> #regionCode#
			, i_logo_path		=> #logoPath#
			, i_label			=> #label#
			, i_description		=> #description#
			, i_lang			=> #lang#
			, i_short_name		=> #shortName#
			, i_provider_number	=> #providerNumber#
			, i_parent_id		=> #parentId#
			, i_src_provider_id	=> #srcProviderId#
			, i_inst_id			=> #instId#
		)}
	</procedure>

	<procedure id="edit-provider" parameterClass="ru.bpc.sv2.pmo.PmoProvider">
		{call pmo_ui_provider_pkg.modify(
			  i_id				=> #id#
			, io_seqnum			=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
			, i_region_code		=> #regionCode#
			, i_logo_path		=> #logoPath#
			, i_label			=> #label#
			, i_description		=> #description#
			, i_lang			=> #lang#
			, i_short_name		=> #shortName#
			, i_provider_number	=> #providerNumber#
			, i_parent_id		=> #parentId#
			, i_inst_id			=> #instId#
		)}
	</procedure>

	<procedure id="remove-provider" parameterClass="ru.bpc.sv2.pmo.PmoProvider">
		{call pmo_ui_provider_pkg.remove(
			  i_id		=> #id#
			, i_seqnum	=> #seqNum#
		)}
	</procedure>

	<procedure id="remove-provider-group" parameterClass="ru.bpc.sv2.pmo.PmoProvider">
		{call pmo_ui_provider_group_pkg.remove(
			  i_id		=> #id#
			, i_seqnum	=> #seqNum#
		)}
	</procedure>

    <!-- PMO Provider Hosts-->
    <select id="get-hosts"
			parameterClass="qparams"
			resultMap="mapping-pmo-host">
		<include refid="paginatedOpen"/>
			SELECT 	  item.host_member_id
					, item.provider_id
					, get_text (i_table_name    => 'pmo_provider',
			                    i_column_name   => 'label',
			                    i_object_id     => item.provider_id,
			                    i_lang          => l.lang) provider_name
					, get_text (i_table_name    => 'net_member',
			                    i_column_name   => 'description',
			                    i_object_id     => item.host_member_id,
			                    i_lang          => l.lang) host_name
			        , item.network_id
			        , get_text (i_table_name    => 'net_network',
			                    i_column_name   => 'name',
			                    i_object_id     => item.network_id,
			                    i_lang          => l.lang) network_name
					, item.online_standard_id
					, get_text (i_table_name    => 'cmn_standard',
			                    i_column_name   => 'label',
			                    i_object_id     => item.online_standard_id,
			                    i_lang          => l.lang) online_standard_name
			        , item.offline_standard_id
			        , get_text (i_table_name    => 'cmn_standard',
			                    i_column_name   => 'label',
			                    i_object_id     => item.offline_standard_id,
			                    i_lang          => l.lang) offline_standard_name
					, item.execution_type
					, item.priority
					, item.mod_id
				 	, get_text (i_table_name    => 'rul_mod',
		                    i_column_name   => 'name',
		                    i_object_id     => item.mod_id,
		                    i_lang          => l.lang) mod_name
		            , item.inactive_till
					, l.lang
					, item.status
			FROM
				pmo_ui_provider_host_vw item, com_language_vw l
			<iterate prepend=" WHERE " conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="providerId">item.provider_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="hostId">item.host_member_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">l.lang = #filters[].value#</isEqual>
			</iterate>
	        <iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="hostName">upper(host_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="networkName">upper(network_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="onlineStandardName">upper(online_standard_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="offlineStandardName">upper(offline_standard_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="executionType">upper(item.execution_type) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="priority">item.priority $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="modId">item.mod_id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="inactiveTill">item.inactiveTill $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
			<isEmpty property="sorting" prepend=" ORDER BY ">host_name ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-hosts-count"
			parameterClass="qparams"
			resultClass="int">
			SELECT
				count(item.host_member_id)
			FROM
				pmo_ui_provider_host_vw item, com_language_vw l
			<iterate prepend=" WHERE " conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="providerId">item.provider_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="hostId">item.host_member_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">l.lang = #filters[].value#</isEqual>
			</iterate>
	</select>
	
	<procedure id="add-host"
    		parameterClass="ru.bpc.sv2.pmo.PmoHost">
    	{call PMO_UI_PROVIDER_HOST_PKG.add_host(
				  i_host_member_id 		=> #hostId#
				, i_provider_id			=> #providerId#
				, i_execution_type		=> #executionType#
				, i_priority			=> #priority#
				, i_mod_id				=> #modId#
				, i_inactive_till		=> #inactiveTill#
				, i_status				=> #status#
    			)}
    </procedure>
    
    <procedure id="edit-host"
    		parameterClass="ru.bpc.sv2.pmo.PmoHost">
    	{call PMO_UI_PROVIDER_HOST_PKG.modify_host(
				  i_host_member_id 		=> #hostId#
				, i_provider_id			=> #providerId#
				, i_execution_type		=> #executionType#
				, i_priority			=> #priority# 
				, i_mod_id				=> #modId#
				, i_inactive_till		=> #inactiveTill#
				, i_status				=> #status#
    			)}
    </procedure>
    
    <procedure id="remove-host"
    		parameterClass="ru.bpc.sv2.pmo.PmoHost">
    	{call PMO_UI_PROVIDER_HOST_PKG.remove_host(
    		  	  i_host_member_id 		=> #hostId#
				, i_provider_id			=> #providerId#
    		)}
    </procedure>
    
	<!-- PMO Provider - Purposes -->
	<select id="get-purposes" parameterClass="qparams" resultMap="mapping-pmo-purpose">
		<include refid="paginatedOpen"/>
			select p.id
			     , p.provider_id
			     , p.service_id
			     , p.label
			     , p.host_algorithm
			     , p.lang
			     , p.oper_type
			     , p.terminal_id
			     , p.mcc
			     , p.purpose_number
			     , p.mod_id
			     , p.amount_algorithm
			     , p.inst_id
			     , (select b.name
			          from ost_ui_institution_sys_vw b
			         where b.id = p.inst_id
			           and b.lang = p.lang
			       ) as inst_name
			  from pmo_ui_purpose_vw p
			<iterate prepend=" where " conjunction=" and " property="filters">
				<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="providerId">p.provider_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="purposeNumber">p.purpose_number = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">p.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">p.inst_id = #filters[].value#</isEqual>
			</iterate>
	        <iterate prepend=" order by " conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="auto">
					<isEqual property="sorting[].property" compareValue="label">upper(p.label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="hostAlgorithm">upper(p.host_algorithm) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="purposeNumber">p.purpose_number $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="inst">p.inst_id $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting" prepend=" order by ">p.label asc</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-purposes-count" parameterClass="qparams" resultClass="int">
		<include refid="limitationOpenCount"/>
			select p.id
			  from pmo_ui_purpose_vw p
			<iterate prepend=" where " conjunction=" and " property="filters">
				<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="providerId">p.provider_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="purposeNumber">p.purpose_number = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">p.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">p.inst_id = #filters[].value#</isEqual>
			</iterate>
		<include refid="limitationClose"/>
	</select>

	<procedure id="add-purpose" parameterClass="ru.bpc.sv2.pmo.PmoPurpose">
		{call pmo_ui_purpose_pkg.add(
			  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
			, i_provider_id			=> #providerId#
			, i_service_id			=> #serviceId#
			, i_host_algorithm		=> #hostAlgorithm#
			, i_oper_type			=> #operType#
			, i_terminal_id			=> #terminalId#
			, i_mcc					=> #mcc#
			, i_purpose_number		=> #purposeNumber#
			, i_mod_id				=> #modifierId#
			, i_amount_algorithm	=> #amountAlgorithm#
			, i_inst_id				=> #instId#
		)}
	</procedure>

	<procedure id="edit-purpose" parameterClass="ru.bpc.sv2.pmo.PmoPurpose">
		{call pmo_ui_purpose_pkg.modify(
			  i_id					=> #id#
			, i_provider_id			=> #providerId#
			, i_service_id			=> #serviceId#
			, i_host_algorithm		=> #hostAlgorithm#
			, i_oper_type			=> #operType#
			, i_terminal_id			=> #terminalId#
			, i_mcc					=> #mcc#
			, i_purpose_number		=> #purposeNumber#
			, i_mod_id				=> #modifierId#
			, i_amount_algorithm	=> #amountAlgorithm#
			, i_inst_id				=> #instId#
		)}
	</procedure>

	<procedure id="remove-purpose" parameterClass="ru.bpc.sv2.pmo.PmoPurpose">
		{call pmo_ui_purpose_pkg.remove(
			i_id	=> #id#
		)}
	</procedure>

    <!-- PMO - puposes - parameters -->
	<select id="get-purpose-parameters"
			parameterClass="qparams"
			resultMap="mapping-pmo-purpose-parameter">
		<include refid="paginatedOpen"/>
			SELECT 	  pp.id
					, pp.seqnum
					, pp.param_id
					, pp.label
					, pp.order_stage
					, pp.display_order
			        , pp.is_mandatory
			        , pp.is_template_fixed
			        , pp.is_editable
					, pp.purpose_id
					, pp.default_value
					, pp.data_type
					, pp.lang
					, pp.lov_id
					, lov.name lov_name
					, pp.default_char_value value_v
					, pp.default_number_value value_n
					, pp.default_date_value value_d  
					, pp.default_lov_value lov_value
					, pp.param_function
			FROM
				pmo_ui_purpose_parameter_vw pp,
				com_ui_lov_vw lov
			WHERE 	pp.lov_id = lov.id(+)					
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">pp.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="purposeId">pp.purpose_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">
					pp.lang = #filters[].value#
					AND lov.lang(+) = #filters[].value#
				</isEqual>
			</iterate>
	        <iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="label">upper(pp.label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="orderStage">upper(pp.order_stage) $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
			<isEmpty property="sorting" prepend=" ORDER BY ">pp.label ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>
	
	<select id="get-purpose-parameters-count"
			parameterClass="qparams"
			resultClass="int">
			SELECT
				count(pp.id)
			FROM
				pmo_ui_purpose_parameter_vw pp
			<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">pp.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="purposeId">pp.purpose_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">pp.lang = #filters[].value#</isEqual>
			</iterate>
	</select>
	
	<procedure id="add-purpose-parameter"
    		parameterClass="ru.bpc.sv2.pmo.PmoPurposeParameter">
    	{call PMO_UI_PURPOSE_PARAMETER_PKG.add(
				  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=OUT# 
				, i_param_id			=> #paramId#
				, i_purpose_id			=> #purposeId#
				, i_order_stage			=> #orderStage#
				, i_display_order		=> #displayOrder#
				, i_is_mandatory		=> #mandatory#
				, i_is_template_fixed	=> #fixed#
				, i_is_editable			=> #editable#
				, i_data_type 			=> #dataType#
				, i_default_value_char	=> #valueV#
				, i_default_value_num 	=> #valueN#
				, i_default_value_date	=> #valueD#
				, i_param_function 		=> #paramFunction#
    			)}
    </procedure>
    
    <procedure id="edit-purpose-parameter"
    		parameterClass="ru.bpc.sv2.pmo.PmoPurposeParameter">
    	{call PMO_UI_PURPOSE_PARAMETER_PKG.modify(
				  i_id					=> #id#
				, io_seqnum				=> #seqNum,jdbcType=NUMERIC,mode=INOUT# 
				, i_param_id			=> #paramId#
				, i_purpose_id			=> #purposeId#
				, i_order_stage			=> #orderStage#
				, i_display_order		=> #displayOrder#
				, i_is_mandatory		=> #mandatory#
				, i_is_template_fixed	=> #fixed#
				, i_is_editable			=> #editable#
				, i_data_type 			=> #dataType#
				, i_default_value_char	=> #valueV#
				, i_default_value_num 	=> #valueN#
				, i_default_value_date	=> #valueD#
				, i_param_function 		=> #paramFunction#
    			)}
    </procedure>
    
    <procedure id="remove-purpose-parameter"
    		parameterClass="ru.bpc.sv2.pmo.PmoPurposeParameter">
    	{call PMO_UI_PURPOSE_PARAMETER_PKG.remove(
    		  i_id			 => #id#
    		 ,i_seqnum		 => #seqNum#
    		)}
    </procedure>
	
	<!-- PMO Parameters -->
	<select id="get-parameters-for-combo"
	    	parameterClass="qparams"
	    	resultMap="mapping-pmo-parameter-combo" >
		
			SELECT 	  ps.id
					, ps.param_name
					, ps.label
					, ps.lang
			FROM pmo_ui_parameter_vw ps
			WHERE ps.lang = com_ui_user_env_pkg.get_user_lang
			ORDER BY ps.label ASC
	       
	</select>
	
	<resultMap id="mapping-pmo-parameter" class="ru.bpc.sv2.pmo.PmoParameter">
		<result property="id"            column="id"/>
		<result property="seqNum"        column="seqnum"/>
		<result property="systemName"    column="param_name"/>
		<result property="paramFunction" column="param_function"/>
		<result property="name"          column="label"/>
		<result property="description"   column="description"/>
		<result property="dataType"      column="data_type"/>
		<result property="lovId"         column="lov_id"/>
		<result property="lovName"       column="lov_name"/>
		<result property="pattern"       column="pattern"/>
		<result property="tagId"         column="tag_id"/>
		<result property="tagName"       column="tag_name"/>
		<result property="lang"          column="lang"/>
	</resultMap>
	
	<select id="get-parameters" parameterClass="qparams" resultMap="mapping-pmo-parameter">
		<include refid="paginatedOpen"/>
			select ps.id             as id
			     , ps.seqnum         as seqnum
			     , ps.param_name     as param_name
			     , ps.param_function as param_function
			     , ps.label          as label
			     , ps.description    as description
			     , ps.data_type      as data_type
			     , lov.id            as lov_id
			     , lov.name          as lov_name
			     , ps.pattern        as pattern
			     , ps.tag_id         as tag_id
			     , t.name            as tag_name
			     , ps.lang           as lang
			  from pmo_ui_parameter_vw ps
			     , com_ui_lov_vw lov
			     , aup_ui_tag_vw t
			 where ps.lov_id = lov.id(+)
			   and ps.lang   = lov.lang(+)
			   and ps.tag_id = t.id(+)
			   and ps.lang   = t.lang(+)
			<iterate prepend=" and " conjunction=" and " property="filters">
				<isEqual property="filters[].element" compareValue="id">ps.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="paramName">ps.param_name = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="paramFunc">ps.param_function = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="label">ps.label like #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="dataType">ps.data_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">ps.lang = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="tagId">ps.tag_id = #filters[].value#</isEqual>
			</iterate>
			<iterate prepend=" order by " conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="auto">
					<isEqual property="sorting[].property" compareValue="id">ps.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="paramName">upper(ps.param_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="paramFunc">upper(ps.param_function) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="label">upper(ps.label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="dataType">ps.data_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="lovName">upper(lov.name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="pattern">upper(ps.pattern) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="tagName">upper(tag_name) $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>
			<isEmpty property="sorting" prepend=" order by ">ps.id asc</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-parameters-count" parameterClass="qparams" resultClass="int">
		<include refid="limitationOpenCount"/>
		select ps.*
		  from pmo_ui_parameter_vw ps
		<iterate prepend=" where " conjunction=" and " property="filters">
			<isEqual property="filters[].element" compareValue="id">ps.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="paramName">ps.param_name = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="paramFunc">ps.param_function = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="label">ps.label like #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="dataType">ps.data_type = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="lang">ps.lang = #filters[].value#</isEqual>
		</iterate>
		<include refid="limitationClose"/>
	</select>

	<procedure id="add-parameter" parameterClass="ru.bpc.sv2.pmo.PmoParameter">
		{call pmo_ui_parameter_pkg.add(
			  o_id				=> #id,jdbcType=NUMERIC,mode=OUT#
			, o_seqnum			=> #seqNum,jdbcType=NUMERIC,mode=OUT#
			, i_param_name		=> #systemName#
			, i_data_type		=> #dataType#
			, i_lov_id			=> #lovId#
			, i_pattern			=> #pattern#
			, i_tag_id			=> #tagId#
			, i_param_function	=> #paramFunction#
			, i_label			=> #name#
			, i_description		=> #description#
			, i_lang			=> #lang#
		)}
	</procedure>

	<procedure id="edit-parameter" parameterClass="ru.bpc.sv2.pmo.PmoParameter">
		{call pmo_ui_parameter_pkg.modify(
			  i_id				=> #id#
			, io_seqnum			=> #seqNum,jdbcType=NUMERIC,mode=INOUT#
			, i_param_name		=> #systemName#
			, i_data_type		=> #dataType#
			, i_lov_id			=> #lovId#
			, i_pattern			=> #pattern#
			, i_tag_id			=> #tagId#
			, i_param_function	=> #paramFunction#
			, i_label			=> #name#
			, i_description		=> #description#
			, i_lang			=> #lang#
		)}
	</procedure>

	<procedure id="remove-parameter" parameterClass="ru.bpc.sv2.pmo.PmoParameter">
		{call pmo_ui_parameter_pkg.remove(
			  i_id		 => #id#
			, i_seqnum	=> #seqNum#
		)}
	</procedure>

	<resultMap  id="mapping-pmo-payment-order" class="ru.bpc.sv2.pmo.PmoPaymentOrder">
		<result property="id" column="id"/>
		<result property="customerId" column="customer_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="purposeId" column="purpose_id"/>
		<result property="purposeName" column="purpose_label"/>
		<result property="amount" column="amount"/>
		<result property="currency" column="currency"/>
		<result property="eventDate" column="event_date"/>
		<result property="status" column="status"/>
		<result property="objectId" column="object_id"/>
		<result property="objectNumber" column="object_number"/>
		<result property="objectDesc" column="object"/>
		<result property="instId" column="inst_id"/>
		<result property="attemptCount" column="attempt_count"/>
		<result property="splitHash" column="split_hash"/>
		<result property="lang" column="lang"/>
		<result property="instName" column="inst_name"/>
		<result property="respAmount" column="resp_amount"/>
        <result property="respCode" column="resp_code"/>
        <result property="orderNumber" column="payment_order_number"/>
        <result property="expirationDate" column="expiration_date"/>
        <result property="customerNumber" column="customer_number"/>
	</resultMap>
	
    <!-- Payment Orders tab on Customer page -->
    <select id="get-payment-orders"
			parameterClass="qparams"
			resultMap="mapping-pmo-payment-order">
		<include refid="paginatedOpen"/>
			SELECT 	  p.id
					, p.customer_id
					, p.purpose_id
					, p.purpose_label
					, p.entity_type
					, p.amount
					, p.currency
					, p.event_date
					, p.status
					, p.object_id
					, p.object_number
					, p.inst_id
					, p.attempt_count
					, p.split_hash
					, p.lang
	    			, p.resp_amount
					, get_object_desc(i_entity_type => p.entity_type, i_object_id => p.object_id) object
					, i.name AS inst_name
                    , p.resp_code
                    , p.payment_order_number
                    , p.expiration_date
                    , cs.customer_number
			FROM
				pmo_ui_order_vw p
                , prd_customer cs
				, ost_ui_institution_vw i
			WHERE p.is_template = 0
				AND p.inst_id = i.id
				AND p.lang = i.lang
                AND p.customer_id = cs.id
				<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="lang">p.lang = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="customerId">p.customer_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="entityType">p.entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="objectId">p.object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="purposeId">p.purpose_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="templateId">p.template_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="amount">p.amount = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="currency">p.currency = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="eventDate">p.event_date = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="status">p.status = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="instId">p.inst_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="attemptCount">p.attempt_count = #filters[].value#</isEqual>					
				</iterate>
	        <iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">p.id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="customerId">p.customer_id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="entityType">p.entity_type $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="objectId">p.object_id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="purposeId">p.purpose_id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="templateId">p.template_id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="amount">p.amount $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="currency">p.currency $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="eventDate">p.event_date $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="status">p.status $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="instId">p.inst_id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="attemptCount">p.attempt_count $sorting[].direction$</isEqual>	
				</isNotEqual>
	        </iterate>
			<isEmpty property="sorting" prepend=" ORDER BY ">p.id DESC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-payment-orders-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
			SELECT
				p.*
			FROM
				pmo_ui_order_vw p
			WHERE p.is_template = 0
				<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="lang">p.lang = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="customerId">p.customer_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="entityType">p.entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="objectId">p.object_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="purposeId">p.purpose_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="templateId">p.template_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="amount">p.amount = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="currency">p.currency = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="eventDate">p.event_date = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="status">p.status = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="instId">p.inst_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="attemptCount">p.attempt_count = #filters[].value#</isEqual>					
				</iterate>
		<include refid="limitationClose"/>
	</select>
	
	<!-- PMO Templates tab on Customer page -->
	<resultMap  id="mapping-pmo-template"
                class="ru.bpc.sv2.pmo.PmoTemplate">
		<result property="id" column="id"/>
		<result property="customerId" column="customer_id"/>
		<result property="label" column="label"/>
		<result property="description" column="description"/>
		<result property="status" column="status"/>
		<result property="purposeId" column="purpose_id"/>
		<result property="providerName" column="provider_name"/>
		<result property="serviceName" column="service_name"/>
		<result property="isPreparedOrder" column="is_prepared_order" javaType="boolean"/>
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst_name"/>
		<result property="lang" column="lang"/>
		<result property="currency" column="currency"/>
		<result property="amount" column="amount"/>
		<result property="entityType" column="entity_type"/>
		<result property="objectId" column="object_id"/>
		<result property="objectNumber" column="object_number"/>
		<result property="schedule" resultMap="pmo.template-schedule"/>
	</resultMap>
	
	<resultMap  id="template-schedule"
                class="ru.bpc.sv2.pmo.PmoSchedule">
		<result property="id" column="schedule_id"/>
		<result property="seqNum" column="schedule_seqnum"/>
		<result property="orderId" column="schedule_order_id"/>
		<result property="eventType" column="schedule_event_type"/>
		<result property="entityType" column="schedule_entity_type"/>
		<result property="objectId" column="schedule_object_id"/>
		<result property="objectNumber" column="schedule_object_number"/>
		<result property="attemptLimit" column="schedule_attempt_limit"/>
		<result property="amountAlgorithm" column="schedule_amount_algorithm"/>
		<result property="cycleId" column="schedule_cycle_id"/>
	</resultMap>

    <select id="get-templates"
			parameterClass="qparams"
			resultMap="mapping-pmo-template">
		<include refid="paginatedOpen"/>
			SELECT 	  t.id
					, t.customer_id
					, t.label
					, t.description
					, t.status
					, t.purpose_id
					, p.label provider_name
					, s.label service_name
					, t.is_prepared_order
					, t.inst_id
					, t.amount
					, t.currency
					, i.name inst_name
					, t.lang
					, t.entity_type
					, t.object_id
					, t.object_number
					, sch.id AS schedule_id
					, sch.seqnum AS schedule_seqnum
					, sch.order_id AS schedule_order_id
					, sch.event_type AS schedule_event_type
					, sch.entity_type AS schedule_entity_type
					, sch.object_id AS schedule_object_id
					, sch.object_number AS schedule_object_number
					, sch.attempt_limit AS schedule_attempt_limit
					, sch.amount_algorithm AS schedule_amount_algorithm
					, sch.cycle_id AS schedule_cycle_id
			FROM
				  pmo_ui_template_vw t
				, pmo_ui_purpose_vw pu
				, pmo_ui_provider_vw p
				, pmo_ui_service_vw s
				, ost_ui_institution_sys_vw i
				, pmo_ui_schedule_vw sch
			WHERE
				t.purpose_id = pu.id
			 	AND pu.provider_id = p.id
			 	AND pu.service_id = s.id
			 	AND t.lang = p.lang
			 	AND t.lang = pu.lang 
			 	AND t.lang = s.lang
			 	AND t.inst_id = i.id
				AND t.lang = i.lang
				AND t.id = sch.order_id(+)
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">t.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="customerId">t.customer_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">t.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">t.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
			</iterate>
	        <iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">t.id $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="label">upper(t.label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="status">upper(t.status) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="providerName">upper(p.label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="serviceName">upper(s.label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="eventType">schedule_event_type $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="amountAlgorithm">schedule_amount_algorithm $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="preparedOrder">t.is_prepared_order $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
			<isEmpty property="sorting" prepend=" ORDER BY ">t.id ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-templates-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
			SELECT 
					t.*
			FROM
					  pmo_ui_template_vw t
					, pmo_ui_purpose_vw pu
					, pmo_ui_provider_vw p
					, pmo_ui_service_vw s
					, ost_ui_institution_sys_vw i
			WHERE
					t.purpose_id = pu.id
				 	AND pu.provider_id = p.id
				 	AND pu.service_id = s.id
				 	AND t.lang = p.lang
				 	AND t.lang = pu.lang 
				 	AND t.lang = s.lang
				 	AND t.inst_id = i.id
					AND t.lang = i.lang
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">t.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="customerId">t.customer_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">t.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">t.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
			</iterate>
		<include refid="limitationClose"/>
	</select>
	
	<procedure id="add-template"
    		parameterClass="ru.bpc.sv2.pmo.PmoTemplate">
    	{call PMO_UI_TEMPLATE_PKG.add(
				  o_id                => #id,jdbcType=NUMERIC,mode=OUT#
				, i_customer_id       => #customerId#
				, i_purpose_id        => #purposeId#
				, i_status            => #status#
				, i_inst_id           => #instId#
				, i_is_prepared_order => #isPreparedOrder#
				, i_label             => #label#
				, i_description       => #description#
				, i_entity_type       => #entityType#
				, i_object_id         => #objectId#
				, i_lang              => #lang#
				, i_amount            => #amount#
  				, i_currency          => #currency#
    			)}
    </procedure>
    
    <procedure id="edit-template"
    		parameterClass="ru.bpc.sv2.pmo.PmoTemplate">
    	{call PMO_UI_TEMPLATE_PKG.modify(
				  i_id                => #id#
				, i_customer_id       => #customerId#
				, i_purpose_id        => #purposeId#
				, i_status            => #status#
				, i_inst_id           => #instId#
				, i_is_prepared_order => #isPreparedOrder#
				, i_label             => #label#
				, i_description       => #description#
				, i_entity_type       => #entityType#
				, i_object_id         => #objectId#
				, i_lang              => #lang#
				, i_amount            => #amount#
  				, i_currency          => #currency#
    			)}
    </procedure>
    
    <procedure id="remove-template"
    		parameterClass="ru.bpc.sv2.pmo.PmoTemplate">
    	{call PMO_UI_TEMPLATE_PKG.remove(
				  i_id                => #id#
    			)}
    </procedure>
    
    
    
    <!-- Template parameters -->
    <select id="get-template-parameters"
			parameterClass="qparams"
			resultMap="mapping-pmo-template-parameter">
		<include refid="paginatedOpen"/>
			SELECT    td.id
		        , temp.param_id
		        , temp.template_id
		        , temp.label
		        , td.param_value
		        , temp.is_template_fixed
		        , temp.is_editable
		        , temp.lang
				, temp.lov_id
		        , td.param_char_value value_v
				, td.param_number_value value_n
				, td.param_date_value value_d  
				, td.param_lov_value lov_value
			FROM 
				(SELECT
						  pp.param_id
	                    , t.id template_id
	                    , pp.label          
	                    , pp.is_template_fixed
	                    , pp.is_editable
	                    , pp.lang
						, pp.lov_id
				FROM
					  pmo_ui_template_vw t
	                , pmo_ui_purpose_parameter_vw pp
				WHERE
					t.purpose_id = pp.purpose_id AND              
	                t.lang = pp.lang
					<iterate prepend="AND" conjunction="AND" property="filters">
						<isEqual property="filters[].element" compareValue="templateId">t.id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="isEditable">pp.is_editable = #filters[].value#</isEqual>
					</iterate>
				) temp, 
				pmo_ui_template_data_vw td
			WHERE   temp.param_id = td.param_id(+) AND
			        temp.template_id = td.order_id(+)			
			        <iterate prepend="AND" conjunction="AND" property="filters">
						<isEqual property="filters[].element" compareValue="id">td.id = #filters[].value#</isEqual>
					</iterate>						
	        <iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="paramLabel">upper(temp.label) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="paramValue">upper(td.param_value) $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
			<isEmpty property="sorting" prepend=" ORDER BY ">upper(temp.label) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>
    
    <select id="get-template-parameters-count"
			parameterClass="qparams"
			resultClass="int">
		SELECT
			count(temp.param_id)
		FROM 
			(SELECT
					  pp.param_id
                    , t.id template_id
                    , pp.label          
                    , pp.is_template_fixed
                    , pp.is_editable
                    , pp.lang
			FROM
				  pmo_ui_template_vw t
                , pmo_ui_purpose_parameter_vw pp
			WHERE
				t.purpose_id = pp.purpose_id AND              
                t.lang = pp.lang
				<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="templateId">t.id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="lang">t.lang = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="isEditable">pp.is_editable = #filters[].value#</isEqual>
				</iterate>
			) temp, 
			pmo_ui_template_data_vw td
		WHERE   temp.param_id = td.param_id(+) AND
		        temp.template_id = td.order_id(+)			
		        <iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="id">td.id = #filters[].value#</isEqual>
				</iterate>	
	</select>
	
	
	<procedure id="add-template-parameter"
    		parameterClass="ru.bpc.sv2.pmo.PmoTemplateParameter">
    	{call PMO_UI_TEMPLATE_DATA_PKG.add(
				  o_id			=> #id,jdbcType=NUMERIC,mode=OUT#
				, i_template_id	=> #templateId#
				, i_param_id	=> #paramId#
				, i_param_value	=> #paramValue#
    			)}
    </procedure>
    
    <procedure id="edit-template-parameter"
    		parameterClass="ru.bpc.sv2.pmo.PmoTemplateParameter">
    	{call PMO_UI_TEMPLATE_DATA_PKG.modify(
				  i_id			=> #id#
				, i_template_id	=> #templateId#
				, i_param_id	=> #paramId#
				, i_param_value	=> #paramValue#
    			)}
    </procedure>
    
    <procedure id="remove-template-parameter"
    		parameterClass="ru.bpc.sv2.pmo.PmoTemplateParameter">
    	{call PMO_UI_TEMPLATE_DATA_PKG.remove(
    			  i_id			 => #id#
    			)}
    </procedure>
    
    <!-- Payment order parameters -->
    <select id="get-payment-order-parameters"
			parameterClass="qparams"
			resultMap="mapping-pmo-payment-order-parameter">
		<include refid="paginatedOpen"/>
			SELECT 	  p.id
					, p.order_id
					, p.param_id
					, p.param_name
					, p.label param_label
					, p.param_value
					, p.is_template_fixed
					, p.is_editable
					, p.lang
					, p.param_char_value value_v
					, p.param_number_value value_n
					, p.param_date_value value_d  
					, p.param_lov_value lov_value
			FROM
				pmo_ui_order_data_vw p
			<iterate prepend=" WHERE " conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="orderId">p.order_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">p.lang = #filters[].value#</isEqual>
			</iterate>
	        <iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="paramName">upper(p.param_name) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="paramValue">upper(p.param_value) $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
			<isEmpty property="sorting" prepend=" ORDER BY ">upper(p.label) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-payment-order-parameters-count"
			parameterClass="qparams"
			resultClass="int">
			SELECT count(p.id)
			FROM
				pmo_ui_order_data_vw p
			<iterate prepend=" WHERE " conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="orderId">p.order_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="lang">p.lang = #filters[].value#</isEqual>
			</iterate>
	</select>
	
	
	<!-- Payment order parameter values -->
	<resultMap  id="mapping-purposes-has-parameter"
                class="ru.bpc.sv2.pmo.PmoPurposeHasParameter">
        <result property="id" column="id"/>
        <result property="paramId" column="param_id"/>
        <result property="systemName" column="param_name"/>
        <result property="name" column="label"/>
        <result property="purposeName" column="purpose_name"/>
		<result property="defaultValue" column="default_value"/>
		<result property="lovId" column="lov_id"/>
		<result property="lovName" column="lov_name"/>
		<result property="dataType" column="data_type" />
		<result property="valueV" column="value_v" />
        <result property="valueN" column="value_n" />
        <result property="valueD" column="value_d" />
        <result property="lovValue" column="lov_value" />
	</resultMap>
	
	 <select id="get-purposes-has-parameter"
			parameterClass="qparams"
			resultMap="mapping-purposes-has-parameter">
		<include refid="paginatedOpen"/>
			SELECT 	  pp.id
					, pp.param_id
					, pp.param_name
					, pp.label
					, pp.default_value
					, pp.lov_id
					, p.label purpose_name
					, lov.name lov_name
					, pp.data_type
					, pp.default_char_value value_v
					, pp.default_number_value value_n
					, pp.default_date_value value_d  
					, pp.default_lov_value lov_value
			FROM
				pmo_ui_purpose_vw p, 
				pmo_ui_purpose_parameter_vw pp,
				com_ui_lov_vw lov
			WHERE 
				p.id = pp.purpose_id AND
				pp.lov_id = lov.id(+) AND
				pp.lang = lov.lang(+) AND				
				pp.lang = com_ui_user_env_pkg.get_user_lang
				AND pp.lang = p.lang
			<iterate prepend=" AND " conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="paramId">pp.param_id = #filters[].value#</isEqual>
			</iterate>
	        <iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="purposeName">upper(p.label) $sorting[].direction$</isEqual>					
				</isNotEqual>
	        </iterate>
			<isEmpty property="sorting" prepend=" ORDER BY ">upper(p.label) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>
	
	<select id="get-purposes-has-parameter-count"
			parameterClass="qparams"
			resultClass="int">
			SELECT count(pp.id)
			FROM
				pmo_ui_purpose_parameter_vw pp
			WHERE
				pp.lang = com_ui_user_env_pkg.get_user_lang
			<iterate prepend=" AND " conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="paramId">pp.param_id = #filters[].value#</isEqual>
			</iterate>
	</select>
	
	<resultMap  id="mapping-payment-order-parameter-value"
                class="ru.bpc.sv2.pmo.PmoParameterValue">
        <result property="id" column="id"/>
        <result property="purpParamId" column="purp_param_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="objectId" column="object_id"/>
		<result property="object" column="object"/>
		<result property="systemName" column="param_name"/>
		<result property="name" column="label"/>
		<result property="paramValue" column="param_value"/>
		<result property="dataType" column="data_type" />
		<result property="lovId" column="lov_id"/>
		<result property="lovName" column="lov_name"/>
        <result property="valueV" column="value_v" />
        <result property="valueN" column="value_n" />
        <result property="valueD" column="value_d" />
        <result property="lovValue" column="lov_value" />
	</resultMap>
	
    <select id="get-payment-order-parameter-values"
			parameterClass="qparams"
			resultMap="mapping-payment-order-parameter-value">
		<include refid="paginatedOpen"/>
			SELECT 	  p.id
					, p.purp_param_id
					, p.entity_type
					, p.object_id
					, get_object_desc(i_entity_type => p.entity_type, i_object_id => p.object_id) object
					, p.data_type
					, p.lov_id					
					, p.param_name
					, p.label
					, p.param_value
					, lov.name lov_name
					, p.param_char_value value_v
					, p.param_number_value value_n
					, p.param_date_value value_d  
					, p.param_lov_value lov_value 
			FROM
				pmo_ui_purp_param_value_vw p,
				com_ui_lov_vw lov
			WHERE 
				p.lov_id = lov.id(+) AND
				p.lang = lov.lang(+) AND
				p.lang = com_ui_user_env_pkg.get_user_lang
			<iterate prepend=" AND " conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="purpParamId">p.purp_param_id = #filters[].value#</isEqual>
			</iterate>
	        <iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="entityType">upper(p.entity_type) $sorting[].direction$</isEqual>
					<isEqual property="sorting[].property" compareValue="object">upper(object) $sorting[].direction$</isEqual>					
				</isNotEqual>
	        </iterate>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-payment-order-parameter-values-count"
			parameterClass="qparams"
			resultClass="int">
			SELECT count(p.id)
			FROM
				pmo_ui_purp_param_value_vw p
			WHERE
				p.lang = com_ui_user_env_pkg.get_user_lang
			<iterate prepend=" AND " conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="purpParamId">p.purp_param_id = #filters[].value#</isEqual>
			</iterate>
	</select>
	
	<procedure id="add-payment-order-parameter-values"
    		parameterClass="ru.bpc.sv2.pmo.PmoParameterValue">
    	{call PMO_UI_PURPOSE_PARAMETER_PKG.add_value(
				  o_id					=> #id,jdbcType=NUMERIC,mode=OUT#
				, i_purp_param_id		=> #purpParamId#
				, i_entity_type			=> #entityType#
				, i_object_id			=> #objectId#
				, i_data_type 			=> #dataType#
				, i_value_char			=> #valueV#
				, i_value_num 			=> #valueN#
				, i_value_date			=> #valueD#
    			)}
    </procedure>
    
    <procedure id="edit-payment-order-parameter-values"
    		parameterClass="ru.bpc.sv2.pmo.PmoParameterValue">
    	{call PMO_UI_PURPOSE_PARAMETER_PKG.modify_value(
				  i_id					=> #id#
				, i_data_type 			=> #dataType#
				, i_value_char			=> #valueV#
				, i_value_num 			=> #valueN#
				, i_value_date			=> #valueD#
    			)}
    </procedure>
    
    <procedure id="remove-payment-order-parameter-values"
    		parameterClass="ru.bpc.sv2.pmo.PmoParameterValue">
    	{call PMO_UI_PURPOSE_PARAMETER_PKG.remove_value(
    		  i_id			 => #id#
    		)}
    </procedure>
    
    
    <!-- Terminal purpose parameter values -->
        
    <resultMap  id="mapping-object-purpose-parameter-value"
                class="ru.bpc.sv2.pmo.PmoParameterValue">
        <result property="id" column="id"/>
		<result property="systemName" column="param_name"/>
		<result property="name" column="label"/>
		<result property="paramValue" column="param_value"/>
		<result property="entityType" column="entity_type"/>
		<result property="objectId" column="object_id" />
		<result property="purpParamId" column="purp_param_id" />
		<result property="dataType" column="data_type"/>
        <result property="valueV" column="value_v" />
        <result property="valueN" column="value_n" />
        <result property="valueD" column="value_d" />
        <result property="lovValue" column="lov_value" />
	</resultMap>
    
    
    <select id="get-object-purpose-parameter-values"
			parameterClass="qparams"
			resultMap="mapping-object-purpose-parameter-value">
		<include refid="paginatedOpen"/>
			SELECT 	  p.id
					, p.param_name
					, p.label
					, p.param_value
					, p.entity_type
					, p.object_id
					, p.purp_param_id
					, p.data_type					
					, p.param_char_value value_v
					, p.param_number_value value_n
					, p.param_date_value value_d  
					, p.param_lov_value lov_value 
			FROM			
				pmo_ui_purp_param_value_vw p
			WHERE 
				p.lang = com_ui_user_env_pkg.get_user_lang
				<iterate prepend=" AND " conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="purposeId">p.purpose_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="entityType">p.entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="objectId">p.object_id = #filters[].value#</isEqual>
				</iterate>			
	        <iterate prepend="ORDER BY" conjunction="," property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="paramName">upper(p.label) $sorting[].direction$</isEqual>
				</isNotEqual>
	        </iterate>
			<isEmpty property="sorting" prepend=" ORDER BY ">upper(p.label) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>
	
	
	<select id="get-object-purpose-parameter-values-count"
			parameterClass="qparams"
			resultClass="int">
			SELECT count(p.id)
			FROM			
				pmo_ui_purp_param_value_vw p
			WHERE 
				p.lang = com_ui_user_env_pkg.get_user_lang
				<iterate prepend=" AND " conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="purposeId">p.purpose_id = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="entityType">p.entity_type = #filters[].value#</isEqual>
					<isEqual property="filters[].element" compareValue="objectId">p.object_id = #filters[].value#</isEqual>
				</iterate>	
	</select>
	
	<select id="get-object-parameters-for-combo"
	    	parameterClass="qparams"
	    	resultMap="mapping-pmo-parameter-combo" >
		SELECT 	  pp.id
				, pp.param_name
				, pp.label
				, pp.lang
		FROM pmo_ui_purpose_parameter_vw pp
		WHERE pp.lang = com_ui_user_env_pkg.get_user_lang 
		 		AND pp.id NOT IN (
		 			SELECT purp_param_id
		 			FROM pmo_ui_purp_param_value_vw pvalue
		 			<iterate prepend=" WHERE " conjunction="AND" property="filters">
						<isEqual property="filters[].element" compareValue="purposeId">pvalue.purpose_id = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="entityType">pvalue.entity_type = #filters[].value#</isEqual>
						<isEqual property="filters[].element" compareValue="objectId">pvalue.object_id = #filters[].value#</isEqual>
	  				</iterate>
		 		)
	 			<iterate prepend="AND" conjunction="AND" property="filters">
					<isEqual property="filters[].element" compareValue="purposeId">pp.purpose_id = #filters[].value#</isEqual>
				</iterate>
		ORDER BY pp.label ASC
	</select>

	<resultMap  id="mapping-purpose-formatter"
	            class="ru.bpc.sv2.pmo.PmoPurposeFormatter"  >
	    <result property="id" column="id" />
	    <result property="seqnum" column="seqnum" />
	    <result property="purposeId" column="purpose_id" />
	    <result property="standardId" column="standard_id" />
	    <result property="versionId" column="version_id" />
	    <result property="messType" column="paym_aggr_msg_type" />
	    <result property="formatter" column="formatter" />
	    <result property="purposeLabel" column="purpose_label" />
	</resultMap>
	
	<select id="get-purpose-formatters"
			parameterClass="qparams" resultMap="mapping-purpose-formatter">
			<include refid="limitationOpen"/>
			SELECT
				ppf.id
				,ppf.seqnum
				,ppf.purpose_id
				,ppf.standard_id
				,ppf.version_id
				,ppf.paym_aggr_msg_type
				,ppf.formatter
				,pp.label purpose_label
			FROM
				pmo_purpose_formatter ppf, pmo_ui_purpose_vw pp
			WHERE 
				ppf.purpose_id = pp.id (+)						 		
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="lang">pp.lang (+) = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="id">ppf.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="standardId">ppf.standard_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="versionId">
					<isNull property="filters[].value">ppf.version_id IS NULL</isNull>
					<isNotNull property="filters[].value">ppf.version_id = #filters[].value#</isNotNull>
				</isEqual>						
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">ppf.id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="seqnum">ppf.seqnum $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="standardId">ppf.standard_id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="versionId">ppf.version_id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="messType">ppf.paym_aggr_msg_type $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="formatter">ppf.formatter $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="purposeLabel">pp.label $sorting[].direction$</isEqual>
				</isNotEqual>
			</iterate>				
			<include refid="limitationClose"/>
	</select>
	
	<select id="get-purpose-formatters-count"
			parameterClass="qparams"
			resultClass="int">
		<include refid="limitationOpenCount"/>
		SELECT
			ppf.*
		FROM
			pmo_purpose_formatter ppf
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">ppf.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="standardId">ppf.standard_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="versionId">
				<isNull property="filters[].value">ppf.version_id IS NULL</isNull>
				<isNotNull property="filters[].value">ppf.version_id = #filters[].value#</isNotNull>
			</isEqual>				
		</iterate>			
		<include refid="limitationClose"/>
	</select>	
	
	<procedure id="add-purpose-formatter"
			parameterClass="ru.bpc.sv2.pmo.PmoPurposeFormatter">
		{call pmo_ui_purpose_formatter_pkg.add_purpose_formatter(
			  o_id					=> #id,mode=OUT,jdbcType=NUMERIC#
			, o_seqnum				=> #seqnum,mode=OUT,jdbcType=NUMERIC#
			, i_purpose_id			=> #purposeId#
			, i_standard_id			=> #standardId#
			, i_version_id			=> #versionId#
			, i_paym_aggr_msg_type	=> #messType#
			, i_formatter			=> #formatter#
		)}
	</procedure>		
	
	<procedure id="modify-purpose-formatter"
			parameterClass="ru.bpc.sv2.pmo.PmoPurposeFormatter">
		{call pmo_ui_purpose_formatter_pkg.modify_purpose_formatter(
			  i_id					=> #id#
			, io_seqnum				=> #seqnum,mode=INOUT,jdbcType=NUMERIC#
			, i_purpose_id			=> #purposeId#
			, i_standard_id			=> #standardId#
			, i_version_id			=> #versionId#
			, i_paym_aggr_msg_type	=> #messType#
			, i_formatter			=> #formatter#
		)}
	</procedure>	
	
	<procedure id="remove-purpose-formatter"
			parameterClass="ru.bpc.sv2.pmo.PmoPurposeFormatter">
		{call pmo_ui_purpose_formatter_pkg.remove_purpose_formatter(
			  i_id			=> #id#
			, i_seqnum		=> #seqnum#
		)}
	</procedure>	
	
	<resultMap  id="mapping-schedule"
	            class="ru.bpc.sv2.pmo.PmoSchedule"  >
	    <result property="id" column="id" />
	    <result property="seqNum" column="seqnum" />
	    <result property="orderId" column="order_id" />
	    <result property="eventType" column="event_type" />
	    <result property="entityType" column="entity_type" />
	    <result property="objectId" column="object_id" />
	    <result property="attemptLimit" column="attempt_limit" />
	    <result property="amountAlgorithm" column="amount_algorithm" />
	    <result property="cycleId" column="cycle_id" />
	</resultMap>
	
	<select id="get-schedules"
			parameterClass="qparams" resultMap="mapping-schedule">
		<!-- <include refid="paginatedOpen" /> -->
			SELECT
				pmo.id
				,pmo.seqnum
				,pmo.order_id
				,pmo.event_type
				,pmo.entity_type
				,pmo.object_id
				,pmo.attempt_limit
				,pmo.amount_algorithm
				,pmo.cycle_id
			FROM
				pmo_ui_schedule_vw pmo
			<iterate prepend="WHERE" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">pmo.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="seqnum">pmo.seqnum = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="orderId">pmo.order_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="eventType">pmo.event_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">pmo.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">pmo.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="attemptLimit">pmo.attempt_limit = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="amountAlgorithm">pmo.amount_algorithm = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="cycleId">pmo.cycle_id = #filters[].value#</isEqual>
			</iterate>
			<iterate prepend="ORDER BY" conjunction=", " property="sorting">
				<isNotEqual property="sorting[].direction" compareValue="AUTO">
					<isEqual property="sorting[].property" compareValue="id">pmo.id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="seqnum">pmo.seqnum $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="orderId">pmo.order_id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="eventType">pmo.event_type $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="entityType">pmo.entity_type $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="objectId">pmo.object_id $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="attemptLimit">pmo.attempt_limit $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="amountAlgorithm">pmo.amount_algorithm $sorting[].direction$</isEqual>		
					<isEqual property="sorting[].property" compareValue="cycleId">pmo.cycle_id $sorting[].direction$</isEqual>		
				</isNotEqual>
			</iterate>
		<!-- <include refid="paginatedClose" /> -->
	</select>
	
	<select id="get-schedules-count"
			parameterClass="qparams"
			resultClass="int">
		SELECT
			count(pmo.id)
		FROM
			pmo_ui_schedule_vw pmo
	</select>	

	<procedure id="add-schedule"
    		parameterClass="ru.bpc.sv2.pmo.PmoSchedule">
    	{call PMO_UI_SCHEDULE_PKG.add(
				  o_id               => #id,jdbcType=NUMERIC,mode=OUT#
				, o_seqnum           => #seqNum,jdbcType=NUMERIC,mode=OUT#
				, i_order_id         => #orderId#
				, i_event_type       => #eventType#
				, i_entity_type      => #entityType#
				, i_object_id        => #objectId#
				, i_attempt_limit    => #attemptLimit#
				, i_amount_algorithm => #amountAlgorithm#
				, i_cycle_id         => #cycleId# 
    			)}
    </procedure>
    
    <procedure id="modify-schedule"
    		parameterClass="ru.bpc.sv2.pmo.PmoSchedule">
    	{call PMO_UI_SCHEDULE_PKG.modify(
				  i_id               => #id#
				, io_seqnum          => #seqNum,jdbcType=NUMERIC,mode=INOUT#
				, i_order_id         => #orderId#
				, i_event_type       => #eventType#
				, i_entity_type      => #entityType#
				, i_object_id        => #objectId#
				, i_attempt_limit    => #attemptLimit#
				, i_amount_algorithm => #amountAlgorithm#
				, i_cycle_id         => #cycleId# 
    			)}
    </procedure>
    
    <procedure id="remove-schedule"
    		parameterClass="ru.bpc.sv2.pmo.PmoSchedule">
    	{call PMO_UI_SCHEDULE_PKG.remove(
				  i_id               => #id#
				, i_seqnum           => #seqNum#
    			)}
    </procedure>
    
	<resultMap  id="mapping-order"
	            class="ru.bpc.sv2.pmo.PmoOrder">
	    <result property="id" column="id" />
	    <result property="originalId" column="original_id" />
	    <result property="msgType" column="msg_type" />
	    <result property="status" column="status" />
	    <result property="splitHash" column="split_hash" />
	    <result property="attemptCount" column="attempt_count" />
	    <result property="amount" column="amount" />
	    <result property="currency" column="currency" />
	    <result property="paymentHostId" column="payment_host_id" />
	</resultMap>    

	<select id="get-orders" parameterClass="qparams" resultMap="mapping-order">
		SELECT
				  paov.id
				, paov.original_id
				, paov.msg_type
				, paov.status
				, paov.split_hash
				, paov.attempt_count
				, paov.amount
				, paov.currency
				, paov.payment_host_id
		FROM
			pmo_api_order_vw paov
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">paov.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="status">paov.status = #filters[].value#</isEqual>
		</iterate>				
	</select>

	<procedure id="set-order-status"
			parameterClass="ru.bpc.sv2.pmo.PmoOrder">
		{call pmo_api_order_pkg.set_order_status(
				  i_order_id		=> #id#
				, i_status			=> #status#
		)}
	</procedure>
	
	<procedure id="set-attempt-count"
			parameterClass="ru.bpc.sv2.pmo.PmoOrder">
		{call pmo_api_order_pkg.set_attempt_count(
			  i_order_id			=> #id#
			, i_attempt_count		=> #attemptCount#
		)}
	</procedure>
	
	<resultMap  id="mapping-order-report"
	            class="ru.bpc.sv2.pmo.PmoOrderReport">
	    <result property="orderId" column="order_id"/>
	    <result property="customerId" column="customer_id"/>
	    <result property="purposeId" column="purpose_id"/>
	    <result property="amount" column="amount"/>
	    <result property="currency" column="currency"/>
	    <result property="status" column="status"/>
	    <result property="documentId" column="document_id"/>
	    <result property="documentType" column="document_type"/>
	    <result property="documentNumber" column="document_number"/>
	    <result property="documentDate" column="document_date"/>
	</resultMap>    

	<select id="get-order-reports" parameterClass="qparams" resultMap="mapping-order-report">
		SELECT
				  o.order_id
				, o.customer_id
				, o.purpose_id
				, o.amount
				, o.currency
				, o.status
				, o.document_id
				, o.document_type
				, o.document_number
				, o.document_date
		FROM
			cst_api_order_report_vw o
		<iterate prepend="WHERE" conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="orderId">o.order_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="documentId">o.document_id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="status">o.status IN ($filters[].value$)</isEqual>
		</iterate>				
	</select>

	<procedure id="add-order"
			parameterClass="ru.bpc.sv2.pmo.PmoPaymentOrder">
		{call pmo_api_order_pkg.add_order(
				  o_id                => #id,jdbcType=NUMERIC,mode=OUT#
				, i_customer_id       => #customerId#
				, i_entity_type    	  => #entityType#
				, i_object_id      	  => #objectId#
				, i_purpose_id     	  => #purposeId#
				, i_template_id       => #templateId#
				, i_amount            => #amount#
				, i_currency          => #currency#
				, i_event_date        => #eventDate#
				, i_status            => #status#
				, i_inst_id           => #instId#
				, i_attempt_count     => #attemptCount#
				, i_is_prepared_order => #isPreparedOrder#
				)}
	</procedure>

	<parameterMap class="java.util.Map" id="order-parameters-mapping">
		<parameter property="orderId" mode="IN" jdbcType="NUMERIC" javaType="java.lang.Long"/>	
		<parameter property="orderParameters" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
	</parameterMap>
									
	<procedure id="add-order-parameters"
			parameterMap="order-parameters-mapping">
		{call pmo_api_order_pkg.register_payment_parameter_web(
				  i_order_id => ?
				, i_params   => ?
				)}
	</procedure>

	<resultMap id="linked-cards-mapping" class="java.util.HashMap">
		<result property="id" column="linked_card_id" javaType="string"/>
        <result property="cardMask" column="card_mask" javaType="string"/>
        <result property="networkId" column="card_network_id" javaType="int"/>
        <result property="cardholderName" column="cardholder_name" javaType="string"/>
		<result property="expDate" column="expiration_date" javaType="string"/>
		<result property="status" column="status" javaType="string"/>
		<result property="linkDate" column="link_date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
		<result property="unlinkDate" column="unlink_date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
	</resultMap>

	<parameterMap id="get-linked-cards-mapping" class="java.util.Map">
		<parameter property="customerNumber" javaType="string" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="accountNumber" javaType="string" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="instId" javaType="int" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="status" javaType="string" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="linkedCards" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT" resultMap="linked-cards-mapping"/>
	</parameterMap>

	<procedure id="get-linked-cards"
			parameterMap="get-linked-cards-mapping">
    	{call PMO_UI_LINKED_CARD_PKG.get_linked_cards(
    			  i_customer_number => ?
				, i_account_number  => ?
				, i_inst_id         => ?
				, i_status          => ?
				, o_linked_card_ref => ?
				)}
	</procedure>

	<parameterMap id="unlink-card-mapping" class="java.util.Map">
		<parameter property="customerNumber" javaType="string" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="instId" javaType="int" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="linkedCardId" javaType="string" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>

	<procedure id="unlink-card"
			parameterMap="unlink-card-mapping">
    	{call PMO_UI_LINKED_CARD_PKG.unlink_card(
    			  i_customer_number => ?
				, i_inst_id         => ?
				, i_linked_card_id  => ?
				)}
	</procedure>
	
	<resultMap  id="mapping-payment-order-sys"
                class="ru.bpc.sv2.pmo.PmoPaymentOrder">
		<result property="id" column="id"/>
		<result property="customerId" column="customer_id"/>
		<result property="purposeId" column="purpose_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="amount" column="amount"/>
		<result property="currency" column="currency"/>
		<result property="eventDate" column="event_date"/>
		<result property="status" column="status"/>
		<result property="objectId" column="object_id"/>
		<result property="instId" column="inst_id"/>
		<result property="attemptCount" column="attempt_count"/>
		<result property="splitHash" column="split_hash"/>
	</resultMap>

    <select id="get-payment-orders-sys"
			parameterClass="qparams"
			resultMap="mapping-payment-order-sys">
		SELECT 	  p.id
				, p.customer_id
				, p.purpose_id
				, p.entity_type
				, p.amount
				, p.currency
				, p.event_date
				, p.status
				, p.object_id
				, p.inst_id
				, p.attempt_count
				, p.split_hash
		FROM pmo_order_vw p
		WHERE p.is_template = 0
			<iterate prepend="AND" conjunction="AND" property="filters">
				<isEqual property="filters[].element" compareValue="id">p.id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="customerId">p.customer_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="entityType">p.entity_type = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="objectId">p.object_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="purposeId">p.purpose_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="amount">p.amount = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="currency">p.currency = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="eventDate">p.event_date = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="status">p.status = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="instId">p.inst_id = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="attemptCount">p.attempt_count = #filters[].value#</isEqual>
				<isEqual property="filters[].element" compareValue="docType">
					p.id IN (SELECT d.object_id FROM rpt_ui_document_vw d 
							WHERE d.document_type = #filters[].value# AND entity_type = 'ENTTPMNO')
				</isEqual>					
			</iterate>
	</select>
	
	<resultMap id="linked-cards-mapping-ec" class="java.util.HashMap">
		<result property="id" column="linked_card_id" javaType="string"/>
        <result property="cardMask" column="card_mask" javaType="string"/>
        <result property="networkId" column="card_network_id" javaType="int"/>
        <result property="cardholderName" column="cardholder_name" javaType="string"/>
		<result property="expDate" column="expiration_date" javaType="string"/>
		<result property="status" column="status" javaType="string"/>
		<result property="linkDate" column="link_date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
		<result property="unlinkDate" column="unlink_date" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
	</resultMap>

	<parameterMap id="get-linked-cards-mapping-ec" class="java.util.Map">
		<parameter property="customerNumber" javaType="string" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="instId" javaType="int" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="status" javaType="string" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="linkedCards" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT" resultMap="linked-cards-mapping"/>
	</parameterMap>

	<procedure id="get-linked-cards-ec"
			parameterMap="get-linked-cards-mapping-ec">
    	{call ECM_API_LINKED_CARD_PKG.get_linked_cards(
    			  i_customer_number => ?
				, i_inst_id         => ?
				, i_status          => ?
				, o_linked_card_ref => ?
				)}
	</procedure>
	
	<resultMap id="get-merchant-creds-map" class="java.util.HashMap">
		<result property="login" column="login" javaType="string"/>
		<result property="password" column="password" javaType="string"/>
		<result property="merchantNumber" column="merchant_number" javaType="string"/>
	</resultMap>
	<select id="get-merchant-creds"
	 parameterClass="java.util.Map"
	 resultMap="get-merchant-creds-map">
		select 
		e.merchant_login AS login
		, e.merchant_password AS password
		, m.merchant_number
      from ecm_merchant e
         , acq_merchant m
     where 
     	m.id = #merchantNumber#
     	and m.inst_id = #instId#      
	</select>
	
	<parameterMap id="get-linked-card-number-map" class="java.util.Map">
		<parameter property="linkedCardId" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="cardNumber" javaType="java.lang.String" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="expireDate" javaType="java.util.Date" jdbcType="DATE" mode="OUT"/>		
	</parameterMap>

	<procedure id="get-linked-card-number"
			parameterMap="get-linked-card-number-map">
    	{call ecm_api_linked_card_pkg.get_linked_card_number(
    			  i_linked_card_id	=> ?
				, o_card_number     => ?
				, o_card_expir_date => ?
				)}
	</procedure>

	<resultMap id="mapping-pmo-payment-order-cur" class="ru.bpc.sv2.pmo.PmoPaymentOrder">
		<result property="id" column="order_id"/>
		<result property="eventDate" column="order_date"/>
		<result property="entityType" column="entity_type"/>
		<result property="objectId" column="object_id"/>
		<result property="objectNumber" column="object_number"/>
		<result property="customerNumber" column="customer_number"/>
		<result property="status" column="status"/>
		<result property="purposeId" column="purpose_id"/>
		<result property="amount" column="amount"/>
		<result property="currency" column="currency"/>
		<result property="orderNumber" column="payment_order_number"/>
		<result property="instId" column="inst_id"/>
		<result property="instName" column="inst"/>
		<result property="respCode" column="resp_code"/>
		<result property="respAmount" column="resp_amount"/>
		<result property="expirationDate" column="expiration_date"/>
		<result property="attemptCount" column="attempt_count"/>
		<result property="templateId" column="template_id"/>
		<result property="purposeName" column="purpose_label"/>
	</resultMap>

	<parameterMap class="java.util.Map" id="get-pmo-payment-orders-cur-map">
		<parameter property="ref_cur" javaType="java.sql.ResultSet" jdbcType="ORACLECURSOR" mode="OUT" resultMap="mapping-pmo-payment-order-cur"/>
		<parameter property="row_count" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="first_row" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="last_row" javaType="java.lang.Long" jdbcType="NUMERIC" mode="IN"/>
		<parameter property="tab_name" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="param_tab" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
		<parameter property="sorting_tab" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
	</parameterMap>

	<procedure id="get-pmo-payment-orders-cur" parameterMap="get-pmo-payment-orders-cur-map">
		{call pmo_ui_order_search_pkg.get_ref_cur(
				  o_ref_cur     => ?
				, i_row_count   => ?
				, i_first_row   => ?
				, i_last_row    => ?
				, i_tab_name    => ?
				, i_param_tab   => ?
				, i_sorting_tab => ?
		)}
	</procedure>

	<parameterMap class="java.util.Map" id="get-pmo-payment-orders-cur-count-map">
		<parameter property="row_count" javaType="java.lang.Integer" jdbcType="NUMERIC" mode="OUT"/>
		<parameter property="tab_name" javaType="java.lang.String" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="param_tab" jdbcType="COM_PARAM_MAP_TPT" typeName="COM_PARAM_MAP_TPT" typeHandler="ru.bpc.sv2.utils.CommonParamTypeHandler" mode="IN"/>
	</parameterMap>

	<procedure id="get-pmo-payment-orders-cur-count" parameterMap="get-pmo-payment-orders-cur-count-map">
		{call pmo_ui_order_search_pkg.get_row_count(
				  o_row_count => ?
				, i_tab_name  => ?
				, i_param_tab => ?
		)}
	</procedure>

	<resultMap  id="mapping-pmo-payment-order-detail"
				class="ru.bpc.sv2.pmo.PmoPaymentOrderDetail">
		<result property="id" column="id"/>
		<result property="orderId" column="order_id"/>
		<result property="entityType" column="entity_type"/>
		<result property="objectId" column="object_id"/>
	</resultMap>

	<select id="get-payment-order-details"
			parameterClass="qparams"
			resultMap="mapping-pmo-payment-order-detail">
		<include refid="paginatedOpen"/>
		SELECT 	  d.id
				, d.order_id
				, d.entity_type
				, d.object_id
		FROM pmo_ui_order_detail_vw d
		<iterate prepend=" WHERE " conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">d.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="orderId">d.order_id = #filters[].value#</isEqual>
		</iterate>
		<iterate prepend="ORDER BY" conjunction="," property="sorting">
			<isNotEqual property="sorting[].direction" compareValue="AUTO">
				<isEqual property="sorting[].property" compareValue="entityType">d.entity_type $sorting[].direction$</isEqual>
				<isEqual property="sorting[].property" compareValue="objectId">d.object_id $sorting[].direction$</isEqual>
			</isNotEqual>
		</iterate>
		<isEmpty property="sorting" prepend=" ORDER BY ">upper(d.id) ASC</isEmpty>
		<include refid="paginatedClose"/>
	</select>

	<select id="get-payment-order-details-count"
			parameterClass="qparams"
			resultClass="int">
		SELECT count(d.id)
		FROM pmo_ui_order_detail_vw d
		<iterate prepend=" WHERE " conjunction="AND" property="filters">
			<isEqual property="filters[].element" compareValue="id">d.id = #filters[].value#</isEqual>
			<isEqual property="filters[].element" compareValue="orderId">d.order_id = #filters[].value#</isEqual>
		</iterate>
	</select>
	
	
</sqlMap>
